<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis消息队列</title>
      <link href="/ZzzjhBlog/2025/04/02/Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/ZzzjhBlog/2025/04/02/Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h1><p>学习笔记基于黑马的Redis教程</p><p>Redis中提供了三个不同的方式实现消息队列</p><p><strong>list结构:基于List来实现消息队列</strong><br><strong>PubSub：基本的点对点消息模型</strong><br><strong>Stream：比较完善的消息队列模型</strong></p><h2 id="list结构-基于List来实现消息队列"><a href="#list结构-基于List来实现消息队列" class="headerlink" title="list结构:基于List来实现消息队列"></a>list结构:基于List来实现消息队列</h2><p>消息队列（Message Queue）就是存放消息的队列 Redis的list结构是一个双向队列 很容易模拟出队列效果</p><p>队列是先进先出 那么入口和出口不在一边 因此我们可以利用：<strong>LPUSH</strong>结合<strong>RPOP</strong> 或者<strong>RPUSH</strong> 结合<strong>LPOP</strong>来实现这个队列效果</p><p><img src="/ZzzjhBlog/images/image-20250402133721391.png" alt="image-20250402133721391"></p><p><img src="/ZzzjhBlog/images/image-20250402133730174.png" alt="image-20250402133730174"></p><p>这里需要注意的是<strong>队列中没有消息的时候RPOP或LPOP操作会返回null 不会像JVM阻塞队列那样会阻塞并等待消息</strong>。<br>这里应该<strong>使用BRPOP或者BLPOP来实现阻塞效果</strong></p><p><img src="/ZzzjhBlog/images/image-20250402141534895.png" alt="image-20250402141534895"></p><p><strong>那为什么不直接使用JVM阻塞队列呢？</strong></p><p>第一：消息队列是<strong>JVM以外的独立服务不受JVM内存限制</strong><br>第二：消息队列不仅仅做数据存储，还要确保<strong>数据安全</strong>，<strong>消息队列中的数据做持久化存储</strong>不管是服务宕机还是服务重启消息队列中的消息不会消失</p><h3 id="Redis示例操作"><a href="#Redis示例操作" class="headerlink" title="Redis示例操作"></a>Redis示例操作</h3><p>首先我们执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对于列表 l1 执行BRPOP 对于l1列表执行删除最后一个元素并且返回它</span></span><br><span class="line">BRPOP l1 20 #这里的20指的是阻塞的时间</span><br></pre></td></tr></table></figure><p>然后我们往l1列表中添加元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPUSH l1 e1 e2</span><br></pre></td></tr></table></figure><p>我们可以在马上看到 这边执行了移除最后一个元素的得到的结果</p><p><img src="/ZzzjhBlog/images/image-20250402141847242.png" alt="image-20250402141847242"><br>我们在执行一次 <strong>BRPOP l1 20</strong> 又可以看到</p><p><img src="/ZzzjhBlog/images/image-20250402141947156.png" alt="image-20250402141947156"><br>我们可以直观的了解这个执行过程 <strong>有元素就移除 没有元素就等待对于的阻塞时间（自己定义)</strong></p><p>这就是利用List结构模拟消息队列方式 </p><p><strong>对比JVM的阻塞队列优势</strong><br>①独立于JVM存储 不依赖JVM 不用担心 存储数据上限问题<br>②数据安全 Redis数据支持持久化存储 RDB 和 AOF方式<br>③满足消息的有序性</p><p><strong>List消息队列的缺点</strong><br>①无法避免消息丢失 比如里从队列中拿出消息（从队列中删除消息） 但是没来的及处理Redis宕机了 那么其他消费者也拿不到这条消息 造成消息丢失<br>②只支持单消费者</p><h2 id="PubSub：基本的点对点消息模型"><a href="#PubSub：基本的点对点消息模型" class="headerlink" title="PubSub：基本的点对点消息模型"></a>PubSub：基本的点对点消息模型</h2><p><strong>PubSub</strong>（发布订阅 Publis SubScribe）这个是Redis2.0 引入的消息传递模型。 就是消费者可以订阅一个或者多个channel 生产者向channel发送消息后 所有的订阅者都能够收到相关的消息</p><p><strong>SUBSCRIBE channel [channel] ：订阅一个或多个频道</strong></p><p><strong>PUBLISH channel msg：向一个频道发送消息</strong></p><p><strong>PSUBSCRIBE pattern [pattern] ： 订阅与pattern格式匹配的所有频道</strong></p><p><strong>匹配符号写法：</strong><br><img src="/ZzzjhBlog/images/image-20250402200449048.png" alt="image-20250402200449048"></p><p><strong>h?llo 代表当个任意字符</strong><br><strong>h*llo 代表中间可以添加任意多个字符</strong><br><strong>h[ae]lloo 代表只能是 helloo或者 hallo</strong></p><p><img src="/ZzzjhBlog/images/image-20250402165302164.png" alt="image-20250402165302164"></p><h3 id="Redis操作示例"><a href="#Redis操作示例" class="headerlink" title="Redis操作示例"></a><strong>Redis操作示例</strong></h3><p>开启三个Redis控制台窗口</p><p>一个使用subscribe</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe order.q1</span><br></pre></td></tr></table></figure><p>一个使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psubscribe order.*</span><br></pre></td></tr></table></figure><p>一个发布消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish order.q1 hello3</span><br></pre></td></tr></table></figure><p>此时两个都会收到信息</p><p>如果发布消息的频道改成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish order.q2 hello3</span><br></pre></td></tr></table></figure><p>那么第一个订阅<strong>subscribe order.q1</strong>频道的就接受不到相关消息</p><h3 id="PubSub的消息队列优缺点"><a href="#PubSub的消息队列优缺点" class="headerlink" title="PubSub的消息队列优缺点"></a>PubSub的消息队列优缺点</h3><p><strong>优点：</strong><br>①采用发布订阅模型 支持多生产 多消费</p><p><strong>缺点：</strong><br>①不支持数据持久化（PubSub 的消息是实时的，默认情况下不会被持久化到磁盘，所以即使开启了 AOF 或 RDB，也不会保存 PubSub 的消息）<br>②无法避免消息丢失 （Redis宕机那么这些临时数据就丢失了）<br>③消息堆积有上限 超出时候数据丢失</p><h2 id="Stream：比较完善的消息队列模型"><a href="#Stream：比较完善的消息队列模型" class="headerlink" title="Stream：比较完善的消息队列模型"></a>Stream：比较完善的消息队列模型</h2><p>Stream是Redis 5.0 引入的一种新的数据类型 可以实现一个功能非常完善的一个消息队列</p><p><strong>发送消息的命令：XADD</strong><br><img src="/ZzzjhBlog/images/image-20250402222635851.png" alt="image-20250402222635851"></p><p><strong>创建示例：</strong></p><p><img src="/ZzzjhBlog/images/image-20250402223245390.png" alt="image-20250402223245390"></p><p>向名为s1的队列中添加一条消息 k1 v1 消息id自动生成 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">xadd s1 * k1 v1</span></span><br><span class="line">1743604433411-0 #返回的消息id</span><br></pre></td></tr></table></figure><p><strong>读取消息方式：XREAD</strong></p><p><img src="/ZzzjhBlog/images/image-20250402223808744.png" alt="image-20250402223808744"></p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">XREAD COUNT 1 STREAMS s1 0  <span class="comment">#COOUNT 1 表示读取一条消息  STREAMS s1 表示从s1队列中读取  0 表示从第一个位置开始读</span></span></span><br><span class="line">s1</span><br><span class="line">1743604433411-0</span><br><span class="line">k1</span><br><span class="line">v1</span><br></pre></td></tr></table></figure><p>在Stream中一条消息被读取之后<strong>不会消失 永久存在可以被多个消费者读取</strong></p><p>读取最新消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">XREAD COUNT 1 STREAMS $ <span class="comment">#读取最新消息使用美刀符</span></span></span><br></pre></td></tr></table></figure><p><strong>如果队列中所有的消息都被读取过了那么 会返回空</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">XREAD COUNT 1 STREAMS s1 $</span></span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>如果想要等待读取最新的消息 那么就要阻塞它就是命令中加上BLOCK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">XREAD COUNT 1 BLOCK 0 STREAMS s1 $ <span class="comment">#BLOCK 代表阻塞获取最新消息 后面跟上阻塞时间 如果是0那么代表永久的阻塞</span></span></span><br></pre></td></tr></table></figure><p>此时阻塞获取后我们开启另一个控制台再次添加消息 可以得到输出结果</p><p>存入消息</p><p><img src="/ZzzjhBlog/images/image-20250402225237905.png" alt="image-20250402225237905"><br>另一个控制台结果<br><img src="/ZzzjhBlog/images/image-20250402225328380.png" alt="image-20250402225328380"></p><p><img src="/ZzzjhBlog/images/image-20250402225428703.png" alt="image-20250402225428703"></p><p><img src="/ZzzjhBlog/images/image-20250402225553988.png" alt="image-20250402225553988"></p><p><strong>问题复现：</strong></p><p>首先阻塞读取一次<br><img src="/ZzzjhBlog/images/image-20250402230426515.png" alt="image-20250402230426515"></p><p>发送消息</p><p><img src="/ZzzjhBlog/images/image-20250402230345669.png" alt="image-20250402230345669"><br>然后这边就读取到了<br><img src="/ZzzjhBlog/images/image-20250402230524916.png" alt="image-20250402230524916"><br>在处理这条消息的期间进来了很多条消息<br><img src="/ZzzjhBlog/images/image-20250402230602056.png" alt="image-20250402230602056"><br>然后它下次再次阻塞读取最新的消息那么此时读取到的消息就是<br><img src="/ZzzjhBlog/images/image-20250402230637308.png" alt="image-20250402230637308"><br>在这之间就漏读取了很多条消息</p><h3 id="STREAM类型的消息队列的优缺点"><a href="#STREAM类型的消息队列的优缺点" class="headerlink" title="STREAM类型的消息队列的优缺点"></a>STREAM类型的消息队列的优缺点</h3><p><strong>优点：</strong><br>①消息可以回溯(Redis Stream 实现的消息队列<strong>支持持久化</strong>，其设计目标之一就是解决 PubSub 消息可靠性不足的问题)<br>②一个消息可以被多个消费者读取<br>③可以阻塞读取</p><p><strong>缺点：</strong><br>①有消息漏读的风险</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/ZzzjhBlog/2025/04/01/%E9%9B%86%E5%90%88/"/>
      <url>/ZzzjhBlog/2025/04/01/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="/ZzzjhBlog/images/%E9%9B%86%E5%90%88.png" alt="集合"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>①可以<strong>动态的保存</strong>任意多个对象 使用比较方便<br>②提供了一系列方便的操作对象的方法add、remove、set、get等等w</p><p>java的集合类 分为两大类<br>单列集合：Collection<br>双列集合：Map</p><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>Collection接口<strong>实现类</strong>的特点<br>public interface Collection <E> extends <strong>Iterable</strong><E><br>①collection实现类可以存放多个元素 每个元素可以是Object类及其子类<br>②有些collection的实现类 是有序的(List) 有些是无序的<Set><br>③Collection接口没有直接实现的子类 是通过它的子接口Set 和 List来实现。</p><p><strong>Collectio接口遍历元素的方法</strong></p><p><strong>方法一：使用Iterator（迭代器）</strong><br>①Iterator对象称为迭代器 <strong>主要用于遍历Colleciton集合中的元素</strong><br>②所有实现了Collection接口的集合类都有一个Iteratio迭代器<br>③Iterator 的结构<br>一个集合迭代器的执行原理<br><img src="/ZzzjhBlog/images/image-20240924015615583.png" alt="image-20240924015615583"></p><p><img src="/ZzzjhBlog/images/image-20240924015549430.png" alt="image-20240924015549430"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> arrayList.iterator();<span class="comment">//得到一个集合的迭代器对象</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123; <span class="comment">//hasNext()：判断是否还有下一个元素</span></span><br><span class="line">    <span class="comment">//next() 返回下一个元素</span></span><br><span class="line">    System.out.println(interator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;雪豹&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;孙笑川&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;赛小息&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//c = [丁真,雪豹,孙笑川,赛小息]</span></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line">        <span class="comment">/*System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        System.out.println(iterator.next());*/</span></span><br><span class="line">        <span class="comment">//超出集合长度会报异常NoSuchElementException没有此元素 集合中有几个取几次</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行流程 当我们程序调用 iterator()方法的时候 一开始默认开始在 集合的第一个元素位置上</span></span><br><span class="line">        <span class="comment">//然后开始调用 hasNext()方法判断当前位置是否有数据 有返回true 没有 false</span></span><br><span class="line">        <span class="comment">//然后接下来判断有数据 执行 next()方法 获取当前位置元素 并且将迭代器位置 移动至下一个元素处 一直如此 直到 iterator()方法 为false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><p>​执行流程 当我们程序调用 iterator()方法的时候 一开始默认开始在 集合的第一个元素位置上<br>​        然后开始调用 hasNext()方法判断当前位置是否有数据 有返回true 没有 false<br>​        然后接下来判断有数据 执行 next()方法 获取当前位置元素 并且将迭代器位置 移动至下一个元素处 一直如此 直到 iterator()方法 为false</p><p><strong>注意事项</strong><br>在<strong>调用next()方法时</strong> 最好是<strong>每次hasNext()判断后只调用一次</strong> 如果<strong>调用两次及以上 会出现越界问题</strong></p><p>④Iterator只用于遍历集合 Iterator本身不存放对象</p><p><strong>方法二：增强for循环</strong></p><p>增强for循环 可以代替iterator迭代器<br>特点：<strong>增强for 循环就是简化版的 iterator</strong><br>本质一样<strong>只能用于 遍历集合或数组</strong></p><p><strong>底层就是迭代器</strong></p><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素类型 元素名 : 集合名或数组名字)&#123;</span><br><span class="line">    访问元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;雪豹&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;孙笑川&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;赛小息&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//c = [丁真,雪豹,孙笑川,赛小息]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方式三：Lambda表达式</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;雪豹&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;孙笑川&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;赛小息&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//c = [丁真,雪豹,孙笑川,赛小息]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lambda表达式遍历</span></span><br><span class="line">        collection.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//可以简化</span></span><br><span class="line">        collection.forEach((String s) -&gt; &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//继续简化</span></span><br><span class="line">        collection.forEach(s-&gt; System.out.println(s));</span><br><span class="line">        <span class="comment">//最终</span></span><br><span class="line">        collection.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a><strong>List接口</strong></h3><h4 id="List接口基本介绍"><a href="#List接口基本介绍" class="headerlink" title="List接口基本介绍"></a><strong>List接口基本介绍</strong></h4><p>List接口是Collection接口的子接口<br>①List集合类中元素有序<br>②List集合中的每个元素都有其对应的顺序索引<br>③List容器中的元素都对应一个整数类型的序号记载<br>④List接口的实现类有 <strong>ArrayList、LinkedList、Vector</strong></p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p><strong>有序 可重复 有索引</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//add:添加单个元素</span></span><br><span class="line">        arrayList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="number">10</span>);</span><br><span class="line">        arrayList.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//remove：移除指定元素</span></span><br><span class="line">        <span class="comment">//删除第一个元素</span></span><br><span class="line">        arrayList.remove(<span class="number">0</span>);  <span class="comment">//arrayList.remove(&quot;jack&quot;);</span></span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//contains：查找元素是否存在</span></span><br><span class="line">        System.out.println(arrayList.contains(<span class="string">&quot;jack&quot;</span>) ? <span class="string">&quot;存在&quot;</span> : <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">        <span class="comment">//size：获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;长度 &quot;</span> + arrayList.size());</span><br><span class="line">        <span class="comment">//isEmpty：判断是否为空</span></span><br><span class="line">        System.out.println(arrayList.isEmpty() ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">        <span class="comment">//clear：清空</span></span><br><span class="line">        arrayList.clear();</span><br><span class="line">        <span class="comment">//addAll：添加多个元素 传入的是另一个List</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">addList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        addList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        addList.add(<span class="number">20</span>);</span><br><span class="line">        addList.add(<span class="literal">false</span>);</span><br><span class="line">        addList.add(<span class="number">1000</span>);</span><br><span class="line">        arrayList.addAll(addList);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//containsAll：查找多个元素是否存在</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">containList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        containList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        containList.add(<span class="number">20</span>);</span><br><span class="line">        System.out.println(arrayList.containsAll(containList));</span><br><span class="line">        <span class="comment">//removeAll：删除多个元素</span></span><br><span class="line">        arrayList.removeAll(containList);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ArrayList底层原理"><a href="#ArrayList底层原理" class="headerlink" title="ArrayList底层原理"></a><strong>ArrayList底层原理</strong></h5><p>ArrayList <strong>底层基于数组实现</strong>的<br><strong>①</strong>数组基本特点查询数据快（是根据索引查询数据）：查询数据通过地址值和索引定位 <strong>查询任意数据耗时相同</strong></p><p><strong>②</strong>删除效率低：可能<strong>需要把后面很多的数据进行前移</strong></p><p><strong>③</strong>添加效率极低：可能<strong>需要把后面很多数据后移</strong>，在添加数据；或者也<strong>可能需要进行数组扩容</strong></p><h5 id="创建ArrayList底层执行流程"><a href="#创建ArrayList底层执行流程" class="headerlink" title="创建ArrayList底层执行流程"></a>创建ArrayList底层执行流程</h5><p>①利用无参数构造器创建的集合 会在底层创建一个默认长度为0的数组<br>②添加第一个元素的时候 底层会创建一个新的长度为10的数组<br>③存满的时候 会扩容1.5倍<br>④如果一次添加多个元素 1.5倍还放不下 则新创建数组的长度以实际为准</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p><strong>有序 可重复 有索引</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//add:添加单个元素</span></span><br><span class="line">        linkedList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="number">10</span>);</span><br><span class="line">        linkedList.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">        <span class="comment">//remove：移除指定元素</span></span><br><span class="line">        <span class="comment">//删除第一个元素</span></span><br><span class="line">        linkedList.remove(<span class="number">0</span>);  <span class="comment">//arrayList.remove(&quot;jack&quot;);</span></span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">        <span class="comment">//contains：查找元素是否存在</span></span><br><span class="line">        System.out.println(linkedList.contains(<span class="string">&quot;jack&quot;</span>) ? <span class="string">&quot;存在&quot;</span> : <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">        <span class="comment">//size：获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;长度 &quot;</span> + linkedList.size());</span><br><span class="line">        <span class="comment">//isEmpty：判断是否为空</span></span><br><span class="line">        System.out.println(linkedList.isEmpty() ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">        <span class="comment">//clear：清空</span></span><br><span class="line">        linkedList.clear();</span><br><span class="line">        <span class="comment">//addAll：添加多个元素 传入的是另一个List</span></span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">addList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        addList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        addList.add(<span class="number">20</span>);</span><br><span class="line">        addList.add(<span class="literal">false</span>);</span><br><span class="line">        addList.add(<span class="number">1000</span>);</span><br><span class="line">        linkedList.addAll(addList);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">        <span class="comment">//containsAll：查找多个元素是否存在</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">containList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        containList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        containList.add(<span class="number">20</span>);</span><br><span class="line">        System.out.println(linkedList.containsAll(containList));</span><br><span class="line">        <span class="comment">//removeAll：删除多个元素</span></span><br><span class="line">        linkedList.removeAll(containList);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinkedList集合的底层原理"><a href="#LinkedList集合的底层原理" class="headerlink" title="LinkedList集合的底层原理"></a>LinkedList集合的底层原理</h5><p>LinkedList底层基于<strong>双向链表</strong>实现的<br>线程不安全没有实现同步<br>可以添加任何元素 可以重复 包括null</p><p><strong>什么是链表</strong><br>链表分为 单向链表 和 双向链表</p><p><strong>单向链表</strong><br>链表中的<strong>节点是独立的对象</strong> 在内存中是<strong>不连续的</strong> 每个节点<strong>包含了数据值和下一个节点的地址</strong><br><img src="/ZzzjhBlog/images/image-20240924170119841.png" alt="image-20240924170119841"></p><p><strong>单向链表特点</strong><br>①查询慢 无论查询哪个数据都要从头开始找<br>②增删相对数组比较快</p><p><strong>双向链表</strong></p><p>双向链表就是 链表中每个节点 <strong>不仅包含下一个节点的地址 还包含上一个节点的地址</strong></p><p><img src="/ZzzjhBlog/images/image-20240924170427498.png" alt="image-20240924170427498"></p><p><strong>双向链表特点</strong></p><p>①查询慢 增删相对较快 但是<strong>对首尾的元素进行增删改查的速度是极快的</strong><br>②LinkedList 新增了很多首位操作的特有方法</p><p><strong>应用场景</strong>：可以用来设计队列</p><p><strong>示例：</strong><br>模拟一个简单的双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟一个简单的双向链表</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a-&gt;b&gt;c</span></span><br><span class="line">        <span class="comment">// c-&gt;b-&gt;a</span></span><br><span class="line">        a.next = b;</span><br><span class="line">        b.next = c;</span><br><span class="line">        c.pre = b;</span><br><span class="line">        b.pre = a;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> a; <span class="comment">//a 就是链表头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> c; <span class="comment">//c 就是链表尾节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从头到尾遍历</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//b 和c 之间插入一个节点d</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="comment">//让b的下一个节点指向 d</span></span><br><span class="line">        b.next = d;</span><br><span class="line">        <span class="comment">//让d的下一个节点指向 c</span></span><br><span class="line">        d.next = c;</span><br><span class="line">        <span class="comment">//让c的上一个节点指向 d</span></span><br><span class="line">        c.pre = d;</span><br><span class="line">        <span class="comment">//再次遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        <span class="comment">//让头节点再次指向a</span></span><br><span class="line">        first = a;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Node类 Node对象代表链表中的一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object item; <span class="comment">//真正存放数据的地方</span></span><br><span class="line">    <span class="keyword">public</span> Node next; <span class="comment">//存放指向下一个节点</span></span><br><span class="line">    <span class="keyword">public</span> Node pre;<span class="comment">//存放指向上一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.item = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;Node name = &quot;</span> + item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ArrayList 和 LinkedList比较</strong></p><p><img src="/ZzzjhBlog/images/image-20241007161508869.png" alt="image-20241007161508869"></p><h4 id="Vecotr"><a href="#Vecotr" class="headerlink" title="Vecotr"></a>Vecotr</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>Vector类实现了一个动态数组，和ArrayList类似，两者不同的是Vector是线程安全的。</p><p><img src="/ZzzjhBlog/images/image-20250401150402005.png" alt="image-20250401150402005"></p><p>Vector 是<strong>矢量队列</strong>，它是JDK1.0版本添加的类。继承于AbstractList，实现了List, RandomAccess, Cloneable这些接口。 Vector 继承了AbstractList，实现了List；所以，<strong>它是一个队列，支持相关的添加、删除、修改、遍历等功能。</strong> Vector 实现了RandmoAccess接口，即提供了<strong>随机访问功能</strong>。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在Vector中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。 Vector 实现了Cloneable接口，即实现clone()函数。它能被克隆。</p><p>和ArrayList不同，<strong>Vector中的操作是线程安全的 Vector类的操作方法中带有synchronized关键字  某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性。</strong></p><p><img src="/ZzzjhBlog/images/image-20250401165311846.png" alt="image-20250401165311846"></p><p><img src="/ZzzjhBlog/images/image-20250401165410794.png" alt="image-20250401165410794"></p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>①无序（添加和取出的顺序不一致）没有索引<br>②不允许重复元素 所以最多包含一个null<br>③接口的实现 类有 <strong>HashSet</strong> 和 <strong>TreeSet</strong></p><h4 id="Set接口常用方法"><a href="#Set接口常用方法" class="headerlink" title="Set接口常用方法"></a>Set接口常用方法</h4><p>和List接口一样 Set接口也是Collection的子接口 因此 常用方法和Collection接口一样</p><h4 id="Set接口遍历方法"><a href="#Set接口遍历方法" class="headerlink" title="Set接口遍历方法"></a>Set接口遍历方法</h4><p>①迭代器<br>②增强for<br>③不能使用索引方式获取</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/7 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Set01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//不能存放重复的顺序</span></span><br><span class="line">        <span class="comment">//set 存放数据是无序的（添加的顺序和取出的顺序不一致）</span></span><br><span class="line">        <span class="comment">//注意：取出的顺序虽然不是添加的顺序 但是它是固定 就是取出时候顺序是怎么样就是怎么样 不会随着再次取出而改变</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;oto&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;michael&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        <span class="comment">//添加重复的只会存放一个</span></span><br><span class="line">        set.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        set.add(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//增强for</span></span><br><span class="line">        <span class="keyword">for</span> (Object object : set) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移除</span></span><br><span class="line">        set.remove(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>①实现了Set接口<br>②HashSet<strong>实际上是HashMap</strong><br><strong>有图有真相</strong></p><p><img src="/ZzzjhBlog/images/image-20241007163851960.png" alt="image-20241007163851960"></p><p>③存放null值 但是只能由有一个null<br>④HashSet不保证元素是有序的 取决于hash后 在确定索引的结果<br>⑤<strong>不能有重复的元素&#x2F;对象</strong><br>⑥<strong>添加已存在的元素时，HashSet 不会改变</strong></p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/7 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Set01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;rose&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;rose&quot;</span>));</span><br><span class="line">        <span class="comment">//问set有几个元素</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * set.add(&quot;jack&quot;); 添加成功</span></span><br><span class="line"><span class="comment">         * set.add(&quot;jack&quot;); 添加失败</span></span><br><span class="line"><span class="comment">         * set.add(new Dog(&quot;rose&quot;)); 添加成功</span></span><br><span class="line"><span class="comment">         * set.add(new Dog(&quot;rose&quot;)); 添加成功   因为它们是两个不同的对象实例（除非Dog类重写了hashCode()和equals()方法）。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;zjh&quot;</span>)); <span class="comment">//会被添加</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;zjh&quot;</span>)); <span class="comment">//不会被添加</span></span><br><span class="line"><span class="comment">//看分析：</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>首先，当执行new String(“zjh”)时，Java会执行以下步骤：</p><p><strong>在字符串常量池中查找是否存在</strong>字符串字面量”zjh”。</p><p>如果存在，就使用它作为构造新String对象的基础。</p><p>如果不存在，就将它添加到常量池中，然后使用新添加的字符串字面量。</p><p><strong>使用找到的或新添加的字符串字面量（在常量池中）的引用作为内部状态</strong>，来创建一个新的String对象实例。这个新对象是在堆上分配的，它有一个指向常量池中字符串字面量的内部引用（这个引用是String对象的一部分，但String对象本身和常量池中的字符串字面量是两个不同的对象）。</p><p>接下来，<strong>关于HashSet如何判断两个元素是否相等</strong>：</p><p>HashSet在添加元素时，<strong>首先会调用该元素的hashCode()方法</strong>。<strong>如果两个元素的哈希码相同</strong>（这<strong>并不意味着它们一定相等</strong>，<strong>只是有可能相等</strong>），HashSet会<strong>进一步调用它们的equals()方法来确定它们是否真正相等</strong>。</p><p>对于<strong>String类</strong>：<br>hashCode()方法是<strong>根据字符串的内容</strong>（即字符的Unicode值序列）计算出来的。因此，如果<strong>两个String对象的内容相同</strong>，它们的<strong>哈希码也一定相同</strong>。</p><p>equals()方法是<strong>比较两个字符串的内容是否完全相同</strong>。如果<strong>两个String对象的内容相同</strong>（即字符序列和字符的Unicode值都相同），则<strong>equals()方法返回true</strong>。</p><p>因此，当向HashSet中添加两个通过new String(“zjh”)创建的String对象时：</p><p>尽管这两<strong>个String对象是不同的实例</strong>（它们在<strong>堆上有不同的内存地址</strong>），</p><p>但由<strong>于它们的内容相同</strong>，所以它们的<strong>哈希码也相同</strong>，</p><p>并且<strong>equals()方法返回true</strong>，表示它们<strong>逻辑上是相等的</strong>。</p><p>因此，<strong>从HashSet的角度来看</strong>，<strong>这两个对象是相等的</strong>（即它们被<strong>视为同一个元素的两个不同实例</strong>），并且HashSet<strong>只会存储其中一个对象</strong>（<strong>实际上，是存储了那个对象的引用</strong>，但由于它们内容相同，所以哪个引用被存储并不重要）。</p><p><strong>总结：尽管使用了两次new String(“zjh”)来创建看似不同的String对象实例，并且它们在堆上有不同的内存地址，但由于String类的hashCode()和equals()方法的实现，以及字符串常量池的机制，HashSet实际上只会将这两个对象视为同一个元素，并只存储其中一个的引用。</strong></p><h5 id="HahSet底层机制"><a href="#HahSet底层机制" class="headerlink" title="HahSet底层机制"></a>HahSet底层机制</h5><p><strong>HashSet底层就是HashMap HashMap底层是（数组+链表+红黑树）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetStructure</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟一个HashSet的底层（HashMao的底层结构）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、创建一个数组 数组的类型是 Node【】 长度16</span></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;table&quot;</span> + table);</span><br><span class="line">        <span class="comment">//2、创建节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;john&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">2</span>] = john;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        john.next = jack; <span class="comment">//形成链表 将jack挂载到john</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;rose&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        jack.next = rose; <span class="comment">//将rose挂载到jack</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">3</span>] = lucy;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Node类 Node对象代表链表中的一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">//结点，存放数据 可以指向下一个节点 形成链表</span></span><br><span class="line">    <span class="keyword">public</span> Object item; <span class="comment">//存放数据</span></span><br><span class="line">    <span class="keyword">public</span> Node next; <span class="comment">//存放下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name,Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = name;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node name = &quot;</span> + item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/ZzzjhBlog/images/image-20241007201916519.png" alt="image-20241007201916519"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解(Annotation)</title>
      <link href="/ZzzjhBlog/2025/04/01/%E6%B3%A8%E8%A7%A3-Annotation/"/>
      <url>/ZzzjhBlog/2025/04/01/%E6%B3%A8%E8%A7%A3-Annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="注解（Annotation）"><a href="#注解（Annotation）" class="headerlink" title="注解（Annotation）"></a>注解（Annotation）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>注解就是Java代码里面的特殊标记 比如：@Override、@Test等</p><p>作用是：让其他程序根据注解的信息决定怎么执行该程序</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>注解可以用在类上、构造器、方法上、成员变量上、参数上等位置处。</p><h2 id="java内置注解"><a href="#java内置注解" class="headerlink" title="java内置注解"></a>java内置注解</h2><p>@Override：定义在java.land.Overide中，此只适用于修饰方法，表明一个方法声明打算重写超类中的另一个方法声明</p><p>@Deprecated ：定义在java.land.Deprecated中，此注释可以用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择</p><p>@SuppressWarnings：定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。与前两个注释有所不同，你需要添加一个参数才能正确的使用，这些参数都是已经定义好的<br>@SuppressWarnings(“all”)、@SuppressWarnings(“unchecked”)、@@SuppressWarnings(value&#x3D;{“unchecked”,“deprecation”})</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    <span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    String[] c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(a = &quot;牛魔王&quot;,b = true,c = &#123;&quot;HTML&quot;,&quot;Java&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(a = &quot;铁扇公主&quot;,b = false,c = &#123;&quot;Python&quot;,&quot;Web&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊属性名：value</strong><br>如果注解中只有一个value属性，使用注解时，value名称可以不写!!<br><strong>演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@MyAnnotation2(value = &quot;孙悟空&quot;) value 是特殊属性 value = 可以不写直接赋值</span></span><br><span class="line"><span class="meta">@MyAnnotation2(&quot;孙悟空&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest02</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意如果这个注解中包含除了value（属性名必须是value） 外还有多个属性 那么就不能省略</strong></p><h2 id="注解的原理"><a href="#注解的原理" class="headerlink" title="注解的原理"></a>注解的原理</h2><p>将   .class 文件反编译之后可以得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyAnnotation</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.annotation.Annotation &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.String <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.String[] c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是反编译后得到的源代码<br>我们可以看到 <strong>它本质是一个接口 继承了Annotation这个接口，里面的属性其实都是抽象方法的形式</strong>。</p><p>那么我们使用注解的时候<br><img src="/ZzzjhBlog/images/image-20240912000848301.png" alt="image-20240912000848301"></p><p>本质上这个就是注解的实现类对象，然后分装这些属性信息。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>指的是 修饰注解的注解</strong></p><p><strong>示例</strong><br><img src="/ZzzjhBlog/images/image-20240912001342888.png" alt="image-20240912001342888"></p><p><strong>@Target</strong></p><p><strong>作用：声明被修饰的注解只能在哪些位置使用</strong><br><img src="/ZzzjhBlog/images/image-20240912001555573.png" alt="image-20240912001555573"><br>1.TYPE   类、接口<br>2.FIELD 成员变量<br>3.METHOD 成员方法<br>4.PARAMETER 方法参数<br>5.CONSTRUCTOR 构造器<br>6.LOCAL_VARIABLE 局部变量<br>可以多选比如<br><img src="/ZzzjhBlog/images/image-20240912001929416.png" alt="image-20240912001929416"></p><p>如果修饰在 没被声明的位置使用就会报错</p><p><strong>@Retention</strong></p><p><strong>作用：声明注解的保留周期</strong><br>1.SOURCE<br><strong>只作用在源码阶段</strong>，字节码文件中不存在</p><p>2.CLASS  (默认值)<br><strong>保留到字节码文件阶段</strong>，运行阶段不存在 </p><p>3.RUNTIME(开发常用)<br>一直保留到运行阶段 当运行Java程序的时候 JVM会保留注释。程序可以通过反射获取 该注释</p><p><strong>@Document</strong><br>指定该注解是否会在javadoc 体现</p><p><strong>@Inherited</strong><br>子类会继承父类注解</p><h2 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h2><p><strong>什么是注解的解析</strong></p><p>就是判断类上、方法上、成员变量上是否存在注解，并把注解里的内容给解析出来</p><p><strong>如何解析注解</strong><br>思想：要解析谁，就应该先拿到谁的对象<br><strong>·</strong>   比如要解析类上面的注解<strong>先获取该类的Class对象</strong>，<strong>再通过Class对象解析其上面的注解</strong>。</p><p><strong>·</strong>  比如要解析成员方法上面的注解，则应该<strong>获取到成员方法的Method对象</strong>，<strong>再通过Method对象解析其上面的注解</strong></p><p><strong>Class、Method、Field、Constructor都实现了AnnotationElement接口它们都拥有解析其注解的能力</strong><br><img src="/ZzzjhBlog/images/image-20240912004305378.png" alt="image-20240912004305378"></p><p><strong>案例</strong></p><p><strong>需求</strong>：<br>① 定义注解MyAnnotation<br> <strong>·</strong>  包含属性：String value()<br> <strong>·</strong>  包含属性：double a()，默认值为100<br> <strong>·</strong>  包含属性：String[] b()<br> <strong>·</strong>  限制注解使用位置：类和方法上<br> <strong>·</strong>  指定注解有效范围：一直到运行时<br>② 定义一个类：叫Demo，在类中定义一个test1()方法，并在该类和方法上使用MyAnnotation注解<br>③ 定义AnnotationTest测试类 解析Demo类中的全部注解</p><p>代码：<br>第一步：定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">a</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line">    String[] b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步：定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;AA&quot;, a = 99.5, b = &#123;&quot;Java&quot;, &quot;Python&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(value = &quot;BB&quot;, a = 199.9, b = &#123;&quot;Go&quot;, &quot;Rust&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步：解析类注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到Class对象</span></span><br><span class="line">        Class&lt;Demo&gt; demoClass = Demo.class;</span><br><span class="line">        <span class="comment">//2.解析类上面的注解</span></span><br><span class="line">        <span class="comment">//判断类上面有没有包含 MyAnnotation注解</span></span><br><span class="line">        <span class="keyword">if</span> (demoClass.isAnnotationPresent(MyAnnotation.class))&#123;</span><br><span class="line">            <span class="comment">//获取注解</span></span><br><span class="line">            <span class="type">MyAnnotation</span> <span class="variable">myAnnotation</span> <span class="operator">=</span> demoClass.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class="line">            <span class="comment">//拿到注解后可以获取注解中的内容</span></span><br><span class="line">            System.out.println(myAnnotation.value());</span><br><span class="line">            System.out.println(myAnnotation.a());</span><br><span class="line">            System.out.println(Arrays.toString(myAnnotation.b()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第四步：解析方法上面的注解 （和解析类上的注解差不多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.先得到Class对象</span></span><br><span class="line">        Class&lt;Demo&gt; demoClass = Demo.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获得要解析的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">test1</span> <span class="operator">=</span> demoClass.getDeclaredMethod(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="comment">//3.解析方法上面的注解</span></span><br><span class="line">        <span class="comment">//判断方法上面有没有包含 MyAnnotation注解</span></span><br><span class="line">        <span class="keyword">if</span> (test1.isAnnotationPresent(MyAnnotation.class))&#123;</span><br><span class="line">            <span class="comment">//获取注解</span></span><br><span class="line">            <span class="type">MyAnnotation</span> <span class="variable">myAnnotation</span> <span class="operator">=</span> test1.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class="line">            <span class="comment">//拿到注解后可以获取注解中的内容</span></span><br><span class="line">            System.out.println(myAnnotation.value());</span><br><span class="line">            System.out.println(myAnnotation.a());</span><br><span class="line">            System.out.println(Arrays.toString(myAnnotation.b()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析出结果：<br>类上的</p><p><img src="/ZzzjhBlog/images/image-20240912010126461.png" alt="image-20240912010126461"><br>方法上的<br><img src="/ZzzjhBlog/images/image-20240912010531980.png" alt="image-20240912010531980"><br>和我们当初 定义的内容一样解析成功</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>注解一般是结合反射技术 做框架用的比如junit框架</p><p><strong>案例：</strong><br><strong>简易版Junit框架</strong><br>需求：定义诺干个方法，只要加了MyTest注解，就会触发该方法执行</p><p>分析：<br>①：定义一个自定义注解MyTest 只能注解方法 存活范围一直都在 因为到运行阶段 只有注解还在我们才知道运行哪些方法<br>②：定义诺干个方法 部分方法加上@MyTest注解，部分不加<br>③模拟一个junit程序 可以触发@MyTest注解的方法执行</p><p>代码<br>第一步：创建@MyTest注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二：模拟一个junit程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJunit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//为后面invoke()方法调用创造对象</span></span><br><span class="line">        <span class="type">MyJunit</span> <span class="variable">myJunit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyJunit</span>();</span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        Class&lt;MyJunit&gt; myJunitClass = MyJunit.class;</span><br><span class="line">        <span class="comment">//拿到该类所有方法</span></span><br><span class="line">        Method[] declaredMethods = myJunitClass.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//遍历方法数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line">            <span class="comment">//判断该方法是否有加 @MyTest 注解 有的话运行没有就不运行</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyTest.class))&#123;</span><br><span class="line">                method.invoke(myJunit); <span class="comment">//invoke() 方法调用是要传对象 和参数的 这里我们测试方法无参 无返回值 所以只要 传对象就好了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/ZzzjhBlog/images/image-20240912021052284.png" alt="image-20240912020927203"></p><p> <strong>结果分析：</strong><br>代码中 只有test1() 和test3() 加了 @MyTest注解 并且输出正确</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/ZzzjhBlog/2025/04/01/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/ZzzjhBlog/2025/04/01/%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p><strong>描述</strong>：<br>没有方法名，没有返回值，只有方法体，不需要通过对象或类显示调用，而是加载类的时候，或创建对象时候隐式调用</p><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">    代码</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>（1）修饰符可选，要写的话也只能写static。<br>（2）代码块分为两种 使用static修饰的叫静态代码块，没有static修饰的叫普通代码块。<br>（3）逻辑语句可以写任何逻辑语句（输入、输出、方法调用、循环、判断）等等。<br>（4）；号可以写上 也可以省略。</p><p><strong>细节</strong>：</p><p>（1）static代码块也叫静态代码块，作用是对类进行初始化，而且它随着<strong>类的加载而执行</strong>，<strong>并且只会执行一次</strong>。如果是<strong>普通代码块</strong>，<strong>每创建一个对象就执行</strong></p><p><strong>静态代码块在类加载过程中只执行一次，也就是说它在整个应用程序生命周期中只执行一次。无论创建多少个类的实例，静态代码块只会在类加载时执行一次。</strong></p><p>（2）<strong>类什么时候被加载：</strong><br><strong>①创建对象实例时候（new）</strong><br><strong>②创建子类对象实例，父类也会被加载</strong><br><strong>③使用类的静态成员时（静态属性、静态方法）</strong></p><p>（3）<strong>普通代码块</strong>，在创建对象实例的时候，会被隐式的调用，<strong>创建一次对象，就调用一次</strong>。如果只是<strong>使用类的静态成员</strong>，普通代码块并<strong>不会执行</strong>。</p><p>（4）创建对象时，在<strong>一个类</strong>的调用顺序：<br>①调用<strong>静态代码块</strong>和<strong>静态属性初始化</strong>（它们两个<strong>优先级一样</strong>，如果有多个静态代码块和多个静态变量初始化，则<strong>按照定义的顺序执行</strong>）。<br>②调用<strong>普通代码块</strong>和<strong>普通属性</strong>的初始化（它们两个优先级一样，如果有多个普通代码块和普通属性，则按照定义顺序执行）<br>③调用构造方法</p><p>（5）如果在创建对象时候，这个对象是<strong>某个对象的子类的话</strong>那么执行顺序如下：<br><strong>先执行父类静态代码块&#x2F;父类静态变量初始化  –&gt; 子类静态代码块&#x2F;子类静态变量初始化 –&gt; 父类普通代码块 –&gt;</strong><br><strong>父类构造方法 –&gt; 子类普通代码块 –&gt; 子类构造方法</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的静态代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;A的普通代码块被执行&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参数被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的静态代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的普通代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的无参数构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（6）静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以任意调用成员</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>下面代码会输出什么结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    Sample(String s) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Sample() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sample默认构造函数被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">Sample</span> <span class="variable">sam1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;sam1成员初始化&quot;</span>); <span class="comment">// 成员变量初始化</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Sample</span> <span class="variable">sam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;静态成员sam初始化&quot;</span>); <span class="comment">// 静态成员初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static块执行&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sam == <span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;sam is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test() &#123; <span class="comment">// 构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Test默认构造函数被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] str)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(); <span class="comment">// 无参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态成员sam初始化</span><br><span class="line"><span class="keyword">static</span>块执行</span><br><span class="line">sam1成员初始化</span><br><span class="line">Test默认构造函数被调用</span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><h3 id="执行顺序分析"><a href="#执行顺序分析" class="headerlink" title="执行顺序分析"></a>执行顺序分析</h3><ol><li><p><strong>静态成员初始化</strong>：</p><ul><li>Java 在加载类时，首先执行静态成员和静态块。</li><li>静态成员 <code>sam</code> 初始化：<code>new Sample(&quot;静态成员sam初始化&quot;)</code>，会调用 <code>Sample</code> 类的构造函数并输出 <code>&quot;静态成员sam初始化&quot;</code>。</li></ul></li><li><p><strong>静态块</strong>：</p><ul><li>紧接着，静态块被执行。输出 <code>&quot;static块执行&quot;</code>。</li><li>静态块中有一个检查 <code>if (sam == null)</code>，但此时 <code>sam</code> 已经初始化，所以不会输出 <code>&quot;sam is null&quot;</code>。</li></ul></li><li><p><strong>实例成员初始化</strong>：</p><ul><li>当执行 <code>new Test()</code> 时，开始实例化对象，这时首先初始化实例成员。</li><li>实例成员 <code>sam1</code> 初始化：<code>new Sample(&quot;sam1成员初始化&quot;)</code>，会调用 <code>Sample</code> 类的构造函数并输出 <code>&quot;sam1成员初始化&quot;</code>。</li></ul></li><li><p><strong>构造函数</strong>：</p><ul><li>最后，执行 <code>Test</code> 类的构造函数，输出 <code>&quot;Test默认构造函数被调用&quot;</code>。</li></ul></li></ol><h3 id="总结：程序输出顺序"><a href="#总结：程序输出顺序" class="headerlink" title="总结：程序输出顺序"></a>总结：程序输出顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态成员sam初始化</span><br><span class="line"><span class="keyword">static</span>块执行</span><br><span class="line">sam1成员初始化</span><br><span class="line">Test默认构造函数被调用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/ZzzjhBlog/2025/04/01/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/ZzzjhBlog/2025/04/01/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="代理-Proxy"><a href="#代理-Proxy" class="headerlink" title="代理 Proxy"></a>代理 Proxy</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理在编译时就确定了代理类和目标类的关系。代理类通常实现与目标类相同的接口，并在其方法中调用目标类的方法。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>编译时确定</strong>：代理类在编译时就已经存在。</li><li><strong>代码重复</strong>：每个代理类都需要手动编写，容易导致代码</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是在运行时创建代理类，通常使用 Java 的反射机制。Java 提供了 <code>Proxy</code> 类来实现动态代理。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>运行时确定</strong>：代理类在运行时生成，灵活性更高。</li><li><strong>减少代码重复</strong>：可以通过一个代理类来代理多个目标类。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>静态代理</strong>适合于代理关系明确且不变的场景，但可能导致代码冗余。</li><li><strong>动态代理</strong>则提供了更大的灵活性，适用于需要代理多个类的情况。</li></ul><h2 id="为什么需要代理？"><a href="#为什么需要代理？" class="headerlink" title="为什么需要代理？"></a>为什么需要代理？</h2><p>代理是一种设计模式,它可以为对象提供一个替身或占位符,以控制对这个对象的访问。使用代理的主要目的有:</p><ul><li>远程访问:客户端通过代理访问远程服务,隐藏了服务的具体实现细节。</li><li>安全控制:代理可以在访问真实对象之前进行权限检查,控制对象的访问。</li><li>延迟加载:代理可以延迟创建真实对象,优化资源的使用。</li><li>增强功能:代理可以在调用真实对象的方法前后添加额外的逻辑,如日志记录、缓存等。</li></ul><h2 id="代理长什么样子？"><a href="#代理长什么样子？" class="headerlink" title="代理长什么样子？"></a>代理长什么样子？</h2><ul><li>**静态代理:**程序员手动创建代理类,实现与真实对象相同的接口。代理类包含了真实对象的引用,并且可以在调用方法时添加额外逻辑。</li><li>**动态代理:**JDK提供了动态代理机制,可以在运行时动态生成代理类。动态代理通过反射机制实现,可以更加灵活地控制方法的调用。</li></ul><h2 id="Java如何保证代理的样子"><a href="#Java如何保证代理的样子" class="headerlink" title="Java如何保证代理的样子?"></a>Java如何保证代理的样子?</h2><p> Java使用接口来定义代理需要实现的方法签名,保证了代理和真实对象之间的一致性。同时,Java还提供了抽象类,可以在抽象类中实现一些公共的代理逻辑,供子类继承和扩展。</p><h2 id="下面举个例子来讲解动态代理"><a href="#下面举个例子来讲解动态代理" class="headerlink" title="下面举个例子来讲解动态代理"></a>下面举个例子来讲解动态代理</h2><p>这边举一个明星唱歌 跳舞的例子 然后代理做 收钱 准备场地的事情</p><p>定义明星类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStart</span> <span class="keyword">implements</span> <span class="title class_">Start</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStart</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String songName)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在唱&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;演唱完毕&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义代理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Start</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sing</span><span class="params">(String songName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建代理工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Start <span class="title function_">createProxy</span><span class="params">(BigStart bigStart)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                InvocationHandler h)</span></span><br><span class="line"><span class="comment">                参数一：ClassLoader 用于指定一个类加载器 一般用当前类 比如当前类为 ProxyUtil.class.getClassLoader()</span></span><br><span class="line"><span class="comment">                参数二：指定生成的代理长什么样 有哪些方法 （就是接口类对象的数组）</span></span><br><span class="line"><span class="comment">                参数三：用来指定生成的代理要干什么事情 （InvocationHandler 是一个接口 所以我们这边创建的是一个InvocationHandler的匿名内部类对象来指定干什么事情）</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        <span class="type">Start</span> <span class="variable">start</span> <span class="operator">=</span>  (Start) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Start.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 比如invoke方法写好之后</span></span><br><span class="line"><span class="comment">            * 程序中 Start startProxy = ProxyUtil.createProxy(s);</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * 调用sing方法   或者dance方法</span></span><br><span class="line"><span class="comment">            * startProxy.sing(&quot;好运来&quot;); startProxy.dance();</span></span><br><span class="line"><span class="comment">            * 此时 sing 和 dance方法 会调用invoke方法来进行回调</span></span><br><span class="line"><span class="comment">            * invoke方法的三个参数</span></span><br><span class="line"><span class="comment">            * Object proxy ： 当前调用方法的 代理对象 startProxy</span></span><br><span class="line"><span class="comment">            * Method method ： 把当前调用的方法 传进来 比如 sing方法 或者dance方法</span></span><br><span class="line"><span class="comment">            *  Object[] args ： 这个就是 调用方法 sing 或者 dance 的参数列表 像 startProxy.sing(&quot;好日子&quot;) 就会把 &quot;好日子&quot;当作参数传进来</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//invoke就是一个回调方法  代理做什么事情由invoke决定</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">//代理要做什么事情 在这里写</span></span><br><span class="line">                <span class="comment">//判断当前 代理调用的方法是不是 sing 如果是的话 执行对应逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;sing&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;准备话筒&quot;</span>);</span><br><span class="line">                    <span class="comment">//将方法结果返回</span></span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bigStart,args);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;dance&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;准备场地 跳舞&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bigStart,args);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果不是 sing 或者 dance 则不需要代理  那么直接让 bigStart执行就好 使用方法的回调 传入实现类对象和参数即可</span></span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bigStart,args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//可以把优化代码 把return method.invoke(bigStart,args); 提出来</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建明星对象</span></span><br><span class="line">        <span class="type">BigStart</span> <span class="variable">jay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigStart</span>(<span class="string">&quot;周杰伦&quot;</span>);</span><br><span class="line">        <span class="type">Start</span> <span class="variable">startProxy</span> <span class="operator">=</span> ProxyUtil.createProxy(jay);</span><br><span class="line">        System.out.println(startProxy.sing(<span class="string">&quot;稻香&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        startProxy.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/ZzzjhBlog/images/image-20241227035150796.png" alt="image-20241227035150796"></p><h2 id="Java提供了什么API帮我们创建代理"><a href="#Java提供了什么API帮我们创建代理" class="headerlink" title="Java提供了什么API帮我们创建代理"></a>Java提供了什么API帮我们创建代理</h2><p>Java 提供了动态代理(Dynamic Proxy)来帮我们创建代理对象。动态代理允许我们在运行时动态生成代理类,从而实现对目标对象的代理和拦截。</p><h2 id="newProxyInstance方法在创建代理的时候-需要接收几个参数-每个参数的含义是什么？"><a href="#newProxyInstance方法在创建代理的时候-需要接收几个参数-每个参数的含义是什么？" class="headerlink" title="newProxyInstance方法在创建代理的时候 需要接收几个参数 每个参数的含义是什么？"></a>newProxyInstance方法在创建代理的时候 需要接收几个参数 每个参数的含义是什么？</h2><p>newProxyInstance() 方法用于创建动态代理对象。它需要3个参数:</p><ul><li><strong>ClassLoader:</strong> 用于加载代理类的类加载器</li><li><strong>Class&lt;?&gt;[]:</strong> 被代理对象实现的接口列表</li><li><strong>InvocationHandler:</strong> 代理对象的调用处理器,用于实现对目标方法的拦截和自定义逻辑</li></ul><p>这3个参数共同决定了动态代理对象的行为。</p><p><strong>当通过代理对象调用方法时,实际上是在调用 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法。这个方法接收3个参数:</strong></p><ul><li><strong><code>proxy</code>: 代理对象自身</strong></li><li><strong><code>method</code>: 被调用的方法对象</strong></li><li><strong><code>args</code>: 方法的参数列表</strong></li></ul><h2 id="通过-InvocationHandler-的-invoke-方法指定代理干的事时-这个-invoke-会被谁调用-要接哪几个参数"><a href="#通过-InvocationHandler-的-invoke-方法指定代理干的事时-这个-invoke-会被谁调用-要接哪几个参数" class="headerlink" title="通过 InvocationHandler 的 invoke() 方法指定代理干的事时,这个 invoke() 会被谁调用?要接哪几个参数?"></a>通过 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法指定代理干的事时,这个 <code>invoke()</code> 会被谁调用?要接哪几个参数?</h2><p>在 <code>invoke()</code> 方法中,我们可以对目标方法进行拦截、增强或者自定义逻辑的处理。</p><p>总之,Java 动态代理提供了一种灵活的方式来创建代理对象,并对目标对象的方法调用进行拦截和自定义处理。这在<strong>实现 AOP、RPC、缓存等功能时非常有用</strong>。</p><h2 id="动态代理的应用场景和好处"><a href="#动态代理的应用场景和好处" class="headerlink" title="动态代理的应用场景和好处"></a>动态代理的应用场景和好处</h2><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>场景某个系统有一个用户管理类 包含用户登录、删除用户、查询用户等功能、系统要求统计每个功能的执行耗时情况 以便后期观察程序性能</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>现在 某个初级程序员已经开发好了该模块 请观察该模块代码 找出目前存在的问题 并对其进行改造</p><p><strong>问题代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用户业务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 登录功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName,String passWord)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 查询用户，返回数组的形式。</span></span><br><span class="line">    String[] selectUsers() <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户业务实现类（面向接口编程）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName, String passWord)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//业务逻辑。。。。。。</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;成功删除了1万个用户~&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectUsers() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;查询出了3个用户&quot;</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张全蛋&quot;</span>, <span class="string">&quot;李二狗&quot;</span>, <span class="string">&quot;牛爱花&quot;</span>&#125;;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问题：</strong><br>每个方法都要写一遍 记录运行事件 重复了 并且和业务无关</p><p>解决方法：<br>使用代理解决</p><p>方法：<br>定义一个代理工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 UserService 的动态代理实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userService 原始的 UserService 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UserService 的代理实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title function_">createProxy</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Proxy.newProxyInstance 创建代理实例</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userServiceProxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">            ProxyUtil.class.getClassLoader(), <span class="comment">// 类加载器</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;UserService.class&#125;,    <span class="comment">// 代理实现的接口</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;           <span class="comment">// InvocationHandler 实现</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    Object rs; <span class="comment">// 用于存储方法返回值</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 判断是否为需要记录运行时间的方法</span></span><br><span class="line">                    <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;login&quot;</span>) || </span><br><span class="line">                        method.getName().equals(<span class="string">&quot;deleteUsers&quot;</span>) || </span><br><span class="line">                        method.getName().equals(<span class="string">&quot;selectUsers&quot;</span>)) &#123;</span><br><span class="line">                        </span><br><span class="line">                        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 记录开始时间</span></span><br><span class="line">                        rs = method.invoke(userService, args); <span class="comment">// 调用原始方法</span></span><br><span class="line">                        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();   <span class="comment">// 记录结束时间</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 输出方法执行时间</span></span><br><span class="line">                        System.out.println(method.getName() + <span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000.0</span> + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> rs; <span class="comment">// 返回方法结果</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 对于其他方法，直接调用并返回结果</span></span><br><span class="line">                        rs = method.invoke(userService, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> rs; <span class="comment">// 返回结果</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> userServiceProxy; <span class="comment">// 返回代理实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后把之前UserServiceImpl中的记录运行时间代码去掉即可<br><strong>运行结果：</strong></p><p><img src="/ZzzjhBlog/images/image-20241229222514231.png" alt="image-20241229222514231"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/ZzzjhBlog/2025/04/01/IO%E6%B5%81/"/>
      <url>/ZzzjhBlog/2025/04/01/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>I指的是Input，称为输入流：负责把数据读到内存中去<br>O指的是Output,称为输出流：负责把写数据出去</p><p><img src="/ZzzjhBlog/images/image-20241108002401395.png" alt="image-20241108002401395"></p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p><strong>构造方法</strong></p><p><img src="/ZzzjhBlog/images/image-20241008222354419.png" alt="image-20241008222354419"></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/8 22:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1、创建文件字节输入流管道 与源文件相通</span></span><br><span class="line">        <span class="comment">//FileInputStream fis = new FileInputStream(new File(&quot;文件路径&quot;))</span></span><br><span class="line">        <span class="comment">//简化写法</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//开始读取文件的字节数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> fis.read(); <span class="comment">//每次读取一个数据 如果没有数据了 返回 -1</span></span><br><span class="line">        System.out.println((<span class="type">char</span>) b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始读取文件中的字节数据 每次读取多个字节</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(data)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读取性能差</span></span><br><span class="line">        <span class="comment">//读取汉字会乱码</span></span><br><span class="line">        <span class="comment">//流使用完之后必须关闭</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/9 1:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//方法①</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次性读取完文件所有字节</span></span><br><span class="line">        <span class="comment">//创建字节输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//需要创建一个和文件字节数目大小一样的 数组</span></span><br><span class="line">        <span class="comment">//获取文件长度</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> file.length();</span><br><span class="line">        <span class="comment">//创建字节数组  </span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) length];</span><br><span class="line">        fileInputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法②</span></span><br><span class="line">        <span class="comment">//只用readAllBytes方法直接将当前输入流对应的文件对象的字节数据装到一个字节数组返回</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = fileInputStream1.readAllBytes();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        fileInputStream1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>弊端</strong><br>如果文件过大创建的字节数组也会过大 可能引起内存溢出</p><p>**读写文本更适合 字符流 **<br><strong>字节流适合做数据转移 如：文件复制等</strong></p><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p>作用：以内存为基础 把内存中的数据以字节的形式写到文件中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/9 1:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建字节输出流管道与目标文件接通</span></span><br><span class="line">        <span class="comment">//覆盖管道：覆盖之前的数据</span></span><br><span class="line"><span class="comment">//        FileOutputStream fileOutputStream = new FileOutputStream(&quot;E:\\chuanyi\\Test\\src\\IO\\out&quot;);</span></span><br><span class="line">        <span class="comment">//追加数据的管道不会覆盖</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\chuanyi\\Test\\src\\IO\\out&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        fileOutputStream.write(<span class="number">97</span>); <span class="comment">//97代表一个字节 代表a</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// &#x27;b&#x27; 代表一个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;豪&#x27;</span>); <span class="comment">//汉字占三个字节 [xxx] 默认只会写出一个字节 所以会乱码</span></span><br><span class="line">        <span class="comment">//每次写多个字节</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;HelloWorld你好世界&quot;</span>.getBytes();</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        <span class="comment">//指定写出范围</span></span><br><span class="line">        <span class="comment">//以bytes中内容 从索引0开始 长度为2</span></span><br><span class="line">        fileOutputStream.write(bytes,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/9 1:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建字节输入流与原文件接通</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Pictures\\Saved Pictures\\4.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流与目标的文件接通</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\chuanyi\\chaunyi1008\\src\\copy.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">//1KB</span></span><br><span class="line">        <span class="comment">//从字节输入流中读取数据 写到字节输出流中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len; <span class="comment">//记住每次读取多少个字节</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流 先关后创建的流 再关先创建的流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>任何文件的底层都是字节，字节流做复制，只是一字不漏的转移完全部字节，只要复制后的文件格式一致就没有问题</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>UTF-8编码常用中文字符占3字节、不常用中文字符占4个字节</p><p>GBK编码中字符占两个字节</p><p>释放资源</p><p> <strong>释放资源的方式</strong></p><p>①<strong>try-catch-finally</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            System.out.println(10 / 0);            </span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>);</span><br><span class="line"><span class="comment">//            System.out.println(10 / 0);</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fileOutputStream.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//可能出现 空指针 以及 已经关闭的异常 所以还要判断 是否为空 和捕获已经关闭的异常</span></span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk7新增方式<br><strong>②try-with-resource</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">try</span>(<span class="comment">//定义资源1;定义资源2;....)&#123;</span></span><br><span class="line">        <span class="comment">//可能出现异常的代码</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="comment">//异常类名 变量名)&#123;</span></span><br><span class="line">        <span class="comment">//异常处理代码</span></span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例：        </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//定义资源  （！！！ 注意这里只能放置资源对象 资源就是实现了AutoCloseable 接口）</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">//可能会出现异常的代码</span></span><br><span class="line">            System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fileOutputStream.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//异常信息打印</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><p><strong>这个方法 不用手动关闭 它会自动给你关闭资源 执行完会自动调用 AutoCloseable 接口的 close方法</strong></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>适合读写文本文件内容</p><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><p><strong>Reader接口</strong> 以及 <strong>BufferReader实现类</strong></p><p><img src="/ZzzjhBlog/images/image-20241108095551000.png" alt="image-20241108095551000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = fileReader.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符输入流会把文件中的每一个英文字母和汉字 当作一个字符所以不会乱码 （<strong>前提文件字符编码 和代码的字符编码一样</strong>）</p><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p><strong>Writer接口</strong> 以及 <strong>FileWriter实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建一个文件字符输出流和与目标文件接通</span></span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">//写出一个字符</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            fileWriter.write(<span class="number">97</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&#x27;豪&#x27;</span>);</span><br><span class="line">            <span class="comment">//写出一个字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;你好 世界 我爱你&quot;</span>);</span><br><span class="line">            <span class="comment">//只写出一部分 比如 世界 我爱你</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;你好 世界 我爱你&quot;</span>,<span class="number">6</span>,<span class="number">3</span>);  <span class="comment">//从哪里开始 长度多少</span></span><br><span class="line">            <span class="comment">//写出字符数组</span></span><br><span class="line">            <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;你&#x27;</span>,<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;世&#x27;</span>,<span class="string">&#x27;界&#x27;</span>&#125;;</span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line">            <span class="comment">//写字符数组的一部分</span></span><br><span class="line">            fileWriter.write(chars,<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//下标 0开始 长度 2</span></span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符流的注意事项"><a href="#字符流的注意事项" class="headerlink" title="字符流的注意事项"></a>字符流的注意事项</h3><p><strong>！！！字符流写出数据后 必须刷新流 或者 关闭流 写出去的数据才会生效</strong></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建一个文件字符输出流和与目标文件接通</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//写出一个字符</span></span><br><span class="line">        fileWriter.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        fileWriter.write(<span class="number">97</span>);</span><br><span class="line">        fileWriter.write(<span class="string">&#x27;豪&#x27;</span>);</span><br><span class="line"><span class="comment">//如果 不刷新或者关闭 写出的数据就无效</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//刷新流</span></span><br><span class="line">fileWriter.flush();</span><br><span class="line">        <span class="comment">//或者 关闭流 fileWriter.close();</span></span><br><span class="line">    <span class="comment">//一般使用关闭流  关闭流默认包含刷新操作</span></span><br><span class="line">        <span class="comment">//区别是 关闭流后无法使用 但是刷新流 后还能继续使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原因：</strong><br>因为IO流执行一次每次读写数据 都会进行一次系统的调用才能把数据 读写到文件中 而每次调用都会耗费 计算机性能 如果你一次写出多个字符 意味着 要执行多次系统调用 这样性能就会很差 而文件字符输出流优化了这个问题 当你创建文件字符输出流的时候 <strong>系统会在内存中 分配一个 缓冲区</strong> 你<strong>每次写出数据的时候 是先写到缓冲区中</strong> 这样<strong>速度会很快 等你写完了 系统最后将缓冲区的 数据写出到文件中</strong><br>所以要解决这个问题 你写出数据完 <strong>要么刷新缓冲区</strong>  要么<strong>关闭流</strong></p><p><strong>如果缓冲区装满了 系统会自动先写出去</strong></p><p>字符流的缓冲区</p><h1 id="IO-缓冲流"><a href="#IO-缓冲流" class="headerlink" title="IO-缓冲流"></a>IO-缓冲流</h1><p><img src="/ZzzjhBlog/images/image-20241109121759572.png" alt="image-20241109121759572"></p><p><strong>缓冲流的作用：</strong> <strong>就是对原始流进行包装 提高原始流读写数据的性能</strong></p><p><img src="/ZzzjhBlog/images/image-20241109123318619.png" alt="image-20241109123318619"><br><img src="/ZzzjhBlog/images/image-20241109123402685.png" alt="image-20241109123402685"></p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 字节缓冲输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 12:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//定义一个字节输入流</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;IO\\test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//定义一个字节缓冲输入流 包装 字节输入流</span></span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">                <span class="comment">// 也可以自己定义字节缓冲流的缓冲池 大小  BufferedInputStream bis = new BufferedInputStream(fis,8192*2);  默认 8192（8kb）  *2 代表（16kb）</span></span><br><span class="line">                <span class="comment">//定义一个字节输出流</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;IO\\copy-test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//定义一个字节缓冲输出流 包装 字节输出流</span></span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><p><img src="/ZzzjhBlog/images/image-20241109132143747.png" alt="image-20241109132143747"></p><p><img src="/ZzzjhBlog/images/image-20241109132212541.png" alt="image-20241109132212541"><br><img src="/ZzzjhBlog/images/image-20241109133345869.png" alt="image-20241109133345869"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//定义一个 原始的字符输入流</span></span><br><span class="line">                <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;IO\\test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//定义一个 字符缓冲输入流 包装 原始字符流</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line">                <span class="comment">//定义一个 原始字符输出流</span></span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;IO\\copy-test&quot;</span>);</span><br><span class="line">                <span class="comment">//定义 缓冲字符流 包装原始的 字符输出流</span></span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileWriter)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = reader.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bufferedWriter.write(chars,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原始流、缓冲流的性能分析【重点】"><a href="#原始流、缓冲流的性能分析【重点】" class="headerlink" title="原始流、缓冲流的性能分析【重点】"></a>原始流、缓冲流的性能分析【重点】</h2><p>分别使用原始的字节流，以及字节缓冲流复制一个很大视频。</p><p>一般情况下定义的<strong>字节数组越大，速度越快，运行效率越高</strong> 但是字符数组越大，把数据往字符数组里倒入倒出也需要时间，所以在字符数组大到一定程度时，再增加它的大小，效率也不会有提升。</p><p>结论：建议使用<strong>字节缓冲输入流、字节缓冲输出流，结合字节数组的方式，目前来看是性能最优的组合。</strong></p><h1 id="IO转换流"><a href="#IO转换流" class="headerlink" title="IO转换流"></a>IO转换流</h1><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>转换流可以解决不同编码读取出现乱码的问题</p><p>因为 如果你代码编码和被读取的<strong>文本文件的编码不一致</strong> 使用<strong>字符流</strong>读取文本文件就<strong>会出现乱码</strong></p><p><img src="/ZzzjhBlog/images/image-20241109151737663.png" alt="image-20241109151737663"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 转换流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transform</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (   <span class="comment">//得到文件的原始字节流 (GBK字节流形式)</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;IO\\test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//把原始的字节流转换按照指定的字符集编码转换为 字符输入流</span></span><br><span class="line">                <span class="type">Reader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                <span class="comment">//再把 字符输入流再包装成 缓冲字符输入流 提升性能</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr)</span><br><span class="line">        ) &#123;</span><br><span class="line">            System.out.println(br.readLine());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符输出转换流"><a href="#字符输出转换流" class="headerlink" title="字符输出转换流"></a>字符输出转换流</h2><p>作用：可以指定写出去的字符使用上面字符集编码</p><p><img src="/ZzzjhBlog/images/image-20241109153226895.png" alt="image-20241109153226895"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 转换流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transform</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (   <span class="comment">//创建文件字节输出流</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;IO\\out.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//把原始文件字节输出流 按照指定字符集转换成 字符输出转换流</span></span><br><span class="line">                <span class="type">OutputStreamWriter</span> <span class="variable">ow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(ow)</span><br><span class="line">        ) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;你好世界&quot;</span>); <span class="comment">//此时写出去的 数据采用 GBK字符集形式</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="IO-打印流"><a href="#IO-打印流" class="headerlink" title="IO-打印流"></a>IO-打印流</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>打印流实现更方便 更高效的将数据打印出去 实现打印什么出去就是什么</p><h2 id="PrintStream-PrintWriter"><a href="#PrintStream-PrintWriter" class="headerlink" title="PrintStream &#x2F;PrintWriter"></a><strong>PrintStream &#x2F;PrintWriter</strong></h2><h2 id="PrintStream-API"><a href="#PrintStream-API" class="headerlink" title="PrintStream API"></a>PrintStream API</h2><p><img src="/ZzzjhBlog/images/image-20241109160728154.png" alt="image-20241109160728154"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 打印流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintSteam</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">PrintStream</span> <span class="variable">printSteam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;IO\\test.txt&quot;</span>) <span class="comment">//如果想要追加 就先创建低级设置追加 然后使用打印流包装低级流</span></span><br><span class="line">        ) &#123;</span><br><span class="line">                printSteam.println(<span class="number">97</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><h4 id="InputStream类的available-方法获取流的长度问题"><a href="#InputStream类的available-方法获取流的长度问题" class="headerlink" title="InputStream类的available()方法获取流的长度问题"></a>InputStream类的available()方法获取流的长度问题</h4><p><img src="/ZzzjhBlog/images/image-20241112031443382.png" alt="image-20241112031443382"></p><p><code>available()</code> 是一个用来辅助了解缓冲区情况的方法，<strong>不应依赖它来获取文件或流的总大小</strong>，也<strong>不能作为文件是否读取完毕的判断</strong>依据。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exception（异常）</title>
      <link href="/ZzzjhBlog/2025/03/31/Exception%EF%BC%88%E5%BC%82%E5%B8%B8%EF%BC%89/"/>
      <url>/ZzzjhBlog/2025/03/31/Exception%EF%BC%88%E5%BC%82%E5%B8%B8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常(Exception)"></a>异常(Exception)</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Java语言中，将程序执行中发生的不正常情况成为“异常”，（开发中逻辑和语法错误不是异常）<br>执行过程中所发生的异常事件可分为两类<br>1）<strong>Error（错误）</strong>：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：<strong>StackOverflowError[栈溢出]和OOM（out of memory），Error是严重错误，程序会崩溃</strong>。</p><p>2）<strong>Exception</strong>：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等，<strong>Exception分为两大类：运行时异常和编译时异常。</strong></p><h2 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h2><table><thead><tr><th>层级关系</th><th>异常类型 &#x2F; 子类</th><th>说明</th></tr></thead><tbody><tr><td><code>Object</code></td><td>—</td><td>所有类的基类</td></tr><tr><td><code>Throwable</code></td><td>—</td><td>所有异常和错误的父类，分为 <code>Error</code>（错误）和 <code>Exception</code>（异常）两大类</td></tr><tr><td><strong><code>Error</code></strong></td><td><code>VirtualMachineError</code></td><td>JVM 相关错误，如：</td></tr><tr><td></td><td><code>StackOverflowError</code></td><td>栈溢出错误</td></tr><tr><td></td><td><code>OutOfMemoryError</code></td><td>内存溢出错误</td></tr><tr><td></td><td><code>InternalError</code></td><td>JVM 内部错误</td></tr><tr><td></td><td><code>AWTError</code></td><td>AWT 相关错误</td></tr><tr><td><strong><code>Exception</code></strong></td><td><code>IOException</code></td><td>输入输出异常，如：</td></tr><tr><td></td><td><code>EOFException</code></td><td>输入流结束异常</td></tr><tr><td></td><td><code>FileNotFoundException</code></td><td>文件未找到异常</td></tr><tr><td></td><td><code>SQLException</code></td><td>数据库操作异常</td></tr><tr><td></td><td><code>RuntimeException</code></td><td>运行时异常（程序逻辑问题），如：</td></tr><tr><td></td><td><code>NullPointerException</code></td><td>空指针异常</td></tr><tr><td></td><td><code>ArithmeticException</code></td><td>算术异常（如除零）</td></tr><tr><td></td><td><code>ArrayIndexOutOfBoundsException</code></td><td>数组越界异常</td></tr><tr><td></td><td><code>IllegalArgumentException</code></td><td>非法参数异常</td></tr></tbody></table><p>Throwable：有两个重要的子类：Exception（异常）和Error（错误），两者都包含了大量的异常处理类。Exception这种异常又分为两类：运行时异常和编译异常。</p><p>1、<strong>运行时异常(不受检异常)</strong>：RuntimeException类极其子类表示JVM在运行期间可能出现的错误。比如说试图使用<strong>空值对象的引用（NullPointerException）</strong>、<strong>数组下标越界（ArrayIndexOutBoundException）</strong>。此类异常属于不可查异常，一般是由程序逻辑错误引起的，<strong>在程序中可以选择捕获处理，也可以不处理。</strong></p><p>2、<strong>编译异常(受检异常)</strong>：Exception中除RuntimeException极其子类之外的异常。如果程序中出现此类异常，比如说<strong>IOException</strong>，<strong>必须对该异常进行处理，否则编译不通过</strong>。在程序中，通常不会自定义该类异常，而是直接使用系统提供的异常类。</p><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3><ol><li>NullPointerException<code> - 空指针异常，当应用程序试图在需要对象的地方使用</code>null&#96;时抛出。</li><li><code>ArithmeticException</code> - 数学运算异常，当出现异常的算术条件时，例如整数除以零时抛出。</li><li><code>ArrayIndexOutOfBoundsException</code> - 数组下标越界异常，当使用不合法的索引访问数组时抛出。</li><li><code>ClassCastException</code> - 类型转换异常，当试图将对象强制转换为不是实例的子类时抛出。</li><li><code>NumberFormatException</code> - 数字格式不正确异常，当应用程序试图将字符串转换为一种数值类型，但该字符串没有有效的格式时抛出。</li></ol><h3 id="常见的编译异常"><a href="#常见的编译异常" class="headerlink" title="常见的编译异常"></a>常见的编译异常</h3><ol><li><code>SQLException</code> - 操作数据库时，查询表可能发生异常。</li><li><code>IOException</code> - 操作文件时，发生的异常。</li><li><code>FileNotFoundException</code> - 当操作一个不存在的文件时，发生异常。</li><li><code>ClassNotFoundException</code> - 加载类时，而该类不存在时，发生的异常。</li><li><code>EOFException</code> - 操作文件时，到达文件末尾时，发生的异常。</li><li><code>IllegalArgumentException</code> - 参数异常，当传递给方法或构造函数的参数不合法或超出预期范围时，发生的异常。</li></ol><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>异常处理就时异常发生的时候，对异常处理的方式</p><h3 id="异常处理的方式"><a href="#异常处理的方式" class="headerlink" title="异常处理的方式"></a>异常处理的方式</h3><h3 id="①try-catch、try-catch-finally"><a href="#①try-catch、try-catch-finally" class="headerlink" title="①try-catch、try-catch-finally"></a><strong>①try-catch、try-catch-finally</strong></h3><p>程序员在代码中捕获异常 自行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//代码有可能异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//捕获到的异常</span></span><br><span class="line">            <span class="comment">//1.当异常发生的时候 系统将异常封装成Exception对象e</span></span><br><span class="line">            <span class="comment">//2.得到异常对象后，程序员自己处理</span></span><br><span class="line">            <span class="comment">//如果没有发生异常catch中代码块不会执行</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//1.不管代码快有没有异常 最后都会执行finally中的代码 </span></span><br><span class="line">            <span class="comment">//2.通常用来释放资源</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.如果try代码块可能有多个异常</span></span><br><span class="line">        <span class="comment">//2.可以使用多个catch 分别捕获不同异常 相应处理</span></span><br><span class="line">        <span class="comment">//3.要求子类异常写在前面，父类异常写在后面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            <span class="comment">//name 为null</span></span><br><span class="line">            System.out.println(person.name);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123; <span class="comment">//捕获空指针异常</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123; <span class="comment">//捕获算数异常</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;最后一定要运行的代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><strong>null</strong><br><strong>&#x2F;by zero</strong><br><strong>最后一定要运行的代码</strong></p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>]; <span class="comment">// String数组</span></span><br><span class="line">            <span class="keyword">if</span> (names[<span class="number">1</span>].equals(<span class="string">&quot;tom&quot;</span>)) &#123; <span class="comment">// 这里会抛出NullPointerException，因为names[1]是null</span></span><br><span class="line">                System.out.println(names[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;hspedu&quot;</span>; <span class="comment">// 这里会抛出ArrayIndexOutOfBoundsException，因为索引3超出范围</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">// 捕获NullPointerException</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 必须执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">// 返回4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method()); <span class="comment">//  输出什么？  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行流程：</p><ol><li><strong>进入 <code>try</code> 块</strong>：<ul><li><code>String[] names = new String[3];</code> 创建了一个长度为 3 的字符串数组，所有元素都被初始化为 <code>null</code>。</li><li>代码检查 <code>names[1].equals(&quot;tom&quot;)</code>，由于 <code>names[1]</code> 是 <code>null</code>，会抛出 <code>NullPointerException</code>。</li><li>程序跳到对应的 <code>catch (NullPointerException e)</code> 块。</li></ul></li><li><strong>进入 <code>NullPointerException</code> 的 <code>catch</code> 块</strong>：<ul><li>在 <code>catch (NullPointerException e)</code> 中，程序执行 <code>return 3;</code>，表示函数准备返回 3。</li><li>但在 <code>return 3;</code> 之前，程序会先执行 <code>finally</code> 块。</li></ul></li><li><strong>进入 <code>finally</code> 块</strong>：<ul><li><code>finally</code> 块中的 <code>return 4;</code> 强制函数返回 4，这会覆盖原本 <code>catch</code> 块中准备返回的值。</li></ul></li><li><strong>返回结果</strong>：<ul><li>无论之前 <code>try</code> 或 <code>catch</code> 块中执行了什么操作，由于 <code>finally</code> 块中有 <code>return 4;</code>，最终返回值都会是 4。</li></ul></li></ol><p><strong>练习二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;<span class="comment">// i = 2</span></span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>]; <span class="comment">//创建String[] 数组 然后初始化为 null</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;tom&quot;</span>.equals(names[<span class="number">1</span>])) &#123;<span class="comment">//这里不会出现 空指针异常 因为 是 “tom“字符串调用的equals()方法</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;小黄人&quot;</span>;  <span class="comment">//数组越界异常 被越界异常捕获</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123; <span class="comment">//捕获数组越界异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">//由于有finally 不会返回</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; <span class="comment">//必须执行</span></span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">// 执行 ++i  i的值为3 由于finally中有return 方法所以直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method()); <span class="comment">// 输出3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1. names[1]是null，因此&quot;tom&quot;.equals(names[1])始终为false，执行else块。</span></span><br><span class="line"><span class="comment">// 2.因为 &quot;tom&quot; 是非 null 的字符串常量，所以调用 equals 时不会出错，即使 names[1] 是 null，它也只会返回 false，不会抛出异常。names[1].equals(&quot;tom&quot;)：如果 names[1] 是 null，则会抛出 NullPointerException，因为你试图对 null 对象调用方法。</span></span><br><span class="line"><span class="comment">// 3. names[3]是越界访问，将抛出ArrayIndexOutOfBoundsException。</span></span><br><span class="line"><span class="comment">// 4. 由于finally块中的return语句，其他所有return语句都将被忽略。</span></span><br><span class="line"><span class="comment">// 5. 最终，method()方法返回3。</span></span><br></pre></td></tr></table></figure><p>代码执行流程：</p><ol><li><strong>初始变量设置</strong>：<ul><li><code>int i = 1;</code>，即 <code>i</code> 初始值为 1。</li></ul></li><li><strong>进入 <code>try</code> 块</strong>：<ul><li><code>i++</code>，即 <code>i</code> 的值变为 2。</li><li><code>String[] names = new String[3];</code> 创建一个长度为 3 的字符串数组，所有元素都初始化为 <code>null</code>。</li><li><code>if (&quot;tom&quot;.equals(names[1]))</code>，由于 <code>names[1]</code> 为 <code>null</code>，因此 <code>equals</code> 比较时不会抛出 <code>NullPointerException</code>，而是返回 <code>false</code>（<code>&quot;tom&quot;.equals(null)</code> 为 <code>false</code>）。</li><li>程序进入 <code>else</code> 分支，执行 <code>names[3] = &quot;小黄人&quot;;</code>，但由于 <code>names</code> 的长度为 3，访问 <code>names[3]</code> 超出数组范围，抛出 <code>ArrayIndexOutOfBoundsException</code>。</li></ul></li><li><strong>进入 <code>ArrayIndexOutOfBoundsException</code> 的 <code>catch</code> 块</strong>：<ul><li>捕获数组越界异常，并执行 <code>return 2;</code>，表示准备返回 2。</li><li>但是由于有 <code>finally</code> 块，<code>return 2;</code> 会暂时被搁置，程序会继续执行 <code>finally</code> 块。</li></ul></li><li><strong>进入 <code>finally</code> 块</strong>：<ul><li><code>finally</code> 块中的 <code>return ++i;</code> 会再次执行 <code>++i</code>，此时 <code>i</code> 变为 3，并返回 3。</li><li>由于 <code>finally</code> 块中的 <code>return</code> 语句会覆盖其他所有的 <code>return</code>，因此最终返回值为 3。</li></ul></li></ol><p>总结：</p><ul><li><p><strong>最终输出结果</strong>：<code>method()</code> 方法的返回值是 3。</p></li><li><p>这是因为 <code>finally</code> 块中的 <code>return ++i;</code> 覆盖了 <code>try</code> 和 <code>catch</code> 块中的 <code>return</code> 语句。</p></li></ul><p><strong>练习三</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (names[<span class="number">1</span>].equals(<span class="string">&quot;tom&quot;</span>)) &#123; <span class="comment">// 这里会抛出NullPointerException，因为names[1]是null</span></span><br><span class="line">                System.out.println(names[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;小黄人&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">//捕获空指针异常</span></span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">//执行  ++i i = 3 由于最后有finally但是finally中没有return语句 所以 这里执行完++i之后 会有一个 临时变量 temp 保存了 i 的值 temp=&gt;3 然后去执行finally 然后等finally执行完之后 再回来执行return语句</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ++i; <span class="comment">//i = 4</span></span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i); <span class="comment">//输出 i = 4 由于没有 return  回到  捕获空指针异常中 然后返回的是temp临时变量的值;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method()); <span class="comment">// 调用method方法并打印其返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// method()的实际返回值将取决于捕获到的异常类型，但由于finally块中的++i，最终的返回值可能会受到影响（但在这个特定代码中，由于return语句的位置，finally块中的修改不会影响返回值）。</span></span><br></pre></td></tr></table></figure><p><strong>代码执行流程</strong></p><ol><li><strong>初始变量设置</strong>：<ul><li><code>int i = 1;</code>，即 <code>i</code> 初始值为 1。</li></ul></li><li><strong>进入 <code>try</code> 块</strong>：<ul><li><code>i++</code>，即 <code>i</code> 的值变为 2。</li><li><code>String[] names = new String[3];</code>，声明一个长度为 3 的字符串数组，所有元素都初始化为 <code>null</code>。</li><li><code>if (names[1].equals(&quot;tom&quot;))</code>，此时 <code>names[1]</code> 依然为 <code>null</code>，因此会抛出 <code>NullPointerException</code>，程序跳转到对应的 <code>catch (NullPointerException e)</code> 块。</li></ul></li><li><strong>进入 <code>NullPointerException</code> 的 <code>catch</code> 块</strong>：<ul><li><code>++i</code>，即 <code>i</code> 从 2 变为 3。</li><li>然后准备返回 <code>i</code>，但由于有 <code>finally</code> 块，返回值暂时保存为一个临时变量 <code>temp</code>，<code>temp = 3</code>。</li></ul></li><li><strong>进入 <code>finally</code> 块</strong>：<ul><li><code>++i</code>，即 <code>i</code> 再次自增，变为 4。</li><li>打印输出 <code>&quot;i=4&quot;</code>，这是最后一步显示的内容。</li><li><code>finally</code> 块结束后，控制权返回到之前的 <code>catch</code> 块的 <code>return</code> 语句，但最终返回的是保存下来的 <code>temp</code> 值，即 3。</li></ul></li><li><strong>返回结果</strong>：<ul><li>因此，<code>method()</code> 方法的返回值是 3，而不是 <code>finally</code> 块中修改后的 <code>i</code> 值 4。<code>finally</code> 中对 <code>i</code> 的修改不会影响返回值，因为返回值在进入 <code>finally</code> 前已经确定。</li></ul></li></ol><p>总结：</p><p>需要注意的是 <code>finally</code> 修改了 <code>i</code> 但并不影响返回值。</p><p><strong>try-catch异常处理及try-catch-finally执行顺序小结：</strong>  </p><ol><li><p><strong>没有出现异常时</strong>：  </p><ul><li>执行try块中的所有语句。  </li><li>不执行catch块中的任何语句。  </li><li>如果存在finally块，则最后执行finally块中的所有语句。</li></ul></li><li><p><strong>出现异常时</strong>：  </p><ul><li>try块中异常发生的位置之后的所有语句将不再执行。  </li><li>执行与异常类型相匹配的catch块中的语句。  </li><li>如果有finally块，则在catch块（或try块直接结束后，如果没有匹配的catch块）执行完毕后，最后执行finally块中的所有语句。</li></ul></li></ol><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>如果用户输入的不是整数，就提示他反复的输入 直到输入正确为止 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionExe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入整数&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                number = Integer.parseInt(str);  <span class="comment">// 将输入的字符串转成整数</span></span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 如果输入成功，跳出循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;  <span class="comment">// 只捕获数字格式异常</span></span><br><span class="line">                System.out.println(<span class="string">&quot;你需要输入整数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        scanner.close();  <span class="comment">// 关闭 Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="②throws"><a href="#②throws" class="headerlink" title="②throws"></a><strong>②throws</strong></h3><p>将发生的异常抛出，交给调用者（方法来处理），最顶级的处理者就是JVM</p><h4 id="throws处理机制图"><a href="#throws处理机制图" class="headerlink" title="throws处理机制图"></a>throws处理机制图</h4><table><thead><tr><th>步骤</th><th>处理单元</th><th>操作</th><th>异常传递说明</th></tr></thead><tbody><tr><td>1</td><td>f2 方法</td><td>抛出异常</td><td>f2 方法执行过程中触发异常，生成异常对象并抛出。</td></tr><tr><td>2</td><td>f1 方法</td><td>throws 声明异常</td><td>f1 方法通过<code>throws</code>声明承接 f2 抛出的异常，若自身未处理（无 try-catch），继续向上传递。</td></tr><tr><td>3</td><td>main 方法</td><td>throws 声明异常</td><td>main 方法通过<code>throws</code>接收 f1 传递的异常，若仍未处理（无 try-catch-finally），再次向上抛出。</td></tr><tr><td>4</td><td>JVM</td><td>最终处理异常</td><td>异常未被程序代码捕获处理，JVM 接收后执行默认操作（如终止程序、打印异常堆栈信息）。</td></tr></tbody></table><h4 id="throws异常处理-基本介绍"><a href="#throws异常处理-基本介绍" class="headerlink" title="throws异常处理,基本介绍"></a>throws异常处理,基本介绍</h4><p>1）如果一个方法（中的语句执行时）可能生成某种异常，但是并不能确定如何,处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些,异常进行处理，而由该方法的<strong>调用者负责处理</strong>。<br>2）在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异,常类型可以是方法中产生的异常类型，也可以是它的父类。</p><p>注意事项和使用细节,ThrovwsDetail.java<br>1）对于编译异常，程序中必须处理，比如try-catch或者throws<br>2）对于运行时异常，程序中<strong>如果没有处理，默认就是throws的方式处理</strong><br>3）子类重写父类的方法时，对抛出异常的规定：<strong>子类重写的方法，所抛出的异常类型要,么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="comment">//子类重写父类的方法 对抛出异常的规定：子类的重写方法</span></span><br><span class="line">    <span class="comment">//抛出的异常类型要么和父类一致 要么是父类抛出异常的子类型 不然会报错</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）在throws过程中，<strong>如果有方法try-catch，就相当于处理异常，就可以不必,throws</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">//因为f1（）方法调用f3（）方法 f3（）方法抛出了异常交给f1（）方法处理 所以 f1（）方法也要处理这个异常</span></span><br><span class="line">        <span class="comment">//可以try-catch 或者继续 throws 出去 如果有很多个方法这样嵌套 最终 异常会抛出到最开始的方法</span></span><br><span class="line">        f3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;<span class="comment">//抛出文件路径错误异常</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C://a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>当程序出现某些”错误“ 但该错误信息并没有在Throwanle子类中描述处理，这个时候可以自己设计异常类用于描述该错误信息</p><h3 id="自定义异常步骤："><a href="#自定义异常步骤：" class="headerlink" title="自定义异常步骤："></a>自定义异常步骤：</h3><p>①定义类：自定义异常类名（程序员自己写）继承Exception或RuntiomeException<br>②如果继承Exception，属于编译异常<br>③如果继承RuntimeException，属于运行异常（一般来说继承RuntimeException）</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment">//要求在18 - 120之间 否则抛出一个自定义异常</span></span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;age 范围错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的年龄范围正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><table><thead><tr><th>关键字</th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td>throws</td><td>异常处理的一种方式</td><td>方法声明处</td><td>异常类型</td></tr><tr><td>throw</td><td>手动生成异常对象的关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table><p><strong>练习</strong><br>编写应用程序EcmDef.java 接受命令行的两个参数（整数类型）计算两数相除<br>计算两个数相除 要求使用方法cal（int n1，int n2）<br>对数据格式不正确 缺少命令行参数、除0 进行异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EcmDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;参数个数不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;计算结果是：&quot;</span> +  cal(n1, n2));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数类型不对&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现了除0异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 / n2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/ZzzjhBlog/2025/03/31/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/ZzzjhBlog/2025/03/31/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>就是一个类中又完整的嵌套了另一个类的结构。被嵌套的类叫做内部类（inner class） 嵌套其他类的类称为外部类（outer class）<br><strong>拓展</strong><br>类的五大成员：<strong>属性、方法、构造器、代码块、内部类</strong><br><strong>内部类最主要的特点就是可以直接访问私有属性</strong></p><p>基本语法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; <span class="comment">//内部类 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123; <span class="comment">//外部其他类 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的五要素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outer</span><span class="params">(<span class="type">int</span> n1)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.n1 = n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123; <span class="comment">//方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="comment">//代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类 在Outer内定义 </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部类的类型（四种）"><a href="#内部类的类型（四种）" class="headerlink" title="内部类的类型（四种）"></a>内部类的类型（四种）</h2><p>定义在外部类的局部位置上（比如方法内）<br>①局部内部类（又类名）<br>②<strong>匿名内部类</strong>（<strong>没有类名</strong>，<strong>重点！！！</strong>）<br>定义在外部类的成员位置上：<br>③成员内部类（没用static 修饰）<br>④静态内部类（使用static 修饰）</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>局部内部类是定义在外部类的局部位置，比如方法中，并且有类名<br>1.可以直接访问外部类的所有成员，包含私有的<br>2.不能添加访问修饰符，因为它的地位就是一个局部变量。局部变,修饰符的。<br>3.作用域：仅仅在定义它的方法或代码块中。<br>4.局部内部类—访问—-&gt;外部类的成员[访问方式：直接访问】<br>5.外部类—访问—-&gt;局部内部类的成员,访问方式：创建对象，再访问（注意：必须在作用域内）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123; <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Outer01 m2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//局部内部类是定义在外部类的局部位置，通常在方法中</span></span><br><span class="line">        <span class="comment">//不能添加访问修饰符，但是可以用final修饰</span></span><br><span class="line">        <span class="comment">//作用域：仅仅在定义它的方法或代码块中 因为这个内部类就像相当于方法或代码块中的一个局部变量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner01</span> &#123; <span class="comment">//局部内部类（本质上是一个类 类的五大成员都可以拥有 ）</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;n1=&quot;</span> + n1); <span class="comment">//可以直接访问外部类的所有成员包括私有的</span></span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//外部类在方法中可以创建Inner01对象，然后调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//n1=100</span></span><br><span class="line"><span class="comment">//Outer01 m2()</span></span><br></pre></td></tr></table></figure><p>记住：<br>（1）局部内部类定义在方法中或代码块中<br>（2）作用域在这个方法中或代码块中<br>（3）这个局部内部类本质就是一个类 包含类的五大成员</p><p><strong>外部</strong>其他类—不能访问—–&gt;局部内部类**（因为局部内部类相当于一个局部变量）</p><p>如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）<br>演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer01 m2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner01</span> &#123;</span><br><span class="line">            <span class="comment">//此时内部类也有个 成员 n1 外部类也有成员n1</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//那么此时访问的就是 内部类的n1 《遵守就近原则》 若想访问外部成员 n1 （外部类名.this.成员）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Inner n1=&quot;</span> + n1); <span class="comment">//访问内部类的n1</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Outer n1=&quot;</span> + Outer.<span class="built_in">this</span>.n1);<span class="comment">//访问外部类的n1</span></span><br><span class="line">                <span class="comment">//Outer.this 这个本质就是外部类的一个对象 就是哪个对象调用 m1()方法就是哪个对象 我们在主方法中创建的 outer 对象调用了m1()方法 那么Outer.this就是outer对象</span></span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="匿名内部类（！！！）"><a href="#匿名内部类（！！！）" class="headerlink" title="匿名内部类（！！！）"></a>匿名内部类（！！！）</h3><p>描述：</p><p>定义在外部类的局部位置 比如方法中 并且没有类名<br>（1）本质还是类<br>（2）内部类<br>（3）该类没有名字<br>（4）同时还是一个对象<br>（5）可以直接访问外部类的所有成员 包括私有的<br>（6）不能添加修饰符 因为它的地位就是一个局部变量<br>（7）作用域：仅仅在定义它的方法中或代码块中<br>（8）匿名内部类访问外部成员方式 【直接访问】<br>（9）外部其他类不能访问匿名内部类（因为匿名内部类地位就是一个局部变量）<br>（10）如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表)&#123;</span><br><span class="line">    类体;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例子:</p><p><strong>基于接口创建匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123; <span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//需求 ： 想使用接口A，并且创建对象</span></span><br><span class="line">        <span class="comment">//传统方式：写一个类 实现该接口 并创建对象   接口名 变量名 = new 实现该接口的类的类名();</span></span><br><span class="line">        <span class="comment">//示例</span></span><br><span class="line">        <span class="comment">/*A tiger = new Tiger();</span></span><br><span class="line"><span class="comment">        tiger.cry();*/</span></span><br><span class="line">        <span class="comment">//如果你创建的类实现了该接口 但是只是用一次 后面不用了 这样定义一个类很麻烦</span></span><br><span class="line">        <span class="comment">//使用匿名内部类方式（简化开发）</span></span><br><span class="line">        <span class="comment">//示例</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>() &#123;  <span class="comment">//一般来说接口是不能直接创建实例的  可是这里 相当于在Tiger类里面重写cry()方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎在叫唤&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tiger.cry();</span><br><span class="line">        System.out.println(<span class="string">&quot;tiger的运行类型等于&quot;</span> + tiger.getClass()); <span class="comment">//输出结果 Outer$1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时tiger 的编译类型是： A接口      运行类型是：匿名内部类 XXX 这个匿名内部类名称XXX是外部类名称 Outer加了一个$1 也就是 Outer$1</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            底层中 会分配一个匿名  Outer$1</span></span><br><span class="line"><span class="comment">            是由 一个类 class Outer$1 implements A&#123;</span></span><br><span class="line"><span class="comment">                    <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">                    public void cry() &#123;</span></span><br><span class="line"><span class="comment">                        System.out.println(&quot;老虎叫唤&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//同时jdk底层在创建匿名内部类后 立即创建了 创建了Outer$1实例，并且把地址返回给 tiger</span></span><br><span class="line">        <span class="comment">//匿名内部类使用一次 就不能在使用了 不是tiger 无法使用 而是 Outer$1这个类没有了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎叫唤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123; <span class="comment">//接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基于类创建匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123; <span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">//分析</span></span><br><span class="line">        <span class="comment">//1. father编译类型 Father</span></span><br><span class="line">        <span class="comment">//2. father运行类型 Outer$1</span></span><br><span class="line">        <span class="comment">//3.底层会创建匿名内部类</span></span><br><span class="line">        <span class="comment">//4.同时也直接返回了匿名内部类Outer$1的一个对象</span></span><br><span class="line">        <span class="comment">//5.注意(&#x27;jack&#x27;)参数列表回传给Father的构造器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * class Outer$1 extends Father&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void test() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;匿名内部类重写test方法&quot;);</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写test方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//Father father1 = new Father(&quot;mack&quot;);</span></span><br><span class="line">        <span class="comment">//如果只是这样的化 那么它就只是单纯的创建一个Father的对象 编译类型和运行类型都是Father</span></span><br><span class="line">        System.out.println(<span class="string">&quot;father的运行类型是：&quot;</span> + father.getClass());</span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.如果你是基于抽象类的匿名内部类就必须要重写这个抽象类的抽象方法</span></span><br><span class="line">        <span class="comment">//示例</span></span><br><span class="line">        <span class="comment">// 编译类型 Animal 运行类型 Outer$2</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;animal 运行类型&quot;</span> + animal.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123; <span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到 name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="/ZzzjhBlog/images/image-20240908001932800.png" alt="image-20240908001932800"></p><h4 id="匿名内部类的注意事项和使用细节"><a href="#匿名内部类的注意事项和使用细节" class="headerlink" title="匿名内部类的注意事项和使用细节"></a>匿名内部类的注意事项和使用细节</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//创建一个基于类的匿名内部类</span></span><br><span class="line">       <span class="comment">//此时 编译类型为 Person  运行类型为 Outer$1</span></span><br><span class="line">       <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;匿名内部类重写了 hi()方法&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//此时调用方法  由于jdk动态绑定机制 看运行型类型方法 所以调用的是Outer$1重写的hi()方法</span></span><br><span class="line">       <span class="comment">//如果没有 匿名内部类Outer$1没有重写hi()方法 那么就会找到Person的hi()方法</span></span><br><span class="line">       person.hi();</span><br><span class="line">       <span class="comment">//也可以直接调用 如下</span></span><br><span class="line">       <span class="comment">//在创建一个匿名内部类</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;匿名内部类重写hi()方法 哈哈哈哈&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span> &#123;</span><br><span class="line">               <span class="built_in">super</span>.ok(str);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.ok(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">       <span class="comment">//这段可以这么理解</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        new Person()&#123;</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void hi() &#123;</span></span><br><span class="line"><span class="comment">               System.out.println(&quot;匿名内部类重写hi()方法 哈哈哈哈&quot;);</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void ok(String str) &#123;</span></span><br><span class="line"><span class="comment">               super.ok(str);</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">       这一段就是一个对象 因为匿名内部类本身也是返回对象 所以可以调用方法 也可以传参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person ok() &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><img src="/ZzzjhBlog/images/image-20240908004314132.png" alt="image-20240908004314132"></p><h3 id="匿名内部类实践"><a href="#匿名内部类实践" class="headerlink" title="匿名内部类实践"></a>匿名内部类实践</h3><p><strong>练习一</strong></p><p><strong>匿名内部类可以当作实参直接传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类当作实参直接传递 简介高效</span></span><br><span class="line">        f1(<span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这是一副名画&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 传统方式需要定义一个类来实现接口 A，并且实现接口方法，</span></span><br><span class="line">        <span class="comment">// 然后创建该类对象并传递给方法。</span></span><br><span class="line">        <span class="comment">// 相比之下，匿名内部类的方式显得更加简洁高效。</span></span><br><span class="line">        <span class="comment">// 另一个优点是，匿名内部类每次创建的实例都是独立的，</span></span><br><span class="line">        <span class="comment">// 修改某个实例的行为不会影响其他地方的实现，</span></span><br><span class="line">        <span class="comment">// 而如果使用的是显式定义的类，修改类的实现可能会影响所有使用该类的地方。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法，形参列表（接口类型）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(A a)</span> &#123;</span><br><span class="line">        a.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习二</strong><br>要求：<br>1.有一个铃声接口Bell，里面有个ring方法<br>2.有一个手机类Cellphone，具有闹钟功能,alarmclock，参数是Bell类型<br>3.,测试手机类的闹钟功能，通过匿名内部类,（对象）作为参数，打印：懒猪起床了<br>4.再传入另一个匿名内部类（对象），打印：小伙伴上课了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CellPhone</span> <span class="variable">cellPhone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellPhone</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1. 传递的是实现了Bell的接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//2. 重写了 ring</span></span><br><span class="line">        <span class="comment">//3. 相当于接收了</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        new Bell() &#123;</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">            public void ring() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;懒猪起床了&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//这样这个参数的编译类型是Bell接口 运行类型是匿名内部类</span></span><br><span class="line">        cellPhone.alarmClock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;懒猪起床了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//这里有创建了一个 匿名内部类和上面的匿名内部类不是一个 类 但是 运行过程和上面相同</span></span><br><span class="line">        cellPhone.alarmClock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小伙伴上课了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CellPhone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span>&#123;</span><br><span class="line">        bell.ring(); <span class="comment">//动态绑定 回到运行类型的ring()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>描述：</p><p>成员内部类定义在外部类的成员位置，并且没有static修饰<br>1.可以访问外部类的所有成员 （包括私有的）<br>2**.可以添加任意访问修饰符**（public、protected、默认、private），因为它的地位是一个成员<br><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer01</span> <span class="variable">outer01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer01</span>();</span><br><span class="line">        outer01.f1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="comment">//注意成员内部类是定义在外部类的成员位置上</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123; <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Outer01 的 n1 &quot;</span> + n1 + <span class="string">&quot; Outer01 的 name&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.作用域：和外部类的其他成员一样 作用域为外部类的整个类体<br>4.成员内部类—访问—-外部成员 比如（属性、方法）【访问方式 直接访问】<br>5.外部类—访问—成员内部类 【访问方式：创建对象 访问】<br>6.外部其他类—访问—-&gt;成员内部类<br>7.如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部其他类 使用成员内部类的三种方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建内部类实例：首先，你需要创建外部类的实例，然后通过这个实例来创建内部类的实例。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        Outer01.<span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> outer01.<span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="comment">//注意成员内部类是定义在外部类的成员位置上</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123; <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Outer01 的 n1 &quot;</span> + n1 + <span class="string">&quot; Outer01 的 name&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>介绍</p><p>1.可以直接访问外部类的所有静态成员，包含私有的，但是不能直接访问非静态的成员<br>2**.可以添加任意访问修饰符**（public、protected、默认、private），因为它的地位是一个成员<br>3.作用域：和外部类的其他成员一样 作用域为外部类的整个类体<br>4.静态内部类—-访问——-&gt;外部类（比如：静态属性）【访问方式： 直接访问所有静态成员】<br>5.外部类—–访问——-&gt;静态内部类 访问方式【创建对象 再访问】<br>6.外部其他类——访问——-&gt;静态内部类<br>7.如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.m1();</span><br><span class="line">        <span class="comment">//因为静态内部类，可以通过类名直接访问（前提满足访问权限）</span></span><br><span class="line">        Outer02.<span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>.Inner02();</span><br><span class="line">        inner02.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer02</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1使用static 修饰</span></span><br><span class="line">    <span class="comment">//可以访问外部类的所有静态成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner02</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner02</span>();</span><br><span class="line">        inner02.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="知识点练习"><a href="#知识点练习" class="headerlink" title="知识点练习"></a>知识点练习</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a><strong>练习1</strong></h3><p>1.计算器接口具有work方法 功能是运算 有一个手机类Cellphone<br>定义方法testWork测试计算功能调用接口的work方法<br>2.调用Cellphone对象的testWork方法 使用上 匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cellphone</span> <span class="variable">cellphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cellphone</span>();</span><br><span class="line">        cellphone.testWork(<span class="keyword">new</span> <span class="title class_">Calculate</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">10</span>,<span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Calculate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cellphone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">(Calculate calculate,<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(calculate.work(a,b)); <span class="comment">//根据动态绑定规则 它的 编译类型是Calculate  运行类型是 匿名内部类 所以调用 匿名内部类的testWork()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><p>这段代码就是 在 Cellphone 类中定义了testWork()方法 形参列表是（<strong>Calculate接口，整数 a，整数 b</strong>）然后我们在主方法中 创建CeLLphone 对象实例然后调用testWork()方法 参数是用 <strong>匿名内部类形式（匿名内部类同时也是一个对象） 传了一个 实现了Calculate 的实现类进去</strong> 还有 整数 a 和整数b  然后再testWork()方法中 <strong>局部变量calculate 就是我们传入的 实现了Calculate接口的匿名内部类</strong>  然后<strong>调用这个 实现类重写的 work()方法</strong> 。</p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a><strong>练习2</strong></h3><p>1.编写一个类A 在类中定义局部内部类B ,B中有一个私有常量name，有一个方法show（）打印常量name 进行测试<br>2.进阶：A中 也定义一个私有变量name，在show（）方法中打印测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类A的name&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">            <span class="keyword">private</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类B的name&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String name)</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类name: &quot;</span> + name);</span><br><span class="line">                System.out.println(<span class="string">&quot;外部类name: &quot;</span> + A.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.show(b.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a><strong>练习3</strong></h3><p>有一个Car类 有属性temperature（温度） 车内有Air（空调）类，有吹风功能flow  Air会监视车内的温度 如果超过40度吹冷气 低于0度吹暖气 如果在这之间则关掉空调  实例化 具有不同温度的Car对象 调用空调的flow方法 测试空条吹的风是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">41</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">20</span>);</span><br><span class="line">         car1.<span class="keyword">new</span> <span class="title class_">Air</span>().flow();</span><br><span class="line">         car2.<span class="keyword">new</span> <span class="title class_">Air</span>().flow();</span><br><span class="line">         car3.<span class="keyword">new</span> <span class="title class_">Air</span>().flow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="type">double</span> temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Air</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flow</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Car.<span class="built_in">this</span>.temperature &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吹暖气&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Car.<span class="built_in">this</span>.temperature &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吹冷气&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;关闭空调&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">double</span> temperature)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/ZzzjhBlog/2025/03/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/ZzzjhBlog/2025/03/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>类的理解</strong><br>类就是对现实事物的一种描述</p><p><strong>类的组成</strong><br>属性: 指事物的特征，例如：手机事物 (品牌，价格，尺寸)<br>行为: 指事物能执行的操作，例如：手机事物 (打电话，发短信)</p><p>类和对象的关系<br>类是对事物的一种描述，对象则为具体存在的事物</p><p>**类的五大要素：**属性、方法、构造器、代码块、内部类</p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;  </span><br><span class="line">    <span class="comment">// 成员变量  </span></span><br><span class="line">    变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>;  </span><br><span class="line">    变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;  </span><br><span class="line">    ...  </span><br><span class="line">    <span class="comment">// 成员方法  </span></span><br><span class="line">    方法<span class="number">1</span>;  </span><br><span class="line">    方法<span class="number">2</span>; </span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    class 内部类名&#123;</span><br><span class="line">        <span class="comment">//内部类的属性、方法、构造器等等</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        代码；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> 类名()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> 类名(XXX XXX)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><p>创建对象<br>格式: 类名 对象名 &#x3D; new 类名();<br>范例: Phone p &#x3D; new Phone();</p><p>使用对象</p><ol><li>使用成员变量<br>格式: 对象名.变量名</li><li>使用成员方法<br>格式: 对象名.方法名()</li></ol><h3 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h3><p>比如现在有一个类Cat 我创建它的实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOP01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小白&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小黑&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在JVM内存中是这样的<br><img src="/ZzzjhBlog/images/image-20240913010328249.png" alt="image-20240913010328249"></p><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p>成员变量和局部变量的区别</p><ol><li>变量位置不同: 成员变量 (类中方法外) 局部变量 (方法内部或方法声明上)</li><li>存在中位置不同: 成员变量 (堆内存) 局部变量 (栈内存)</li><li>生命周期不同: 成员变量 (随着对象的存在而存在, 随着对象的消失而消失) 局部变量 (随着方法的调用而存在, 随着方法的调用完毕而消失)</li><li>初始化值不同: 成员变量 (有默认初始化值) 局部变量 (没有默认初始化值, 必须先定义, 赋值才能使用)</li></ol><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>如果局部跟全局变量名冲突优先使用局部 &#x3D;&gt; 就近原则<br>调用 this 所在的方法, this 就是 当前对象</p><p>this 修饰的变量用于指代成员变量, 其主要作用是 (区分局部变量和成员变量的重名问题)<br>方法的形参如果与成员变量同名, 不带 this 修饰的变量指的是形参, 而不是成员变量<br>方法的形参如果与成员变量同名, 不带 this 修饰的变量指的是成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小黄人&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;神偷奶爸&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        p1.method(p2.getName(),p2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">nationality</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//this 修饰的变量用于指代成员变量, 其主要作用是 (区分局部变量和成员变量的重名问题)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫 &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;我的年龄是 &quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot; 岁 &quot;</span>+  name +<span class="string">&quot; 的年龄是 &quot;</span> + age + <span class="string">&quot; 岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><ol><li>构造方法是一种特殊的方法</li><li>构造方法没有返回值 连返回值的位置都没有</li><li>构造方法的方法名就是类名</li><li>构造方法可以有参数 也可以没有参数</li><li>构造方法可以重载</li><li>如果没有给自己定义构造方法, 系统会默认提供一个空参数构造方法<br>如果自定义了构造方法, 系统将不提供默认的无参数构造方法<br>(建议: 如果自定义了构造方法, 最好加上无参构造)</li><li>构造方法的作用? 他是在创建对象的时候成员变量进行赋值 &#x3D;&gt; 创建对象的时候 构造只执行一次</li></ol><p><img src="/ZzzjhBlog/images/image-20240914155238011.png" alt="image-20240914155238011"></p><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小黄人&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//被static 修饰的方法或者属性 都是属于类的</span></span><br><span class="line">        <span class="comment">//使用static关键字修饰的属性或者方法 调用方式是 类名.属性名 或者类名.方法名</span></span><br><span class="line">        System.out.println(Person.nationality);</span><br><span class="line">        System.out.println(Person.getNationality());</span><br><span class="line">        <span class="comment">//也可以使用对象的实例来调用(当然 不建议这么调用 static修饰属性或者方法都推荐使用 类名.属性/方法 去调用)</span></span><br><span class="line">        System.out.println(p1.nationality);</span><br><span class="line">        System.out.println(p1.getNationality());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">nationality</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getNationality</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nationality;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="什么是类变量"><a href="#什么是类变量" class="headerlink" title="什么是类变量"></a>什么是类变量</h3><p>类变量也叫静态变量&#x2F;静态属性，是该类所有对象共享的变量，任何一个该类对象去访问它的时候，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的时同一个变量。</p><h3 id="如何定义类变量"><a href="#如何定义类变量" class="headerlink" title="如何定义类变量"></a>如何定义类变量</h3><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据类型 变量名 <span class="comment">//推荐这种方法</span></span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据类型 变量名</span><br></pre></td></tr></table></figure><p><strong>如何访问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.变量名 <span class="comment">//推荐</span></span><br><span class="line">对象名.类变量名</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类方法也叫静态方法</p><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据返回类型 方法名()&#123;&#125;推荐</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据返回类型 方法名()&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>如何调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.方法名 <span class="comment">//推荐</span></span><br><span class="line">对象名.方法名</span><br></pre></td></tr></table></figure><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率,比如：工具类中的方法utils,Math类、Arrays类、Collections集合类看下源码：,&gt;小结,在程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用,比如打印一维数组</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1）类方法中无this的参数,普通方法中隐含着this的参数,<br>2）类方法可以通过类名调用，也可以通过对象名调用。<br>3）普通方法和对象有关，需要通过对象名调用，比如对象名.方法名（参数），不能通过类名调用<br>4）<strong>类方法中不允许使用和对象有关的关键字，比如this和super。普通方法（成员方法）可以可以使用和对象有关的关键字</strong><br>5）类方法（静态方法）中只能访问静态变量或静态方法。<br>6）普通成员方法，既可以访问非静态成员，也可以访问静态成员。<br><strong>小结：静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员,（必须遵守访问权限）</strong></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a><strong>为什么需要继承</strong></h3><p>解决重复代码多、难以维护的问题<br><strong>目的</strong><br>代码重用、简化系统、减轻负担<br><strong>手段方法</strong><br>抽取共同的属性和方法 让子类继承</p><p><strong>使用细节：</strong><br>①子类<strong>继承了父类的所有属性和方法</strong>但是<strong>私有属性和方法不能在 子类中直接使用 要使用 公共方法间接的访问</strong> 子类只<strong>能直接使用非私有的属性和方法</strong><br><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(son.getM());<span class="comment">//子类想要获取父类的私有属性 就要使用父类提供的共有方法来间接访问父类的私有属性</span></span><br><span class="line">        son.f2(); <span class="comment">//子类想要使用父类的 私有方法 也需要 父类提供共有方法 间接的去调用父类的私有方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的f1 私有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span>&#123;</span><br><span class="line">        f1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <strong>子类必须调用父类的构造器 完成父类的初始化</strong></p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">//默认调用父类的无参数构造器 super(); 就算你没写 也默认有</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③当创建子类对象时候 <strong><font color='Rhodamine '>不管使用哪个子类的构造器 子类总是默认调用父类的无参数构造器完成父类的初始化</font></strong> 如果**<font color='Rhodamine '>父类没有提供无参数构造器</font>** 那么在子类的构造器中**<font color='Rhodamine '>必须用super取指定调用父类的构造器取完成父类的初始化</font>** 否则编译不会通过<br><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的有参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//父类中没有 无参数构造器  那么就必须要指定调用父类的哪个构造器</span></span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④如果希望显示的调用父类的构造器那么可以这样：super()&#x2F;&#x2F;参数列表</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的有参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="comment">//super() 显示的调用父类的构造器</span></span><br><span class="line">        <span class="built_in">super</span>(name,age); <span class="comment">//显示的调用父类的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤super在使用的时候需要放在构造器第一行</strong><br><strong>⑥super()和this()都只能放在构造器第一行 因此这两个方法不能存在于一个构造方法内</strong>**<br>⑦java所有的类都是 Object 的子类 可以调用Object 的公共方法<br>⑧java 构造器的调用不限于直接父类 会一直追溯到Object类（顶级父类）<br><strong>⑨java中 类只能实现单继承 如果要实现 c 继承 b 继承 a 那么 可以让 c 继承b  让b 继承 a那么c就继承a</strong></p><p><strong>示例</strong><br>这个例子也展示了 注意事项的 第⑧个 和第⑨个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参数构造器被调用&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的无参数构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C的无参数构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出顺序 A的无参数构造器 -&gt; B的无参数构造器 -&gt; C的无参数构造器</span></span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>如果父类的方法不能够满足子类的要求的话 子类可以重写这个方法 来满足自己的需要<br>当然也可以</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>被修饰的 变量不能被修改<br>被修饰的 方法不能被重写<br>被修饰的 类不能被继承</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p><strong>好处&#x2F;细节</strong><br>①调用父类构造器的好处是（分工明确，父类属性由父类初始化，子类属性由子类初始化）<br>②当子类中有和父类中的成员（属性或方法）<strong>重名的时候，为了访问父类成员，必须通过super</strong>。如果<strong>没有重名，使用super、this 直接访问</strong>是一样的效果</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="comment">//此时子类中由和父类重名的方法 那么优先调用子类的</span></span><br><span class="line">        <span class="comment">//如果 我把子类的f1 方法注释掉 那么只有父类 有f1方法 就调用父类的</span></span><br><span class="line">        son.f1();</span><br><span class="line">        <span class="comment">//如果父类和子类中都有 f1 方法 那么我想在子类中调用父类的 f1方法 那么就需要使用 super 关键字 【super.方法名】 来调用父类的f1方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的 f1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void f1() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;B类的f1方法&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查找  <strong>f1方法</strong>的顺序是:<br>①先查找本类中有没有 有则调用<br>②没有 则找父类（如果有 并且可以调用 则调用）<br>③<strong>如果父类没有 那么就继续找 父类的父类 一直这样 直到找到 Object类（顶级父类）</strong><br>如果整个过程找到了 不能访问 则报错<br>如果整个过程没找到 则提示方法不存在</p><p>③super的访问<strong>不限于 直接父类 如果 爷爷类和本类中有同名的成员 也可以使用super访问</strong>爷爷类的成员 如果<strong>父类和爷爷类中都有 同名成员 那么遵循就近原则</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son.f1(); <span class="comment">//父类和爷爷类 都有 遵循就近原则 访问父类的f1方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandFather</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷类的 f1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandFather</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的 f1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void f1() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;B类的f1方法&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/ZzzjhBlog/images/image-20240919222237379.png" alt="image-20240919222237379"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>①一个对象的编译类型和运行类型可以不一致<br>②编译类型在定义对象时，就确定了，不能改变<br>③运行类型是可以变化的<br>④编译类型看定义时  &#x3D; 的左边，运行类型 看 &#x3D; 的右边</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//animal1 的编译类型是Animal  运行类型是 Cat</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal1.cry(); <span class="comment">//运行时，这是执行到该行时 运行类型时 Cat 那么调用cry方法 就会找Cat 的cry()方法</span></span><br><span class="line">        <span class="comment">//animal1 的编译类型是Animal  运行类型是 Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        animal2.cry(); <span class="comment">//这个和上面一样 运行类型时 Dog 那么调用cry方法 就会找Dog 的cry()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 猫在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog cry() 狗在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/ZzzjhBlog/images/image-20240919223423463.png" alt="image-20240919223423463"></p><h3 id="多态的注意事项和细节"><a href="#多态的注意事项和细节" class="headerlink" title="多态的注意事项和细节"></a>多态的注意事项和细节</h3><p>多态的前提是：两个类存在继承关系</p><h4 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h4><p>①本质：父类的引用指向了子类的对象<br>②语法：父类类型  引用名 &#x3D; new 子类类型()；<br>③特点：编译看左边 运行看右边<br>  可以调用父类中的所有成员【要遵守访问权限】<br>  不能调用子类中特有成员<br>  最终运行效果看子类的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.catchMouse(); <span class="comment">//此时会报错 因为这个catchMouse 是子类的特有方法 因为在编译阶段能调用的成员 是由编译类型决定的</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 猫在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h4><p>①语法：子类类型 引用名 &#x3D; （子类类型） 父类引用；<br><strong>②只能强行转换 父类的应用 不能强行转换父类的对象</strong><br><strong>③要求父类的引用必须指向的是当前目标类型的对象</strong><br>④ 强转后 可以调用子类类型中所有的成员</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.catchMouse(); <span class="comment">//此时会报错 因为这个catchMouse 是子类的特有方法 因为在编译阶段能调用的成员 是由编译类型决定的</span></span><br><span class="line">        <span class="comment">//向下转型 如果要调用子类中的特有方法 需要向下转型</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal; <span class="comment">//此时编译类型 和 运行类型 都是Cat</span></span><br><span class="line">        cat.catchMouse(); <span class="comment">//此时就能调用子类中的特有方法</span></span><br><span class="line">        <span class="comment">//但是这样写不行 因为 父类的引用必须指向的是当前目标类型的对象 就是一开始 你的 编译类型是 Animal 运行类型是 Cat  那么这时候 向下转型 需要的是 当初 运行类型的对象 Cat cat = (Cat) animal;</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 猫在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性没有重写的说法 属性的值看 编译类型<br><strong>instance Of 比较操作符，可以用来判断对象的运行类型是否为（XX类型或者XX类型的子类型）</strong></p><p><strong>练习题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(son.count);</span><br><span class="line">        son.display();</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> son;</span><br><span class="line">        System.out.println(father == son);</span><br><span class="line">        System.out.println(father.count);</span><br><span class="line">        father.display();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//求输出的结果</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>首先创建 Son类型的对象 然后son对象中有父类的count 和子类的count 值分别是 10和20。</p><p> <strong>s.count</strong> 这个是访问属性 <strong>访问属性 看编译类型</strong> 此时编译类型是 Son 那么s.count就是20。</p><p> 然后就是 <strong>s.display()</strong> 此时调用方法 如果是 <strong>调用方法那么就是 看运行类型</strong>  此时运行类型是 Son，那么 s.display()中 输出 this.count 就是当前对象的 count 那么就是 20。</p><p>接下来是  <strong>Father father &#x3D; son;</strong> 此时 发生了**向上转型，向上转型结束后 此时的 编译类型是Father 运行类型是 Son **。 </p><p>接下来 **System.out.println(father &#x3D;&#x3D; son); **它们都指向同一个对象 所以输出trye</p><p>然后  <strong>father.count</strong>  这个是<strong>访问属性 看编译类型</strong> 而<strong>此时编译类型 是Father</strong> 那么 father.count 就是 10。</p><p>最后 <strong>faher.display()</strong> 这里是调用方法 此时的运行类型还是 Son 那就是调用 Son中的 display 方法。 this.count  this就是本身这个对象 所以 this.count 是20</p><p><strong>运行结果</strong><br><img src="/ZzzjhBlog/images/image-20240919232948433.png" alt="image-20240919232948433"></p><p><strong>java 动态绑定机制！！！！</strong></p><p>①<strong>当调用方法对象的时候</strong> 该<strong>方法会和该对象的内存地址&#x2F;运行类型绑定</strong><br>②<strong>当调用对象属性时</strong>，没有动态绑定机制，<strong>哪里声明，哪里使用</strong></p><p><strong>题目</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(father.sum());</span><br><span class="line">        System.out.println(father.sum1());</span><br><span class="line">        <span class="comment">//求输出的结果</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int sum() &#123;</span></span><br><span class="line"><span class="comment">        return i + 20;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>father.sum();</strong>    father <strong>编译类型是 Father</strong>  <strong>运行类型是 Son</strong>  <strong>调用方法 触发动态绑定机制</strong>   <strong>调用方法 看 运行类型</strong> 此时 Son中 sum 方法被注释掉  那么就会 向它的父类 Father 查找有没有 sum方法 结果 有 然后 <strong>执行 return getI() + 10;</strong>  又**发现 要调用 getI()方法 此时又触发动态绑定机制 **调用方法 看运行类型 <strong>那么调用的就是 运行类型 Son 的 getI()方法</strong> 获得 i的值 为 20；最终 输出 30；<br>然后下一个 <strong>father.sum1();</strong>  <strong>触发动态绑定机制  调用方法 看 运行类型</strong>  Son中 有sum1()方法<br>然后 i + 10 此时 i  在 Son 中声明了 那么就用 Son中 i 的值 20 .最后结果为 30；</p><p><strong>运行结果</strong><br><img src="/ZzzjhBlog/images/image-20240919234815441.png" alt="image-20240919234815441"></p><p><strong>改动题目</strong><br>将 子类的 sum1 也注释掉那么输出什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(father.sum1());</span><br><span class="line">        <span class="comment">//求输出的结果</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int sum() &#123;</span></span><br><span class="line"><span class="comment">        return i + 20;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int sum1() &#123;</span></span><br><span class="line"><span class="comment">        return i + 10;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>father.sum()   father <strong>编译类型是 Father</strong>  <strong>运行类型是 Son</strong>  <strong>调用方法 触发动态绑定机制</strong>   <strong>调用方法 看 运行类型</strong>  此时 Son中 sum1 方法被注释掉  那么就会 向它的父类 Father 查找有没有 sum1 方法 结果 有 那就执行Father 的sum1方法   <strong>return i + 10;</strong>  此时 i 在 Father 类中声明了 那么就是用 Father 中 i 的值 那就是 10； 最后返回结果时 20；</p><p><strong>运行结果：</strong><br><img src="/ZzzjhBlog/images/image-20240919235229646.png" alt="image-20240919235229646"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
