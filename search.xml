<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JUC并发编程</title>
      <link href="/ZzzjhBlog/2025/05/21/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/ZzzjhBlog/2025/05/21/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC并发编程"><a href="#JUC并发编程" class="headerlink" title="JUC并发编程"></a>JUC并发编程</h1><p>本笔记基于尚硅谷的JUC并发编程课程进行记录 <a href="https://www.bilibili.com/video/BV1ar4y1x727?spm_id_from=333.788.videopod.episodes&vd_source=ef265f71c814028c24da6779939cefbc">尚硅谷JUC并发编程（对标阿里P6-P7）_哔哩哔哩_bilibili</a></p><p>(更新中)</p><h2 id="什么是JUC？"><a href="#什么是JUC？" class="headerlink" title="什么是JUC？"></a>什么是JUC？</h2><p>JUC就是Java中<strong>java.util.concurrent、java.util.concurrent.aotmic、java.util.concurrent.lock</strong>，也就是java中的包、工具类</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/ZzzjhBlog/images/image-20250514214216532.png" alt="image-20250514214216532"></h2><h2 id="线程的基础知识复习"><a href="#线程的基础知识复习" class="headerlink" title="线程的基础知识复习"></a>线程的基础知识复习</h2><h3 id="线程start源码分析"><a href="#线程start源码分析" class="headerlink" title="线程start源码分析"></a>线程start源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadBaseDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start(); <span class="comment">//调用线程的start方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入start()源码进行分析<br><strong>源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">         * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">         * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    线程状态threadStatus为 0 表示 &quot;NEW&quot; 状态（线程尚未启动）。</span></span><br><span class="line"><span class="comment">    若线程已启动（threadStatus != 0），则抛出异常，确保线程只能启动一次。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">         * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">         * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    <span class="comment">// 将线程加入到线程组里面去</span></span><br><span class="line">        group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程启动成功的标识符</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用start0方法</span></span><br><span class="line">            start0();</span><br><span class="line">            <span class="comment">// 更新started标识符</span></span><br><span class="line">            started = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            线程启动前加入线程组，失败时从组中移除，保证资源一致性。</span></span><br><span class="line"><span class="comment">   使用finally块确保异常路径下的资源清理。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 我们可以看到 start0方法使用的是native进行修饰 那么native修饰的方法也被称为 本地方法 </span></span><br><span class="line"><span class="comment">本地方法是由 Java 声明但通过非 Java 语言（如 C、C++ 或汇编）实现的方法</span></span><br><span class="line"><span class="comment">这边就是jvm配合操作系统 分配了一个原生基础的线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java多线程的相关概念"><a href="#Java多线程的相关概念" class="headerlink" title="Java多线程的相关概念"></a>Java多线程的相关概念</h3><p><strong>锁：synchronized</strong></p><p><code>synchronized</code> 是 Java 中用于实现线程同步的关键字，可保证在同一时刻只有一个线程能访问被修饰的代码块或方法。它基于对象头的 Mark Word 实现锁机制，分为偏向锁、轻量级锁和重量级锁三个升级阶段，可有效避免多线程竞争导致的数据不一致问题。</p><p><strong>并行（Parallelism）</strong></p><p>并行是指<strong>多个处理器或多核处理器同时执行多个任务</strong>的能力。在并行环境中，多个线程或进程在物理上同时运行，通过硬件资源（如多核 CPU）实现真正的同时处理。例如，一个 4 核 CPU 可以同时执行 4 个线程，显著提升计算密集型任务的执行效率。</p><p><strong>并发（Concurrency）</strong></p><p>并发是指<strong>多个任务在同一时间段内交替执行</strong>的能力，通过操作系统的任务调度和时间片轮转实现。在单核处理器中，多个线程看似同时运行，但实际上是快速切换执行的。并发主要解决的是程序的响应性和资源利用率问题，适用于 I&#x2F;O 密集型任务（如网络请求、文件读写）。</p><p><strong>进程（Process）</strong></p><p>进程是程序在操作系统中的一次执行实例，是系统进行资源分配和调度的基本单位。每个进程都有独立的内存空间、文件描述符和系统资源，进程间通信（IPC）需要通过管道、消息队列、共享内存等机制实现。例如，打开一个浏览器就是启动了一个进程。</p><p><strong>线程（Thread）</strong></p><p>线程是进程中的一个执行单元，是 CPU 调度和分派的基本单位。一个进程可以包含多个线程，它们共享进程的内存空间和资源，但每个线程有独立的程序计数器、栈和局部变量。线程间通信比进程更高效，适合实现细粒度的并发任务。例如，浏览器中的渲染线程、网络请求线程等。</p><p><strong>管程（Monitor 监视器）</strong></p><p><strong>管程是一种同步机制</strong>，是用来<strong>保证同一时间只有一个线程可以访问被保护的数据或者代码</strong> 也就是锁<br>JVM中同步是基于<strong>进入和退出监视器对象Monitor来实现的 每一个对象实例都有一个Monitor对象</strong> 也就是每个new出来的对象都可以作为管程(Monitor)<br>Monitor会和Java对象一同创建销毁 底层是由C++实现的</p><p><strong>实例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadBaseDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 这边相当于谁持有这个o谁就能访问被保护的数据或者代码</span></span><br><span class="line">            <span class="comment">//o也就当于Monitor</span></span><br><span class="line">            <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">当方法调用的时候 会先检查是否设置synchronized 如果设置了，那么执行线程就需要先成功的持有管程，然后才能执行方法，最后当方法成功完成（无论是成功完成还是非成功完成）时释放管程。在执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><p>Java中线程分为两种分别是<strong>用户线程（User Thread）<strong>和</strong>守护线程（Daemon Thread）</strong>，一般情况下默认都是用户线程</p><p><strong>守护线程特性</strong></p><ul><li>守护线程为用户线程提供辅助服务，比如垃圾回收器（GC）线程。</li><li>当所有的用户线程都结束后，<strong>JVM 不会等待守护线程执行完毕，就会直接退出</strong>。</li><li>守护线程的设置必须在 <code>start()</code> 方法调用之前，通过 <code>setDaemon(true)</code> 方法设定。</li><li><code>setDaemon(false)</code> 表示普通线程（默认行为）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDaemonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DaemonThread</span>()); <span class="comment">// 创建守护线程</span></span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>); <span class="comment">// 设置为守护线程</span></span><br><span class="line">        daemonThread.start(); <span class="comment">// 启动守护线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">CommonThread</span>()).start(); <span class="comment">// 启动普通线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DaemonThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;守护线程执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommonThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;普通线程执行:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出说明</strong></p><p>在上述代码中：</p><ul><li><code>DaemonThread</code> 是一个守护线程，会不断输出“守护线程执行”。</li><li><code>CommonThread</code> 是一个普通线程，打印从 1 到 1000。</li><li>一旦 <code>CommonThread</code> 执行完毕，JVM 会终止，<strong>即使守护线程还在运行</strong>。</li></ul><p> <strong>常见的守护线程</strong></p><table><thead><tr><th>守护线程名称</th><th>说明</th></tr></thead><tbody><tr><td>垃圾回收线程（GC Thread）</td><td>JVM 自动管理内存时使用的线程</td></tr><tr><td>Finalizer 线程</td><td>用于执行对象的 <code>finalize()</code> 方法</td></tr><tr><td>Signal Dispatcher 线程</td><td>用于分发 JVM 信号事件</td></tr><tr><td>Attach Listener 线程</td><td>用于支持调试和诊断工具，比如 JConsole 或 VisualVM</td></tr></tbody></table><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><h3 id="Future接口的理论复习"><a href="#Future接口的理论复习" class="headerlink" title="Future接口的理论复习"></a>Future接口的理论复习</h3><p>Future接口（<strong>FutureTask</strong>）定义了<strong>操作异步任务执行方法</strong> 比如<strong>获取异步任务的返回值</strong>、<strong>取消任务执行</strong>、<strong>判断是否执行完毕</strong>等等</p><p><img src="/ZzzjhBlog/images/image-20250514230832106.png" alt="image-20250514230832106"></p><p>就像主线程让一个子线程执行任务，但是任务比较耗时，启动子线程后主线程执行别的东西去了，过了一段时间回来查看子线程任务执行的结果等等。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 案例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/14 23:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 首先我们这边需要创建一个子线程 进行异步/多线程/有返回值的任务</span></span><br><span class="line"><span class="comment">         * new Thread()这边需要传递Runnable接口的实现类 并且需要提供返回值</span></span><br><span class="line"><span class="comment">         * 顺着关系寻找 Runnable-&gt;RunnableFuture-&gt;FutureTask</span></span><br><span class="line"><span class="comment">         * 再FutureTask中它需要传入一个Callable接口的实现类 那么就可以提供返回值了  </span></span><br><span class="line"><span class="comment">         * Callable接口的实现类 实现call方法 call()方法的返回类型是V，这意味着它可以返回具体的数据结果。</span></span><br><span class="line"><span class="comment">         * 所以我们首先创建FutureTask 传入我们自己定义的Callable接口的实现类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">myCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myCallable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;线程名&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//最后通过futureTask获取返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果执行到这里 上面线程还没有执行完毕 这里的代码会暂停 等待上面线程执行完毕 才会继续往下执行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有返回值</span></span><br><span class="line"><span class="comment">// 不需要</span></span><br><span class="line"><span class="comment">/*class MyRunnable implements Runnable&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//这里线程睡眠3s 代表执行业务</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;执行完成结果是： xxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Future优缺点分析"><a href="#Future优缺点分析" class="headerlink" title="Future优缺点分析"></a>Future优缺点分析</h4><p><strong>优点：</strong></p><ul><li>可以结合线程池大大提高我们执行效率</li></ul><p><strong>缺点：</strong></p><ul><li>get()方法会导致阻塞 get()方法会阻塞到等待收到返回值位置 一般建议写在程序最后面</li><li>isDone()轮询 需要不停的轮询耗费CPU的资源</li></ul><p><strong>isDone() 轮询如图</strong></p><p><img src="/ZzzjhBlog/images/image-20250515210030902.png" alt="image-20250515210030902"></p><h3 id="CompletableFuture对于Future的异步优化改进"><a href="#CompletableFuture对于Future的异步优化改进" class="headerlink" title="CompletableFuture对于Future的异步优化改进"></a>CompletableFuture对于Future的异步优化改进</h3><p>上面说到Future的get()方法以及isDone()方法都有一定的缺陷，以及不能很好的使用多个异步线程任务的处理，所以有了<strong>CompletableFuture</strong>。</p><p><strong>CompletableFuture</strong> 是JDK8引入的，CompletableFuture<strong>提供了一种观察者模式类似的机制，可以让任务执行完成后通知监听者</strong></p><p>首先查看一下CompletableFuture这个类的关系图</p><p><img src="/ZzzjhBlog/images/image-20250515212123346.png" alt="image-20250515212123346"></p><p>图中可以看出它同时实现了Future接口和CompletionStage接口<br>相当于是它们两的合体 具备了对方不具备的功能</p><h4 id="CompletableFuture核心方法（四个）"><a href="#CompletableFuture核心方法（四个）" class="headerlink" title="CompletableFuture核心方法（四个）"></a>CompletableFuture核心方法（四个）</h4><p>首先CompletableFuture<strong>不推荐使用new来构建一个CompletableFuture实例</strong></p><p><strong>为什么不推荐？</strong></p><ol><li><strong>手动完成机制的局限性</strong><br>通过构造函数创建的 <code>CompletableFuture</code> 需要手动调用 <code>complete()</code> 或 <code>completeExceptionally()</code> 来触发完成状态。如果忘记调用，可能导致下游依赖任务永远阻塞。</li><li><strong>缺乏语义明确性</strong><br>相比静态工厂方法无法直观表达异步任务的执行逻辑，代码可读性较差。</li><li><strong>线程管理风险</strong><br>手动创建的 <code>CompletableFuture</code> 默认使用 <code>ForkJoinPool.commonPool()</code>，可能导致线程饥饿或性能问题，而静态工厂方法提供了更灵活的线程池配置选项。</li></ol><p>我们可以用以下四种方法来获取CompletableFuture<br>一  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 传入参数为Runnable类型 所以没有返回值 CompletableFuture&lt;Void&gt; 这边泛型是Void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> asyncRunStage(asyncPool, runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 传入参数为Runnable类型 所以没有返回值 CompletableFuture&lt;Void&gt; 这边泛型是Void</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable,</span></span><br><span class="line"><span class="params">                                                   Executor executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncRunStage(screenExecutor(executor), runnable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>三 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 传入参数为Supplier类型 有返回值 CompletableFuture&lt;Void&gt; 这边泛型是对于传进来的泛型</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncSupplyStage(asyncPool, supplier);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>四</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier,</span></span><br><span class="line"><span class="params">                                                       Executor executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> asyncSupplyStage(screenExecutor(executor), supplier);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第三个和第四个比较常用 因为有返回值</p><p>再其中传入参数有需要线程池的时候 如果你没有指定那么就使用默认的ForkJoinPoll.commonPool()提供的线程池 如果有指定了那么就是用指定的线程池</p><p><strong>示例：</strong></p><p>①runAsync 没有返回值 没有指定线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/15 21:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">       <span class="comment">// 使用没有返回值 不指定线程池的方法</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 输出的是 当前执行线程的名字： ForkJoinPool.commonPool-worker-1</span></span><br><span class="line">            <span class="comment">// 是由ForkJoinPool线程池提供的线程来执行的</span></span><br><span class="line">            System.out.println(<span class="string">&quot;当前执行线程的名字：+ &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取返回值 自然返回的是null</span></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②没有返回值 有指定线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/15 21:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 传入一个固定线程数量的线程池</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行结果 当前执行线程的名字：pool-1-thread-1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;当前执行线程的名字：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;, Executors.newFixedThreadPool(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回值  null</span></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③有返回值 没有指定线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/15 21:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 返回String类型的结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;当前执行的线程名字是&quot;</span> + Thread.currentThread().getName();</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">        <span class="comment">//当前执行的线程名字是ForkJoinPool.commonPool-worker-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>④有返回值 有指定线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/15 21:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建固定线程数的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 返回String类型的结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;当前执行的线程名字是&quot;</span> + Thread.currentThread().getName();</span><br><span class="line">        &#125;), fixedThreadPool);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">        <span class="comment">//当前执行的线程名字是ForkJoinPool.commonPool-worker-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Java8引入了CompletableFuture类  通过传入回调对象Supplier实现类以及使用指定线程池或者默认的线程池  解决了 Future阻塞过长以及轮询消耗CPU资源的问题</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/15 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureUseDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//自定义线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//获取一个uuid</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">            System.out.println(<span class="string">&quot;稍后马上生成结果&quot;</span>);</span><br><span class="line">            <span class="comment">// 这边睡眠2s</span></span><br><span class="line">            <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="comment">// 返回uuid</span></span><br><span class="line">            <span class="keyword">return</span> uuid;</span><br><span class="line">            <span class="comment">// 这边使用whenComplete可以很好的解决之前需要使用get来获取返回值而导致阻塞的问题</span></span><br><span class="line">        &#125;,fixedThreadPool).whenComplete((k,e)-&gt;&#123;</span><br><span class="line">            <span class="comment">// 判断如果上面没有抛出异常那么 打印uuid的值</span></span><br><span class="line">            <span class="keyword">if</span>(e == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行完成uuid=&quot;</span> + k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">            <span class="comment">// 如果抛出异常 捕获异常 打印异常信息</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 返回空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;先去做别的事情&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 这边会出现一个问题 就是可能没有打印出uuid程序就结束了 这是因为你主线程直接结束了 那么CompletableFuture默认使用的线程池就会关闭</span></span><br><span class="line"><span class="comment">         * 要么你这边让主线程不要那么快关闭 要么使用自定义的线程池</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//暂停3s</span></span><br><span class="line">    <span class="comment">//try&#123;Thread.sleep(3000);&#125; catch (InterruptedException e) &#123;e.printStackTrace();&#125;</span></span><br><span class="line">        <span class="comment">// 或者使用自定义的线程池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键就是whenComplete的使用</p><h4 id="JDK8函数式接口复习"><a href="#JDK8函数式接口复习" class="headerlink" title="JDK8函数式接口复习"></a>JDK8函数式接口复习</h4><p><img src="/ZzzjhBlog/images/image-20250515230907480.png" alt="image-20250515230907480"></p><p><strong>补充</strong><br>之前在使用CompletableFuture的时候通过get获取值 需要抛出异常因为程序要是中断了get会报错  我们可以使用 join()这个方法 避免要手动抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + Thread.currentThread().getName();</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(completableFuture.join());</span><br><span class="line">    &#125;s </span><br></pre></td></tr></table></figure><h3 id="CompletableFuture场景实战-电商比价"><a href="#CompletableFuture场景实战-电商比价" class="headerlink" title="CompletableFuture场景实战-电商比价"></a>CompletableFuture场景实战-电商比价</h3><p>1、需求<br>1.1 同一款产品，同时搜索出同款产品在各大平台电商的售价<br>1.2 同一款产品，同时搜索出本产品在同一个电商平台下，各个入驻的卖家售价是多少</p><p>2、输出结果<br>结果希望是同款产品在不同地方的价格清单列表 返回一个List<String><br>例如：<br>《mysql》 in jd price is 88.5<br>《mysql》 in taobao price is 91.35<br>《mysql》 in pdd price is 90.41</p><p>首先使用串行的方式来查看耗时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.nio.ch.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电商平台价格查询示例</span></span><br><span class="line"><span class="comment"> * 演示如何串行获取多个电商平台的商品价格</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/18 2:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化电商平台列表</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;NetMall&gt; netMallList = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;jd&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;pdd&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;taobao&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序入口方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 调用获取价格的方法</span></span><br><span class="line">        List&lt;String&gt; res = getPrice(netMallList, <span class="string">&quot;mysql&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出每个平台的价格信息</span></span><br><span class="line">        <span class="keyword">for</span> (String item : res) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;花费时间:%s 毫秒&quot;</span>, endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 串行获取多个电商平台的商品价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> netMallList 电商平台列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productName 商品名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含商品在各平台价格信息的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getPrice</span><span class="params">(List&lt;NetMall&gt; netMallList, String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> netMallList</span><br><span class="line">                .stream() <span class="comment">// 使用串行流处理列表元素</span></span><br><span class="line">                .map(netMall -&gt; String.format(productName + <span class="string">&quot;in %s price is %.2f&quot;</span>,</span><br><span class="line">                        netMall.getNetMallName(),</span><br><span class="line">                        netMall.getPrice(productName))) <span class="comment">// 映射每个平台的价格信息</span></span><br><span class="line">                .collect(Collectors.toList()); <span class="comment">// 收集结果到列表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电商平台类，模拟从不同电商平台获取商品价格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String netMallName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化电商平台名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> netMallName 电商平台名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMall</span><span class="params">(String netMallName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.netMallName = netMallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取电商平台名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 电商平台名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNetMallName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.netMallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商品价格（模拟网络请求，会休眠1秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productName 商品名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟网络请求延迟</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成随机价格，加入商品名称首字母的ASCII值使价格更有区分度</span></span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextDouble() * <span class="number">2</span> + productName.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">* mysqlin jd price is 110.34</span></span><br><span class="line"><span class="comment">* mysqlin pdd price is 109.01</span></span><br><span class="line"><span class="comment">* mysqlin taobao price is 110.96</span></span><br><span class="line"><span class="comment">* 花费时间:3144 毫秒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来使用CompletableFuture来优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.nio.ch.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电商平台价格查询示例</span></span><br><span class="line"><span class="comment"> * 演示如何串行获取多个电商平台的商品价格</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/18 2:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化电商平台列表</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;NetMall&gt; netMallList = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;jd&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;pdd&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;taobao&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序入口方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 命令行参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 调用获取价格的方法</span></span><br><span class="line">        List&lt;CompletableFuture&lt;String&gt;&gt; res = getPrice(netMallList, <span class="string">&quot;mysql&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出每个平台的价格信息</span></span><br><span class="line">        <span class="keyword">for</span> (CompletableFuture item : res) &#123;</span><br><span class="line">            System.out.println(item.join());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;花费时间:%s 毫秒&quot;</span>, endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并行获取多个电商平台的商品价格</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> netMallList  电商平台列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productName  商品名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 包含各平台返回字符串的 CompletableFuture 列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;CompletableFuture&lt;String&gt;&gt; <span class="title function_">getPrice</span><span class="params">(</span></span><br><span class="line"><span class="params">        List&lt;NetMall&gt; netMallList, String productName)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 将平台列表转换成 Stream</span></span><br><span class="line">    <span class="keyword">return</span> netMallList.stream()</span><br><span class="line">        <span class="comment">// 2. 对每个 NetMall，创建一个异步任务</span></span><br><span class="line">        .map(netMall -&gt;</span><br><span class="line">            CompletableFuture.supplyAsync(() -&gt; </span><br><span class="line">                <span class="comment">// 3. Supplier 中的逻辑：格式化输出商品名与平台价格</span></span><br><span class="line">                String.format(<span class="string">&quot;%s in %s price is %.2f&quot;</span>,</span><br><span class="line">                              productName,                    <span class="comment">// 商品名称</span></span><br><span class="line">                              netMall.getNetMallName(),       <span class="comment">// 平台名称</span></span><br><span class="line">                              netMall.getPrice(productName))  <span class="comment">// 同步调用 getPrice 获取价格（内部有 1s 延迟）</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 4. 将所有 CompletableFuture 收集到 List 中</span></span><br><span class="line">        .collect(Collectors.toList());           </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电商平台类，模拟从不同电商平台获取商品价格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String netMallName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化电商平台名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> netMallName 电商平台名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMall</span><span class="params">(String netMallName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.netMallName = netMallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取电商平台名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 电商平台名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNetMallName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.netMallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商品价格（模拟网络请求，会休眠1秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productName 商品名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 商品价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟网络请求延迟</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成随机价格，加入商品名称首字母的ASCII值使价格更有区分度</span></span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextDouble() * <span class="number">2</span> + productName.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* mysqlin jd price is 109.09</span></span><br><span class="line"><span class="comment">* mysqlin pdd price is 109.49</span></span><br><span class="line"><span class="comment">* mysqlin taobao price is 109.11</span></span><br><span class="line"><span class="comment">* 花费时间:1129 毫秒</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="关键代码分析"><a href="#关键代码分析" class="headerlink" title="关键代码分析"></a>关键代码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;CompletableFuture&lt;String&gt;&gt; <span class="title function_">getPrice</span><span class="params">(</span></span><br><span class="line"><span class="params">        List&lt;NetMall&gt; netMallList, String productName)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 将平台列表转换成 Stream</span></span><br><span class="line">    <span class="keyword">return</span> netMallList.stream()</span><br><span class="line">        <span class="comment">// 2. 对每个 NetMall，创建一个异步任务</span></span><br><span class="line">        .map(netMall -&gt;</span><br><span class="line">            <span class="comment">// CompletableFuture.supplyAsync：在 ForkJoinPool.commonPool() 中异步执行 Supplier，并返回其结果</span></span><br><span class="line">            CompletableFuture.supplyAsync(() -&gt; </span><br><span class="line">                <span class="comment">// 3. Supplier 中的逻辑：格式化输出商品名与平台价格</span></span><br><span class="line">                String.format(<span class="string">&quot;%s in %s price is %.2f&quot;</span>,</span><br><span class="line">                              productName,                    <span class="comment">// 商品名称</span></span><br><span class="line">                              netMall.getNetMallName(),       <span class="comment">// 平台名称</span></span><br><span class="line">                              netMall.getPrice(productName))  <span class="comment">// 同步调用 getPrice 获取价格（内部有 1s 延迟）</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 4. 将所有 CompletableFuture 收集到 List 中</span></span><br><span class="line">        .collect(Collectors.toList());           <span class="comment">// 相当于 Stream 的终端操作，将结果转换为</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ol><li><strong>任务提交</strong>：<code>supplyAsync()</code> 方法会将 Lambda 表达式中的代码包装成一个异步任务</li><li><strong>线程池处理</strong>：默认情况下，这个任务会由 <code>ForkJoinPool.commonPool()</code> 中的工作线程执行 当然你也可以自定义线程池</li><li><strong>并行执行</strong>：由于每个 <code>CompletableFuture</code> 任务都在独立线程中执行，多个电商平台的价格查询会并行进行</li></ol><h4 id="性能提升原理"><a href="#性能提升原理" class="headerlink" title="性能提升原理"></a>性能提升原理</h4><ol><li><strong>并行执行 vs 串行执行</strong></li></ol><table><thead><tr><th>模式</th><th>执行方式</th><th>耗时（3 个平台）</th></tr></thead><tbody><tr><td><strong>串行</strong></td><td>逐个平台顺序执行，每个平台耗时 1 秒</td><td>约 3000 毫秒</td></tr><tr><td><strong>并行（当前代码）</strong></td><td>3 个平台任务并行执行</td><td>约 1000-1200 毫秒</td></tr></tbody></table><ol start="2"><li><strong>关键机制</strong></li></ol><ul><li><strong>线程池</strong>：<code>CompletableFuture</code> 默认使用 <code>ForkJoinPool.commonPool()</code>，利用多核 CPU 并行处理任务。</li><li><strong>异步非阻塞</strong>：主线程提交任务后无需等待，任务在后台线程执行，主线程可继续处理其他逻辑（本例中为循环获取结果）。</li><li><strong>I&#x2F;O 密集型优化</strong>：模拟的 <code>getPrice</code> 方法包含 <code>Thread.sleep(1000)</code>（I&#x2F;O 等待），并行执行可充分利用线程池中的空闲线程，减少整体等待时间。</li></ul><h3 id="CompletableFuture常用方法"><a href="#CompletableFuture常用方法" class="headerlink" title="CompletableFuture常用方法"></a>CompletableFuture常用方法</h3><h4 id="1、获得计算结果和触发计算"><a href="#1、获得计算结果和触发计算" class="headerlink" title="1、获得计算结果和触发计算"></a>1、获得计算结果和触发计算</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableApiDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//get()阻塞 知道获取结果为止</span></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">        <span class="comment">// get()阻塞 等待一定时间 如果没有得到结果那么抛出TimeOutException异常</span></span><br><span class="line">        System.out.println(completableFuture.get(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// 效果和get()一致 只不过这个不用手动抛出异常</span></span><br><span class="line">        System.out.println(completableFuture.join());</span><br><span class="line">        <span class="comment">// 立即获取结果 如果没有值 那么就返回 &quot;xxx&quot;</span></span><br><span class="line">        System.out.println(completableFuture.getNow(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">        <span class="comment">//是否立即打断 get()方法 返回 传入的值</span></span><br><span class="line">        System.out.println(completableFuture.complete(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、对计算结果进行处理"><a href="#2、对计算结果进行处理" class="headerlink" title="2、对计算结果进行处理"></a>2、对计算结果进行处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 对计算结果进行处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/19 23:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableApiDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//theApply()  传入泛型的一个参数   计算结果存在依赖关系 可以让线程实行串行化  遇到异常就暂停了</span></span><br><span class="line">        CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前执行线程名字是：%s&quot;</span>,Thread.currentThread().getName()));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;,fixedThreadPool).thenApply(k -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;第一步结果是：%s&quot;</span>, k));</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前执行线程名字是：%s&quot;</span>,Thread.currentThread().getName()));</span><br><span class="line">            System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">        &#125;).thenApply(k -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;第二步结果是：%s&quot;</span>, k));</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前执行线程名字是：%s&quot;</span>,Thread.currentThread().getName()));</span><br><span class="line">            <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">        &#125;).whenComplete((k,e)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(e == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;最终结果是：%s&quot;</span>, k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).exceptionally(e-&gt;&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//handle()  计算结果存在依赖关系 可以让线程实行串行化  遇到异常可以继续执行 带着异常的参数继续执行</span></span><br><span class="line"></span><br><span class="line">        CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前执行线程名字是：%s&quot;</span>,Thread.currentThread().getName()));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;,fixedThreadPool).handle((k,e) -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;第一步结果是：%s&quot;</span>, k));</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前执行线程名字是：%s&quot;</span>,Thread.currentThread().getName()));</span><br><span class="line">            System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">        &#125;).handle((k,e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(e != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;第二步结果是：%s&quot;</span>, k));</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前执行线程名字是：%s&quot;</span>,Thread.currentThread().getName()));</span><br><span class="line">            <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">        &#125;).whenComplete((k,e)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(e == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;最终结果是：%s&quot;</span>, k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).exceptionally(e-&gt;&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//exceptionally 相当于(==) try catch</span></span><br><span class="line">        <span class="comment">// whenCompletable + handle 相当于(==) try finally</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、对计算结果进行消费"><a href="#3、对计算结果进行消费" class="headerlink" title="3、对计算结果进行消费"></a>3、对计算结果进行消费</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 对计算结果进行消费</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/20 23:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableApiDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;).thenApply(f-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">1</span>;</span><br><span class="line">        &#125;).thenAccept(k-&gt;&#123; <span class="comment">//thenAccept() 消费型函数接口 一个参数 没有返回值</span></span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;结果是:%s&quot;</span>,k));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对比</strong></p><p><img src="/ZzzjhBlog/images/image-20250520231022786.png" alt="image-20250520231022786"></p><h4 id="CompletableFuture和线程池说明"><a href="#CompletableFuture和线程池说明" class="headerlink" title="CompletableFuture和线程池说明"></a>CompletableFuture和线程池说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: CompletableFuture和线程池说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/20 23:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableApiDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 这边以theRun() 以及 theRunAsync()进行演示 有说明区别</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先是theRun()</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;1号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;2号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(completableFuture.join());</span><br><span class="line">        <span class="comment">// 这边贴上运行结果</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1号任务当前运行的线程名:main</span></span><br><span class="line"><span class="comment">         * 2号任务当前运行的线程名:main</span></span><br><span class="line"><span class="comment">         * 3号任务当前运行的线程名:main</span></span><br><span class="line"><span class="comment">         * null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;1号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;2号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(completableFuture1.join());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//使用自定义线程池  全部使用thenRunAsync</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;,fixedThreadPool).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;1号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;2号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(completableFuture2.join());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;,fixedThreadPool).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;1号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;2号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;).thenRunAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;3号任务当前运行的线程名:%s&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(completableFuture3.join());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fixedThreadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>then***()</th><th>then***Async()（无参）</th><th>then***Async()（带 Executor）</th></tr></thead><tbody><tr><td><strong>提交方式</strong></td><td>同步调用或当前阶段完成线程</td><td>异步提交到公共线程池</td><td>异步提交到指定线程池</td></tr><tr><td><strong>是否在线程池中执行</strong></td><td>否</td><td>是</td><td>是</td></tr><tr><td><strong>执行线程</strong></td><td>调用线程 &#x2F; 完成线程</td><td><code>ForkJoinPool.commonPool()</code> 线程</td><td>指定 Executor 的线程</td></tr><tr><td><strong>线程切换开销</strong></td><td>最低</td><td>存在线程切换开销</td><td>存在线程切换开销</td></tr><tr><td><strong>上下文隔离与并行度控制</strong></td><td>无</td><td>公共线程池，隔离有限</td><td>可自定义隔离与并行度</td></tr></tbody></table><h4 id="4、对计算速度进行选用"><a href="#4、对计算速度进行选用" class="headerlink" title="4、对计算速度进行选用"></a>4、对计算速度进行选用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: CompletableFuture对计算结果速度选用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/21 20:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableApiDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这边提交两个异步的任务</span></span><br><span class="line"><span class="comment">         * 使用applyToEither()这个api来判断哪一个任务先执行完</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交任务A</span></span><br><span class="line">        CompletableFuture&lt;String&gt; a = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 假设执行任务耗时 4s</span></span><br><span class="line">            <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">4000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//提交任务B</span></span><br><span class="line">        CompletableFuture&lt;String&gt; b = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 假设执行任务耗时 2s</span></span><br><span class="line">            <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; res = a.applyToEither(b, f -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;先执行完的任务是:%s&quot;</span>, f);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(res.join());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 运行结果</span></span><br><span class="line"><span class="comment">         * 先执行完的任务是:B</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、对计算结果进行合并"><a href="#5、对计算结果进行合并" class="headerlink" title="5、对计算结果进行合并"></a>5、对计算结果进行合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: CompletableFuture对计算结果进行合并</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/21 21:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableApiDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 两个任务完成后 最终把两个任务的结果一起交给thenCombine来处理 如果有一个先完成了那么就先等待着 等待其他分支任务完成然后一起提交</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//首先提交任务A</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 提交任务B</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用thenCombine()进行相结合</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; res = a.thenCombine(b, (resA, resB) -&gt; &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;任务A的结果:%s&quot;</span>, resA));</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;任务A的结果:%s&quot;</span>, resB));</span><br><span class="line">            <span class="keyword">return</span> resA + resB;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;合并后的结果%s,&quot;</span>,res.join()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java中的锁"><a href="#Java中的锁" class="headerlink" title="Java中的锁"></a>Java中的锁</h2><h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><p><strong>悲观锁</strong></p><p>描述：悲观锁就是认为<strong>每次访问共享数据都会发生线程安全问题，所以每次都会进行加锁操作知道操作完成释放锁</strong>。像synchronized和Lock的实现类都是悲观锁</p><p><strong>乐观锁</strong></p><p>描述：乐观锁就是认为<strong>自己在操作共享资源的时候不会有别的线程来操作修改数据，所以不加锁。</strong></p><p>在Java中乐观锁是采用<strong>无锁编程</strong>来进行一个实现的，就是在<strong>更新数据的时候去判断一下在我自己修改数据的期间是否有别的线程修改了这个数据</strong>。如果校验通过，则执行更新；如果校验失败（说明有冲突），则根据策略重试或放弃操作。</p><p>乐观锁在 Java 中通常通过**无锁编程（Lock-Free）**和**版本号 &#x2F; 时间戳机制**实现，核心手段是 <strong>CAS（Compare-And-Swap，比较并交换）</strong> 操作。</p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/21 23:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建资源类对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="comment">// 创建子线程一并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 调用资源类中发送邮件方法</span></span><br><span class="line">            phone.sendEmail();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建子线程二并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//调用子线程中发送短信方法</span></span><br><span class="line">            phone.sendSMS();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 运行结果</span></span><br><span class="line"><span class="comment">         * sendEmail</span></span><br><span class="line"><span class="comment">         * sendSMS</span></span><br><span class="line"><span class="comment">         * 先输出sendEmail 后输出sendSMS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换一种测试方法 在sendEmail中让线程睡眠一段时间</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 运行结果</span></span><br><span class="line"><span class="comment">         * sendEmail</span></span><br><span class="line"><span class="comment">         * sendSMS</span></span><br><span class="line"><span class="comment">         * 还是一样的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析</span></span><br><span class="line"><span class="comment">         * 首先synchronized同步锁修饰方法 你没有指定锁的对象 那么默认是使用当前对象 this作为锁对象（成员方法中）  如果是类方法那么默认就是类的class对象</span></span><br><span class="line"><span class="comment">         * 这边案例中</span></span><br><span class="line"><span class="comment">         * synchronized 修饰成员方法 默认使用 当前对象 this作为锁</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在发送邮件中不睡眠情况：子线程一启动 获得到锁对象 执行发送邮件方法 在完成之前不会释放锁对象 那么子线程二也就无法获得锁对象 只能处于阻塞状态 自然不能执行发送短信方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在发送邮件中睡眠情况：子线程一启动 获得到锁对象 执行发送邮件方法 睡眠2s 执行sleep()方法时候（Object的wait()方法会释放锁对象 不过执行前需要先执行Object的otify()方法 来唤醒其他线程） 是不会释放锁对象的 所以线程二还是没办法获得锁 只能阻塞 等到线程一苏醒执行完释放锁后 才能获得锁执行发送邮件方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建子线程三</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 执行不加synchronized修饰的方法</span></span><br><span class="line">            phone.hello();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         * hello</span></span><br><span class="line"><span class="comment">         * sendEmail</span></span><br><span class="line"><span class="comment">         * sendSMS</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * hello先执行完 因为他不需要进行 获取锁 也就不会被阻塞</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在创建一个Phone资源对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;资源对象2执行发送短信方法&quot;</span>);</span><br><span class="line">            <span class="comment">//执行发送短信方法</span></span><br><span class="line">            phone2.sendSMS();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果分析</span></span><br><span class="line"><span class="comment">         * hello</span></span><br><span class="line"><span class="comment">         * 资源对象2执行发送短信方法</span></span><br><span class="line"><span class="comment">         * sendSMS</span></span><br><span class="line"><span class="comment">         * sendEmail</span></span><br><span class="line"><span class="comment">         * sendSMS</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 因为synchronized 修饰成员方法的时候是默认用 当前对象进行加锁  但是 phone对象 和 phone2对象在内存中不是同一个对象 所以phone2对象调用发送短信方法 不会被阻塞 不需要等待</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建子线程四并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            Phone.hi();</span><br><span class="line">        &#125;,<span class="string">&quot;子线程四&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建子线程五并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            Phone.hi();</span><br><span class="line">        &#125;,<span class="string">&quot;子线程五&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果分析：</span></span><br><span class="line"><span class="comment">         * 子线程四</span></span><br><span class="line"><span class="comment">         * hi</span></span><br><span class="line"><span class="comment">         * 子线程五</span></span><br><span class="line"><span class="comment">         * hi</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 此时调用的是类的静态方法 synchronized修饰静态方法的时候 默认使用 当前类的class对象作为锁 类的class对象只有一个 所以此时就会发送锁的竞争 先获取到锁的可以先执行 没获取到的只能阻塞</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不睡眠</span></span><br><span class="line">   <span class="comment">/* public synchronized void sendEmail()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;sendEmail&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//睡眠</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关键区别"><a href="#关键区别" class="headerlink" title="关键区别"></a>关键区别</h4><table><thead><tr><th><strong>场景</strong></th><th><strong>锁对象</strong></th><th><strong>是否互斥（互相阻塞）</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>同一实例的同步方法</td><td>同一个 <code>this</code></td><td>✅ 是互斥的</td><td>同一个对象的多个 <code>synchronized</code> 实例方法共享一把锁（即该对象），只能一个线程执行。</td></tr><tr><td>不同实例的同步方法</td><td>不同的 <code>this</code></td><td>❌ 否互斥</td><td>每个实例有自己的锁，不同对象的同步方法不会互相影响。</td></tr><tr><td>静态同步方法（不管是哪个实例）</td><td><code>Class</code> 对象锁</td><td>✅ 是互斥的</td><td>所有静态方法共享的是类的 <code>.class</code> 对象锁，类级别唯一。</td></tr></tbody></table><hr><p>📌 <strong>进一步补充：</strong></p><p>🔒 锁的本质</p><ul><li>实例方法的 <code>synchronized</code> —— 锁的是 <strong>对象实例 (<code>this</code>)</strong>。</li><li>静态方法的 <code>synchronized</code> —— 锁的是 <strong>类对象 (<code>Class</code> 对象)</strong>，即 <code>YourClass.class</code>。</li><li>同步代码块 <code>synchronized(lockObj)</code> —— 锁的是指定的 <strong>lockObj 对象</strong>，可以自定义控制粒度</li></ul><p><strong>为什么每个对象都可以作为锁？</strong></p><p>首先每个对象天生都带着一个对象监视器</p><p><img src="/ZzzjhBlog/images/image-20250524202438829.png" alt="image-20250524202438829"></p><h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p><strong>使用ReentrantLock卖票演示公平和非公平</strong></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/22 22:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                ticket.saleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                ticket.saleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                ticket.saleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;c&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         * a买了第50张票,还剩49张票</span></span><br><span class="line"><span class="comment">         * a买了第49张票,还剩48张票</span></span><br><span class="line"><span class="comment">         * a买了第48张票,还剩47张票</span></span><br><span class="line"><span class="comment">         * a买了第47张票,还剩46张票</span></span><br><span class="line"><span class="comment">         * a买了第46张票,还剩45张票</span></span><br><span class="line"><span class="comment">         * a买了第45张票,还剩44张票</span></span><br><span class="line"><span class="comment">         * a买了第44张票,还剩43张票</span></span><br><span class="line"><span class="comment">         * a买了第43张票,还剩42张票</span></span><br><span class="line"><span class="comment">         * a买了第42张票,还剩41张票</span></span><br><span class="line"><span class="comment">         * a买了第41张票,还剩40张票</span></span><br><span class="line"><span class="comment">         * a买了第40张票,还剩39张票</span></span><br><span class="line"><span class="comment">         * a买了第39张票,还剩38张票</span></span><br><span class="line"><span class="comment">         * a买了第38张票,还剩37张票</span></span><br><span class="line"><span class="comment">         * a买了第37张票,还剩36张票</span></span><br><span class="line"><span class="comment">         * a买了第36张票,还剩35张票</span></span><br><span class="line"><span class="comment">         * a买了第35张票,还剩34张票</span></span><br><span class="line"><span class="comment">         * a买了第34张票,还剩33张票</span></span><br><span class="line"><span class="comment">         * a买了第33张票,还剩32张票</span></span><br><span class="line"><span class="comment">         * a买了第32张票,还剩31张票</span></span><br><span class="line"><span class="comment">         * a买了第31张票,还剩30张票</span></span><br><span class="line"><span class="comment">         * a买了第30张票,还剩29张票</span></span><br><span class="line"><span class="comment">         * a买了第29张票,还剩28张票</span></span><br><span class="line"><span class="comment">         * a买了第28张票,还剩27张票</span></span><br><span class="line"><span class="comment">         * a买了第27张票,还剩26张票</span></span><br><span class="line"><span class="comment">         * a买了第26张票,还剩25张票</span></span><br><span class="line"><span class="comment">         * a买了第25张票,还剩24张票</span></span><br><span class="line"><span class="comment">         * a买了第24张票,还剩23张票</span></span><br><span class="line"><span class="comment">         * a买了第23张票,还剩22张票</span></span><br><span class="line"><span class="comment">         * a买了第22张票,还剩21张票</span></span><br><span class="line"><span class="comment">         * a买了第21张票,还剩20张票</span></span><br><span class="line"><span class="comment">         * a买了第20张票,还剩19张票</span></span><br><span class="line"><span class="comment">         * a买了第19张票,还剩18张票</span></span><br><span class="line"><span class="comment">         * a买了第18张票,还剩17张票</span></span><br><span class="line"><span class="comment">         * a买了第17张票,还剩16张票</span></span><br><span class="line"><span class="comment">         * a买了第16张票,还剩15张票</span></span><br><span class="line"><span class="comment">         * a买了第15张票,还剩14张票</span></span><br><span class="line"><span class="comment">         * a买了第14张票,还剩13张票</span></span><br><span class="line"><span class="comment">         * a买了第13张票,还剩12张票</span></span><br><span class="line"><span class="comment">         * a买了第12张票,还剩11张票</span></span><br><span class="line"><span class="comment">         * a买了第11张票,还剩10张票</span></span><br><span class="line"><span class="comment">         * a买了第10张票,还剩9张票</span></span><br><span class="line"><span class="comment">         * a买了第9张票,还剩8张票</span></span><br><span class="line"><span class="comment">         * a买了第8张票,还剩7张票</span></span><br><span class="line"><span class="comment">         * a买了第7张票,还剩6张票</span></span><br><span class="line"><span class="comment">         * a买了第6张票,还剩5张票</span></span><br><span class="line"><span class="comment">         * a买了第5张票,还剩4张票</span></span><br><span class="line"><span class="comment">         * a买了第4张票,还剩3张票</span></span><br><span class="line"><span class="comment">         * a买了第3张票,还剩2张票</span></span><br><span class="line"><span class="comment">         * a买了第2张票,还剩1张票</span></span><br><span class="line"><span class="comment">         * a买了第1张票,还剩0张票</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 可以看到a一个人买了全部的票 b和c都没买到 这就是非公平锁导致的  抢夺锁 获得锁的机率不公平</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这边我们可以创建 ReentrantLock的时候 传一个 true参数 就是代表公平</span></span><br><span class="line">        <span class="comment">//此时加完 我们在看结果</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * a买了第50张票,还剩49张票</span></span><br><span class="line"><span class="comment">         * c买了第49张票,还剩48张票</span></span><br><span class="line"><span class="comment">         * b买了第48张票,还剩47张票</span></span><br><span class="line"><span class="comment">         * a买了第47张票,还剩46张票</span></span><br><span class="line"><span class="comment">         * c买了第46张票,还剩45张票</span></span><br><span class="line"><span class="comment">         * b买了第45张票,还剩44张票</span></span><br><span class="line"><span class="comment">         * a买了第44张票,还剩43张票</span></span><br><span class="line"><span class="comment">         * c买了第43张票,还剩42张票</span></span><br><span class="line"><span class="comment">         * b买了第42张票,还剩41张票</span></span><br><span class="line"><span class="comment">         * a买了第41张票,还剩40张票</span></span><br><span class="line"><span class="comment">         * c买了第40张票,还剩39张票</span></span><br><span class="line"><span class="comment">         * b买了第39张票,还剩38张票</span></span><br><span class="line"><span class="comment">         * a买了第38张票,还剩37张票</span></span><br><span class="line"><span class="comment">         * c买了第37张票,还剩36张票</span></span><br><span class="line"><span class="comment">         * b买了第36张票,还剩35张票</span></span><br><span class="line"><span class="comment">         * a买了第35张票,还剩34张票</span></span><br><span class="line"><span class="comment">         * c买了第34张票,还剩33张票</span></span><br><span class="line"><span class="comment">         * b买了第33张票,还剩32张票</span></span><br><span class="line"><span class="comment">         * a买了第32张票,还剩31张票</span></span><br><span class="line"><span class="comment">         * c买了第31张票,还剩30张票</span></span><br><span class="line"><span class="comment">         * b买了第30张票,还剩29张票</span></span><br><span class="line"><span class="comment">         * a买了第29张票,还剩28张票</span></span><br><span class="line"><span class="comment">         * c买了第28张票,还剩27张票</span></span><br><span class="line"><span class="comment">         * b买了第27张票,还剩26张票</span></span><br><span class="line"><span class="comment">         * a买了第26张票,还剩25张票</span></span><br><span class="line"><span class="comment">         * c买了第25张票,还剩24张票</span></span><br><span class="line"><span class="comment">         * b买了第24张票,还剩23张票</span></span><br><span class="line"><span class="comment">         * a买了第23张票,还剩22张票</span></span><br><span class="line"><span class="comment">         * c买了第22张票,还剩21张票</span></span><br><span class="line"><span class="comment">         * b买了第21张票,还剩20张票</span></span><br><span class="line"><span class="comment">         * a买了第20张票,还剩19张票</span></span><br><span class="line"><span class="comment">         * c买了第19张票,还剩18张票</span></span><br><span class="line"><span class="comment">         * b买了第18张票,还剩17张票</span></span><br><span class="line"><span class="comment">         * a买了第17张票,还剩16张票</span></span><br><span class="line"><span class="comment">         * c买了第16张票,还剩15张票</span></span><br><span class="line"><span class="comment">         * b买了第15张票,还剩14张票</span></span><br><span class="line"><span class="comment">         * a买了第14张票,还剩13张票</span></span><br><span class="line"><span class="comment">         * c买了第13张票,还剩12张票</span></span><br><span class="line"><span class="comment">         * b买了第12张票,还剩11张票</span></span><br><span class="line"><span class="comment">         * a买了第11张票,还剩10张票</span></span><br><span class="line"><span class="comment">         * c买了第10张票,还剩9张票</span></span><br><span class="line"><span class="comment">         * b买了第9张票,还剩8张票</span></span><br><span class="line"><span class="comment">         * a买了第8张票,还剩7张票</span></span><br><span class="line"><span class="comment">         * c买了第7张票,还剩6张票</span></span><br><span class="line"><span class="comment">         * b买了第6张票,还剩5张票</span></span><br><span class="line"><span class="comment">         * a买了第5张票,还剩4张票</span></span><br><span class="line"><span class="comment">         * c买了第4张票,还剩3张票</span></span><br><span class="line"><span class="comment">         * b买了第3张票,还剩2张票</span></span><br><span class="line"><span class="comment">         * a买了第2张票,还剩1张票</span></span><br><span class="line"><span class="comment">         * c买了第1张票,还剩0张票</span></span><br><span class="line"><span class="comment">         * 这样就公平了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>&#123;</span><br><span class="line">    <span class="comment">// 票的总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="comment">// 非公平的Lock锁</span></span><br><span class="line">    <span class="comment">//private ReentrantLock lock = new ReentrantLock();</span></span><br><span class="line">    <span class="comment">// 公平的Lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleTicket</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//卖出一张票</span></span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;%s买了第%s张票,还剩%s张票&quot;</span>,Thread.currentThread().getName(),number,--number));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个例子大概了解公平锁和非公平锁的意思</p><h3 id="公平锁和非公平锁-1"><a href="#公平锁和非公平锁-1" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>公平锁就是<strong>多个线程按照申请锁的顺序来获取锁，类似排队买票。先来先到，后来的排队等待</strong>。Java中可以使用<code>ReentrantLock lock = new ReentrantLock(true);</code> &#x2F;&#x2F;trye;来构建一个公平锁</p><h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h4><p>非公平锁就是<strong>多个线程获取锁不是按照申请顺序获取的，有可能后申请的线程比先申请的获取到锁，造成了优先级反转或者饥饿的状态（某个线程一致获取不到锁）</strong>。Java中可以用<code>ReentrantLock lock = new ReentrantLock();</code>&#x2F;&#x2F;false 表示非公平锁</p><h4 id="为什么会有公平锁和非公平锁？"><a href="#为什么会有公平锁和非公平锁？" class="headerlink" title="为什么会有公平锁和非公平锁？"></a>为什么会有公平锁和非公平锁？</h4><p>①在多线程使用的时候对于<strong>线程的切换开销是非常重要的一个考量点</strong>，采用非公平锁的时候，<strong>当1个线程请求锁获取同步状态，然后操作完释放同步状态，刚释放的线程在此刻再一次获取到同步状态的机率非常的大，因为可以减少线程切换的开销</strong></p><p>②<strong>恢复挂起的线程到获取锁的时候 这个中间是有一个时间差的</strong>，虽然我们自己看起来很短，但是对于CPU来说，这个时间差存在还是很明显的，所以<strong>公平锁可以更充分的利用CPU的时间片，减少CPU的空闲状态时间</strong>。</p><h4 id="什么时候使用非公平锁，什么时候使用公平锁？"><a href="#什么时候使用非公平锁，什么时候使用公平锁？" class="headerlink" title="什么时候使用非公平锁，什么时候使用公平锁？"></a>什么时候使用非公平锁，什么时候使用公平锁？</h4><p>如果想要系统性能更好，有更高的吞吐量，很想让非公平锁比较合适，因为节省了很多线程的切换时间。<br>如果考虑公平的化就使用公平锁。</p><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>可重入锁（Reentrant Lock）<strong>同一个线程在持有锁的情况下，能多次重复获取同一把锁而不会被阻塞</strong>的机制。<br>Java中 <strong>synchronized和ReetrantLock</strong>都是可重入锁</p><h4 id="可重入锁的种类"><a href="#可重入锁的种类" class="headerlink" title="可重入锁的种类"></a>可重入锁的种类</h4><p><strong>隐式锁</strong>：synchronized使用的锁 默认就是可重入锁 就是同步代码块、同步方法等等</p><p><img src="/ZzzjhBlog/images/image-20250522233025898.png" alt="image-20250522233025898"><br><img src="/ZzzjhBlog/images/image-20250522233038524.png" alt="image-20250522233038524"></p><p><strong>显式锁</strong>：Lock 像ReentrantLock这样的可重入锁</p><p><strong>synchronized可重入锁的原理机制</strong></p><p>每个锁对象拥有一个<strong>锁计数器</strong>和一个指向<strong>持有该锁的线程的指针</strong>。</p><p>当执行 monitorenter 时，如果目标锁对象的计数器为零，那么说明它没有被其他线程所持有，Java 虚拟机会将该锁对象的持有线程设置为当前线程，并且将其计数器加 1。</p><p>在目标锁对象的计数器不为零的情况下，如果锁对象的持有线程是当前线程，那么 Java 虚拟机可以将其计数器加 1，否则需要等待，直至持有线程释放该锁。</p><p>当执行 monitorexit 时，Java 虚拟机则需将锁对象的计数器减 1。计数器为零代表锁已被释放。</p><h3 id="死锁以及排查"><a href="#死锁以及排查" class="headerlink" title="死锁以及排查"></a>死锁以及排查</h3><h4 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h4><p>死锁就是两个线程互相持有对方想要的锁 双方也不会释放锁 导致互相等待 造成死锁<br><img src="/ZzzjhBlog/images/image-20250523232737635.png" alt="image-20250523232737635"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/23 23:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objectA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objectB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectA)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功获得锁A 尝试获得锁B&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (objectB)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;成功获得锁B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectB)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功获得锁B 尝试获得锁A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (objectA)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;成功获得锁A&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何排查死锁可以在控制台使用以下命令来查看信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在终端输入jps 相当于 虚拟机中 ps -ef | grep java查看java进程的 会显示出所有Java进程</span></span><br><span class="line"> jps -l</span><br><span class="line"></span><br><span class="line"><span class="number">25552</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line"><span class="number">13460</span></span><br><span class="line"><span class="number">21320</span> sun.tools.jps.Jps</span><br><span class="line"><span class="number">15832</span> juc.DeadLockDemo</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以看到我们这次案例的进程  26824 juc.DeadLockDemo</span></span><br><span class="line"><span class="comment">// jstack -pid 查看它的堆栈信息</span></span><br><span class="line"> jstack <span class="number">15832</span>  </span><br></pre></td></tr></table></figure><p>控制台输出信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">        at juc.DeadLockDemo.lambda$main$<span class="number">1</span>(DeadLockDemo.java:<span class="number">31</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x000000076b4b4b98</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x000000076b4b4ba8</span>&gt; (a java.lang.Object)</span><br><span class="line">        at juc.DeadLockDemo$$Lambda$<span class="number">2</span>/<span class="number">1747585824.</span>run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">        at juc.DeadLockDemo.lambda$main$<span class="number">0</span>(DeadLockDemo.java:<span class="number">19</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x000000076b4b4ba8</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x000000076b4b4b98</span>&gt; (a java.lang.Object)</span><br><span class="line">        at juc.DeadLockDemo$$Lambda$<span class="number">1</span>/<span class="number">1078694789.</span>run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">Found <span class="number">1</span> deadlock.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出 它们的状况</p><p>也可以使用 jconsole图形化来查看信息<br>打开cmd 输入jconsole来进行查看</p><p><img src="/ZzzjhBlog/images/image-20250524011818525.png" alt="image-20250524011818525"></p><p>选择我们的进程进行连接<br>我们可以在线程-&gt;查看死锁 来查看详细的信息<br><img src="/ZzzjhBlog/images/image-20250524011940271.png" alt="image-20250524011940271"></p><p><img src="/ZzzjhBlog/images/image-20250524011952641.png" alt="image-20250524011952641"></p><h2 id="线程中断与LockSupport"><a href="#线程中断与LockSupport" class="headerlink" title="线程中断与LockSupport"></a>线程中断与LockSupport</h2><h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><h4 id="什么是线程中断？"><a href="#什么是线程中断？" class="headerlink" title="什么是线程中断？"></a>什么是线程中断？</h4><p>其实在Java中线程不因该由其他线程进行强制终端或者停止，<strong>应该由线程自己自行停止</strong>。</p><p>Java中没有办法立即中断一个线程，但是停止线程有时候非常重要，比如停止一些耗时的操作。</p><p><strong>中断是一种协商机制，Java中没有给中断增加任何语法，中断过程需要程序员自己实现</strong>。如果你要中断一个线程，你需要<strong>手动的调用该线程的interrupt方法，该方法也只是将线程对象的中断标识改为true</strong>。</p><p>将中断标识改为true后你需要写代码时刻检测当前线程的标识位，如果位true，则表示其他线程在请求这条线程中断。</p><p>在Java中每个线程都有自己的中断标识位。用来标识线程是否被中断。标识位是true表示中断，false表示未中断。<br>通过调用线程对象的interrupt方法表示将该线程的中断标识符设置位ture，可以在别的线程中使用，也可以在自己的线程中使用。</p><h4 id="中断线程的三个方法"><a href="#中断线程的三个方法" class="headerlink" title="中断线程的三个方法"></a>中断线程的三个方法</h4><p><img src="/ZzzjhBlog/images/image-20250525033842651.png" alt="image-20250525033842651"></p><h4 id="如何停止中断运行中的线程？"><a href="#如何停止中断运行中的线程？" class="headerlink" title="如何停止中断运行中的线程？"></a>如何停止中断运行中的线程？</h4><p><strong>①通过volatile变量来实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/25 15:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruptDemo</span> &#123;</span><br><span class="line">    <span class="comment">//volatile 后续会讲解 这边只要知道被volatile修饰的变量是共享变量即可</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 判断flag是否被设置为true</span></span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    <span class="comment">//是则停止循环</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; flag被修改为 true 线程终止&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1线程正在运行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//将共享变量 flag修改为 true</span></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②通过AtomicBoolean来实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/25 15:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruptDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">AtomicBoolean</span> <span class="variable">atomicBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 判断atomicBoolean是否被设置为true</span></span><br><span class="line">                <span class="keyword">if</span>(atomicBoolean.get())&#123;</span><br><span class="line">                    <span class="comment">//是则停止循环</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;atomicBoolean被修改为 true 线程终止&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1线程正在运行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//将共享变量 atomicBoolean修改为 true</span></span><br><span class="line">            atomicBoolean.set(<span class="literal">true</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>③使用Thread自带的api方法实现线程中断</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruptDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//isInterrupted() 判断终止标志位是否为true</span></span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(String.format(<span class="string">&quot;线程%s，标志位被设置为%s&quot;</span>,</span><br><span class="line">                            Thread.currentThread().getName(),</span><br><span class="line">                            Thread.currentThread().isInterrupted()));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;线程%s正在运行&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//t1启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 将t1线程标志位设置为 true</span></span><br><span class="line">            t1.interrupt();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>细节注意：</strong></p><ul><li>如果一个线程在调用<code>wait()</code>、<code>wait(long)</code>、<code>wait(long,int)</code>、或Object类的<code>join()</code>、<code>join(long)</code>、<code>joibn(long,int)</code>,<code>sleep(long)</code>、<code>sleep(long,int)</code>这些方法的时候，另外的线程调用了这个线程的<code>interrupt()</code>方法那么就会抛出InterruptException异常，<strong>并且它的中断状态会被清除</strong> 也就是interrupt的标志位为false 没有终止</li><li>中断不活动的线程不会产生异常</li></ul><p><strong>总结：</strong></p><p>①如果线程处于<strong>正常活动状态</strong>，线程调用<code>interrupt()</code>方法，那么会将该线程的中断标识位设置为true，仅此而已。<strong>被设置中断的线程将会继续正常运行，不受影响</strong>。所以<code>interrupt()</code>并不能够真正的中断线程，<strong>需要被调用的线程自己配合才行</strong>。</p><p>②如果线程处于被阻塞装填（wait、sleep、join）状态时，如果在别的线程中调用<code>interrupt()</code>，那么线程会立刻退出阻塞状态，并且抛出一个InterruptException异常，<strong>并且它的中断状态会被清除</strong> 也就是interrupt的标志位为false 没有终止</p><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruptDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//isInterrupted() 判断终止标志位是否为true</span></span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(String.format(<span class="string">&quot;线程%s，标志位被设置为%s&quot;</span>,</span><br><span class="line">                            Thread.currentThread().getName(),</span><br><span class="line">                            Thread.currentThread().isInterrupted()));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    <span class="comment">//再次调用interrupt()方法不然程序不会停止</span></span><br><span class="line">                    <span class="comment">//Thread.currentThread().interrupt();</span></span><br><span class="line">                    e.printStackTrace();&#125;</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;线程%s正在运行&quot;</span>, Thread.currentThread().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//t1启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 将t1线程标志位设置为 true</span></span><br><span class="line">            t1.interrupt();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在这边 我们会发现程序 别的线程调用t1线程的interrupt()方法 后将线程标志为设置为 true 抛出InterruptException后 线程并没有终止</span></span><br><span class="line"><span class="comment"> * 分析：</span></span><br><span class="line"><span class="comment"> * 首先抛出 抛出InterruptException后这是因为 如果t1线程处于阻塞状态 其他线程调用t1线程的interrupt方法 会抛出InterruptException</span></span><br><span class="line"><span class="comment"> * 但是就算抛出异常 t1也应该停止 为什么没有停止？</span></span><br><span class="line"><span class="comment"> * 这是因为 如果被阻塞的线程 被其他线程调用interrupt()方法后线程会立刻退出阻塞状态 并抛出InterruptException 而且最重要的是它的中断状态会被清除 也就是 终止标志位会被设置成false 导致无限循环</span></span><br><span class="line"><span class="comment"> * 这个解决的方法就是可以在 catch代码块中 需要再次调用 interrupt()方法再次将中断标识位设置为 true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="静态方法interrupted-和普通方法-isInterrupted-的区别"><a href="#静态方法interrupted-和普通方法-isInterrupted-的区别" class="headerlink" title="静态方法interrupted()和普通方法 isInterrupted()的区别"></a>静态方法<code>interrupted()</code>和普通方法 <code>isInterrupted()</code>的区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/26 22:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruptDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用静态的 interrupted()方法</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + Thread.interrupted()); <span class="comment">//false</span></span><br><span class="line">        <span class="comment">// 调用静态的 interrupted()方法</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + Thread.interrupted()); <span class="comment">//false</span></span><br><span class="line">        <span class="comment">// 调用interrupt()方法</span></span><br><span class="line">        Thread.currentThread().interrupt(); <span class="comment">//将中断标志位设置为 true</span></span><br><span class="line">        <span class="comment">// 再次调用静态的 interrupted()方法</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + Thread.interrupted()); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">// 再次静态的 interrupted()方法</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + Thread.interrupted()); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 普通方法 isInterrupted()</span></span><br><span class="line">        System.out.println(Thread.currentThread().isInterrupted()); <span class="comment">// false</span></span><br><span class="line">        <span class="comment">// 调用 普通方法 isInterrupted()</span></span><br><span class="line">        System.out.println(Thread.currentThread().isInterrupted()); <span class="comment">// false</span></span><br><span class="line">        <span class="comment">// 调用interrupt()方法</span></span><br><span class="line">        Thread.currentThread().interrupt(); <span class="comment">//将中断标志位设置为 true</span></span><br><span class="line">        <span class="comment">// 再次调用 普通方法 isInterrupted()</span></span><br><span class="line">        System.out.println(Thread.currentThread().isInterrupted()); <span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 再次 普通方法 isInterrupted()</span></span><br><span class="line">        System.out.println(Thread.currentThread().isInterrupted()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 静态方法interrupted()方法和普通的isInterrupted()方法对比</span></span><br><span class="line"><span class="comment">         * 静态的interrupted()方法 首先会返回当前进程的 中断状态  然后将当前进程的中断状态清除 也就是将中断标志位设置成false</span></span><br><span class="line"><span class="comment">         * 普通的isInterrupted()方法 会返回当前的进程的 中断状态 不会将当前进程中断状态清除</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 在源码中</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public static boolean interrupted() &#123;</span></span><br><span class="line"><span class="comment">         *         return currentThread().isInterrupted(true);</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * public boolean isInterrupted() &#123;</span></span><br><span class="line"><span class="comment">         *         return isInterrupted(false);</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 它们底层调用的是同一个方法  isInterrupt() 不过传递的参数不一样  传递true 代表着会将进程终止状态重置 设置成false  传递false就是不重置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><h4 id="什么是LockSupport？"><a href="#什么是LockSupport？" class="headerlink" title="什么是LockSupport？"></a>什么是LockSupport？</h4><p>LockSuppor也是属于我们JUC并发包下面的一个类</p><p>LockSupport对应的api<br><img src="/ZzzjhBlog/images/image-20250526223809870.png" alt="image-20250526223809870"></p><p>其中比较重要的 <code>park()</code>和 <code>unpark()</code><br>这两个方法简单一点描述就是 <strong><code>park()</code>是阻塞线程 <code>unpark()</code>就是接触被阻塞的线程</strong></p><h4 id="线程等待和唤醒的三种方式"><a href="#线程等待和唤醒的三种方式" class="headerlink" title="线程等待和唤醒的三种方式"></a>线程等待和唤醒的三种方式</h4><p><strong>①Object的<code>wait()</code>和 <code>notify()</code></strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/27 23:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lockObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockObj)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:获取到锁对象&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//锁对象调用 wait()方法 t1线程进入阻塞状态 阻塞在wait()调用处</span></span><br><span class="line">                    lockObj.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被唤醒了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockObj)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:获取到锁对象&quot;</span>);</span><br><span class="line">                <span class="comment">// 唤醒别的线程</span></span><br><span class="line">                lockObj.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:发出通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 流程分析</span></span><br><span class="line"><span class="comment">         * t1获取到锁 -&gt; t1阻塞 -&gt; t2获取到锁 -&gt; t2发出通知唤醒别的线程 -&gt; t2执行完代码块释放锁 -&gt; t1再次获取锁 -&gt; t1继续执行未执行完的代码块</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><code>wait()</code>和<code>notify()</code>必须在synchronized同步代码块中使用不然会报错</li></ul><p><strong>②Conditioin的<code>await()</code> 和 <code>singal()</code></strong></p><p>首先简单介绍一下<code>Condition</code>接口是 Java 并发包（<code>java.util.concurrent.locks</code>）提供的一种更灵活的线程间协作机制，它是对传统的<code>Object.wait()</code>和<code>notify()</code>的扩展和增强</p><ul><li><strong>作用</strong>：<code>Condition</code>用于实现线程间的等待 &#x2F; 通知模式，替代<code>synchronized</code>和<code>Object</code>监视器方法（<code>wait()</code>、<code>notify()</code>）。</li><li><strong>关联对象</strong>：<code>Condition</code>实例必须与一个<code>Lock</code>（通常是<code>ReentrantLock</code>）绑定，通过<code>lock.newCondition()</code>创建。</li><li>核心方法：<ul><li><code>await()</code>：相当于<code>Object.wait()</code>，释放锁并等待。</li><li><code>signal()</code>：相当于<code>Object.notify()</code>，唤醒一个等待线程。</li><li><code>signalAll()</code>：相当于<code>Object.notifyAll()</code>，唤醒所有等待线程。</li></ul></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/28 21:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建锁对象 Condition普遍和ReentrantLock实例绑定</span></span><br><span class="line">        <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="comment">//锁对象调用 newCondition() 创建Condition实例</span></span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程t1</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程获取到锁&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// condition实例调用 await()方法 这个方法会释放锁 并且阻塞线程</span></span><br><span class="line">                condition.await();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被唤醒了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程t2</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程获取到锁&quot;</span>);</span><br><span class="line">                <span class="comment">// condition实例调用 signal()方法 这个方法会唤醒其他线程</span></span><br><span class="line">                condition.signal();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;发出通知&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>condition中 <code>await()</code>和 <code>signal()</code>方法 需要先获得锁才能调用不然就会报错</li></ul><p><strong>③LockSupport的 <code>park()</code> 和 <code>unpark()</code></strong></p><p>LockSupport主要方法</p><p><strong>阻塞：</strong><code>park()</code>&#x2F;<code>park(Object blocker)</code>  阻塞当前线程&#x2F;阻塞传入具体的线程</p><p><strong>唤醒：</strong><code>unpark(Thread thread)</code> 唤醒处于阻塞状态的线程</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/5/28 21:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始启动&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用LockSupport.park()方法 阻塞线程</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被唤醒了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="comment">//t1线程启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始启动&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用LockSupport.unpark(t1)方法 指定唤醒 t1线程</span></span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;发出通知&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 流程分析</span></span><br><span class="line"><span class="comment">         * 首先LockSupport.park() 方法和之前说到的两种阻塞和唤醒线程的方法不一样</span></span><br><span class="line"><span class="comment">         * 不需要在synchronized代码块中 或者需要先获得到锁 才能调用 LockSupport.park(); 可以直接调用 非常的方便</span></span><br><span class="line"><span class="comment">         * 而且之前两种方式 如果让t2线程先唤醒t1 那么t1就会永远阻塞 但是使用LockSupport.park() 和LockSupport.unpart() 就算先唤醒后阻塞 也能执行完</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="LockSupport方法的具体细节"><a href="#LockSupport方法的具体细节" class="headerlink" title="LockSupport方法的具体细节"></a>LockSupport方法的具体细节</h4><p>首先LockSupport这个类会<strong>和每个使用它的线程关联一个许可证</strong>。如果<strong>许可证能够使用那么<code>park()</code>方法就会立刻返回</strong>，并在此过程中被消费掉，反之<strong>许可证不可用，那么<code>park()</code>方法就会阻塞</strong>。如果<strong>还没有许可证，可以调用<code>unpark()</code>方法获得许可证</strong>。（许可证不会累计，最多就一个）。</p><p>LockSupport类使用了一种叫做<strong>Permit</strong>(许可证)的概念，来做到<strong>阻塞和唤醒线程</strong>的功能，每一个线程都有一个许可证(<strong>Permit</strong>)</p><p>如果你<strong>提前为一个线程执行了<code>unpark()</code>方法，那么这个线程执行<code>park()</code>相当于没有效果</strong>，因为前<code>unpark()</code>相当于提前准备好了一个通行证（<strong>Permit</strong>）。</p><h4 id="LockSupport重点"><a href="#LockSupport重点" class="headerlink" title="LockSupport重点"></a>LockSupport重点</h4><p> <strong>许可证的生命周期</strong></p><ul><li><strong>初始状态</strong>：线程的许可证默认为 <strong>无</strong>（<code>null</code>或<code>0</code>）。</li><li><strong><code>unpark(thread)</code></strong>：为线程发放一个许可证，此时线程的许可证状态变为 <strong>有</strong>（<code>1</code>）。</li><li><code>park()</code>：<ul><li>若线程<strong>有许可证</strong>：<strong>消耗许可证</strong>（状态变为 <strong>无</strong>），<code>park()</code>立即返回。</li><li>若线程<strong>无许可证</strong>：阻塞线程，直到被<code>unpark()</code>或中断唤醒。</li></ul></li><li><strong>多次<code>unpark</code>（许可证不累积） 最多只有1个</strong></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>LockSupport</code>通过 <strong>Permit 机制</strong>提供了更灵活的线程阻塞 &#x2F; 唤醒操作，是 Java 并发包的底层基石之一。其核心优势在于<strong>无需依赖锁</strong>、<strong>支持提前唤醒</strong>，以及<strong>更丰富的超时和中断控制</strong></p><h4 id="三种线程等待与唤醒方式对比"><a href="#三种线程等待与唤醒方式对比" class="headerlink" title="三种线程等待与唤醒方式对比"></a>三种线程等待与唤醒方式对比</h4><p>对比三种常见线程通信机制：<code>Object.wait/notify</code>、<code>Condition.await/signal</code>、<code>LockSupport.park/unpark</code>。</p><table><thead><tr><th>特性维度</th><th>Object.wait()&#x2F;notify()</th><th>Condition.await()&#x2F;signal()</th><th>LockSupport.park()&#x2F;unpark()</th></tr></thead><tbody><tr><td>使用条件</td><td>必须在 <code>synchronized</code> 块中使用</td><td>必须配合 <code>ReentrantLock</code> 使用</td><td>无需配合任何锁，直接调用</td></tr><tr><td>是否支持多条件变量</td><td>不支持（每个对象一个等待队列）</td><td>支持（一个锁可创建多个 <code>Condition</code>）</td><td>不适用（每个线程独立许可，无条件队列）</td></tr><tr><td>唤醒顺序是否可控</td><td>不可控，唤醒哪个线程由 JVM 决定</td><td>不可控，通常按等待队列顺序唤醒</td><td>可控，<code>unpark(thread)</code> 精确指定唤醒线程</td></tr><tr><td>是否可跨线程通知</td><td>可以，只要持有相同锁对象</td><td>可以，只要持有相同 <code>Lock</code> 实例</td><td>可以，只要持有目标线程引用</td></tr><tr><td>是否有性能差异</td><td>性能一般，涉及对象锁开销</td><td>性能一般，底层依赖 AQS，有排队开销</td><td>高性能，基于许可机制，无锁操作</td></tr><tr><td>API复杂度</td><td>简单但要求严格，易误用</td><td>较复杂但结构清晰，适合大型系统</td><td>非常简单但偏底层，不适合普通业务使用</td></tr><tr><td>适用场景</td><td>简单线程通信（如生产者-消费者）</td><td>多条件同步，复杂场景更灵活</td><td>实现自定义同步工具（如线程池、信号量等）</td></tr></tbody></table><blockquote><p>✅ 建议：业务开发中尽量使用 Condition 或更高级并发工具类（如 BlockingQueue、Semaphore 等）来避免底层 API 的误用。</p></blockquote><h2 id="Java内存模型值JMM"><a href="#Java内存模型值JMM" class="headerlink" title="Java内存模型值JMM"></a>Java内存模型值JMM</h2><h3 id="什么是Java内存模型JMM？"><a href="#什么是Java内存模型JMM？" class="headerlink" title="什么是Java内存模型JMM？"></a>什么是Java内存模型JMM？</h3><p>我们查看我们电脑的CPU的缓存 在任务管理器-&gt;CPU中可以查看</p><p><img src="/ZzzjhBlog/images/image-20250529223229092.png" alt="image-20250529223229092"></p><p>下面这张是我们计算机的存储器的一个结构图</p><p><img src="/ZzzjhBlog/images/image-20250529222918767.png" alt="image-20250529222918767"></p><p>在数据计算和存储的时候，<strong>CPU速度是快于内存的速度</strong>，那么就会造成一个<strong>不同步的现象</strong>。那就不得不让<strong>CPU计算完然后等待主物理内存（主存）计算完成</strong>。这样就使得CPU的性能得不到很好的释放。那么为了解决这个问题，使得CPU和主存的速率拉平，就在它们之间设置了缓存。</p><p>一般对应的程序操作就是从数据库查询数据到内存然后再到CPU进行计算。</p><p>CPU的运行<strong>不是直接操作内存而是先把内存的数据读取到缓存中</strong>，而内存的读和写操作的时候就会造成不一致问题。</p><p><img src="/ZzzjhBlog/images/image-20250529224139009.png" alt="image-20250529224139009"></p><p>之前说到 CPU和主内存读写操作不一致的时候，采用做法是在它俩之间增加缓存。<br>也就是 <strong>CPU操作速度快，那么把操作结果放到缓存中，让缓存和内存交互</strong>这样来保证CPU和主存的读写一致性</p><p>那我们在不同的操作系统中要实现这个的话，JVM定义了一种Java的内存模型也就是<strong>JMM(Java Memory Model)</strong> 用来<strong>屏蔽各种硬件和操作系统的内存访问差异，以实现Java程序在各种平台下都能达到一致的内存访问效果</strong></p><h3 id="JMM规范的三大特性"><a href="#JMM规范的三大特性" class="headerlink" title="JMM规范的三大特性"></a>JMM规范的三大特性</h3><p>JMM（Java Memory Model）本身是一种抽象的概念并不<strong>是真实存在</strong>的，仅仅是<strong>用来描述的一组约定或者规范</strong>。<br>通过这个规范定义了<strong>程序中（尤其是多线程）各个变量的读写方式，并且决定了一个线程对共享变量的写入以及什么时候且如何变成对另一个线程可见，关键技术点都是围绕多线程的原子性、可见性、有序性展开的</strong></p><p><strong>可见性</strong></p><p>可见性指的是<strong>当一个线程修改一个共享变量时，其他的线程能立即知道该变更</strong>。JMM规定<strong>所有的变量</strong>都在<strong>主内存</strong>中</p><p><img src="/ZzzjhBlog/images/image-20250603220812271.png" alt="image-20250603220812271"></p><p>以这个为例</p><ul><li>int age 变量是处于主内存中的</li><li>线程要修改age的值，首先需要把age读到线程A自己的本地内存中进行操作修改，修改好之后再写回主内存，<strong>不可以直接操作主内存进行修改</strong></li></ul><p><img src="/ZzzjhBlog/images/image-20250603221044620.png" alt="image-20250603221044620"></p><p>左边为硬件结构图 右边就是抽象出来JVM控制的</p><p>这样就会导致一个问题<br>系统<strong>主内存共享变量</strong>数据修改的被写入的时机是不确定的，<strong>多线程并发的情况下可能会出现脏读</strong>。</p><p><strong>脏读</strong></p><p>简单来说就是一个线程读取另一个线程还未提交的数据。导致了最后的数据一致性混乱。<br><img src="/ZzzjhBlog/images/image-20250603222753514.png" alt="image-20250603222753514"></p><p>为了解决这个问题我们就需要保证原子性 也就是JMM三大特性之一</p><p><strong>原子性</strong></p><p>原子性，即是<strong>一个操作不能被打断，要么执行完要么不执行</strong>，类似事务操作，<strong>Java 基本类型数据的访问大都是原子操作</strong>。<br>除了<strong>long和double</strong>，long 和 double 类型是 <strong>64 位</strong>。在 32 位 JVM 中会将 64 位数据的读写操作分成两次 32 位来处理，所以 <strong>long 和 double 在 32 位 JVM 中是非原子操作</strong>，也就是说在并发访问时是线程非安全的，要想保证原子性就得对访问该数据的地方进行同步操作，譬如 synchronized 等。</p><p><strong>加锁保证操作主内存的变量线程安全保证原子性，修改之后立马通知其他线程，主线程值已经被修改了，线程本地内存中旧的值作废，也就是可见性。</strong></p><p><strong>有序性</strong></p><p>首先思考一下</p><p><img src="/ZzzjhBlog/images/image-20250603225433604.png" alt="image-20250603225433604"></p><p><strong>什么是有序性</strong></p><p>对于<strong>一个线程执行代码</strong>而言，我们一般都认为代码是从上往下执行，有序的。但是<strong>在多线程情况下，为了提升性能，编译器和处理器会对指令序列进行重新排序。<strong>Java规范指定JVM线程内部维持</strong>顺序化语义（尽量维持）</strong>，即<strong>只要程序的最终成果与它顺序化执行的结果相等</strong>，那么<strong>指令的执行顺序可以与代码顺序不一致</strong>，这个过程就叫做<strong>指令重排序</strong>。</p><p><strong>优缺点：</strong><br>JVM会根据处理器的特性（CPU多级缓存、多核处理器等）适当的对指令进行重排序，使得机器指令会更符合CPU的执行特性，最大限度的发挥极其的性能。<br>但是指令重排<strong>可以保证串行语义一致</strong>，但是<strong>没有义务保证多线程之间的语义一致</strong>（就是有可能产生脏读），简单说就是<strong>两行以上不相干的代码在执行的时候有可能先执行的代码不是第一条代码，不一定是从上到下、按顺序执行的，执行的顺序会被优化</strong></p><p><strong>执行图</strong></p><p><img src="/ZzzjhBlog/images/image-20250604004243801.png" alt="image-20250604004243801"></p><p>单线程环境里面只要确保程序最终执行结果和顺序话执行结果相等 那么随便它这么指令重排都可以。</p><p>**处理器进行指令重排的时候必须要考虑指令之间的数据依赖性 ** 比如 int a &#x3D; 0 ； int b &#x3D; a; 不能够重排为 int b &#x3D; a; int a &#x3D; 0;</p><p><strong>多线程环境中线程交替的执行，由于编译器优化指令重排，两个线程中使用的变量能否保持一致性是不确定的，结果是无法预测的。</strong><br>所以我们<strong>在特殊场景的时候需要禁止指令重排</strong>，来确保程序结果的正确性。</p><h3 id="JMM规范下-多线程先行发生原则值happens-before"><a href="#JMM规范下-多线程先行发生原则值happens-before" class="headerlink" title="JMM规范下 多线程先行发生原则值happens-before"></a>JMM规范下 多线程先行发生原则值happens-before</h3><h4 id="什么是happens-before？"><a href="#什么是happens-before？" class="headerlink" title="什么是happens-before？"></a>什么是happens-before？</h4><p>在 JMM（Java 内存模型）里，若想让 <strong>“一个操作执行的结果” 对 “另一个操作” 具备可见性</strong>（比如线程 A 修改共享变量后，线程 B 能读到最新值 ），或者要 <strong>约束代码重排序的规则</strong>（让两个操作的执行顺序符合预期逻辑 ），那么这两个操作之间 <strong>必须存在 happens - before 关系</strong> ，以此明确它们在 “可见性传递” 和 “执行顺序约束” 上的逻辑先后</p><p>简单说，<strong>happens - before</strong> 就是 JMM 里一套 <strong>“约定”</strong>，规定了操作间要<strong>满足怎样的先后逻辑，才能让结果可见、重排序可控，保障多线程程序的正确性</strong> 。</p><p><strong>案例</strong></p><p><img src="/ZzzjhBlog/images/image-20250604214728512.png" alt="image-20250604214728512"></p><p><strong>结果分析：</strong></p><p>如果线程A的操作(x&#x3D;5) <strong>happens-before</strong>（先行发生）线程B的操作（y &#x3D; x）,那么可以确定线程B执行完之后 y&#x3D;5 一定成立。</p><p>如果不存在<strong>happens-before原则</strong>，那么y &#x3D; 5不一定成立</p><p><strong>这就是happens-before原则 &#x3D;》包含可见性和有序性的约束</strong></p><h4 id="happens-beforezo总原则"><a href="#happens-beforezo总原则" class="headerlink" title="happens-beforezo总原则"></a>happens-beforezo总原则</h4><p>①如果一个操作<strong>happens-before（先行发生）<strong>另一个操作，那么</strong>第一个操作的的执行结果将对第二个操作可见</strong>，而且<strong>第一个操作的执行顺序排在第二个操作之前</strong>。</p><p>②如果两个操作之前存在<strong>happens-before</strong>关系，并不意味着一定要按照<strong>happens-before</strong>原则制定的顺序来执行。如果重排序后执行的结果和按照<strong>happens-before</strong>关系来执行的<strong>结果一致</strong>那么这种<strong>重排序并不非法</strong></p><h4 id="Happens-Before-的本质"><a href="#Happens-Before-的本质" class="headerlink" title="Happens-Before 的本质"></a>Happens-Before 的本质</h4><p>Happens-Before 是一种 <strong>逻辑上的先后关系</strong>，用于保证可见性和有序性。但 JMM 允许实际执行顺序与逻辑顺序不同，只要 <strong>最终结果与严格按照 Happens-Before 执行的结果一致</strong>（即 <strong>as-if-serial 语义</strong>）。</p><h4 id="合法重排序的条件"><a href="#合法重排序的条件" class="headerlink" title="合法重排序的条件"></a>合法重排序的条件</h4><p>以下两种情况允许重排序：</p><ul><li><strong>单线程内</strong>：重排序不影响程序执行结果（符合程序顺序规则）。</li><li><strong>多线程间</strong>：重排序不破坏 Happens-Before 关系的可见性传递。</li></ul><p>案例：<strong>单线程中的重排序</strong></p><p><img src="/ZzzjhBlog/images/image-20250604222635780.png" alt="image-20250604222635780"></p><ul><li>逻辑顺序：A → B → C</li><li>实际执行顺序可能是：B → A → C（重排序后结果不变）</li><li><strong>合法原因</strong>：单线程中，A 和 B 之间没有依赖关系，重排序不影响最终的<code>sum</code>值。</li></ul><p>案例：<strong>多线程中的重排序与 Happens-Before</strong></p><p><img src="/ZzzjhBlog/images/image-20250604222745913.png" alt="image-20250604222745913"></p><ul><li>根据 <strong>volatile 规则</strong>：B happens-before C</li><li>根据 <strong>传递性</strong>：A happens-before D → 线程 B 一定能看到<code>a=1</code></li><li>允许的重排序：<ul><li>线程 A 内，若 A 和 B 无依赖关系，编译器可能重排序为 B → A。</li><li>但由于 volatile 的内存屏障，线程 B 读取<code>flag=true</code>时，<code>a=1</code>已刷新到主内存，结果仍正确。</li></ul></li></ul><h4 id="Happens-Before原则（8条）"><a href="#Happens-Before原则（8条）" class="headerlink" title="Happens-Before原则（8条）"></a>Happens-Before原则（8条）</h4><p><strong>①次序规则</strong></p><p>次序规则：<strong>一个线程内</strong>，按照代码顺序，写在前面的操作先行发生于写在后面的操作</p><p><strong>②锁定规则</strong></p><p>锁定规则：一个unLock操作<strong>先行发生于</strong>后面（这边后面指的是<strong>时间上的先后</strong>）对同一个锁的local操作 （意思就是一个线程必须先unLock一把锁 另一个线程才能lock同一把锁 也就是<strong>解锁操作必须在加锁操作之前完成</strong>）</p><p><strong>③volatile变量规则</strong></p><p>volatile变量规则：对一个<strong>volatile修饰的变量</strong>的<strong>写操作先行发生于后面对这个变量的读操作</strong>，也就是<strong>前面的写操作对后面的读操作是可见的</strong>，这边后面同样指的是时间上的先后。</p><p><strong>④传递规则</strong></p><p>传递规则：如果操作A先于发生操作B，操作B先于发生操作C，那么可以得出操作A先于发生操作C</p><p><strong>⑤线程启动规则（Thread Start Rule）</strong></p><p>线程启动规则：Thread对象的start()方法先行发生于此线程中每一个动作</p><p><img src="/ZzzjhBlog/images/image-20250604232208216.png" alt="image-20250604232208216"></p><p>如图也就是说如果你想要执行线程t1中<code>System.out.println(&quot;hello&quot;);</code>这行代码 那么一定要先执行 t1的<code>start()</code>方法</p><p><strong>⑥线程中断规则（Thread Interruption Rule）</strong></p><p>线程中断原则：对线程调用interrupt()方法先行发生于被中断线程检测到中断事件的发生。</p><p>也就是说你得先调用interrupt()方法 被中断线程才能检测到中断事件的发生（纯废话）</p><p><strong>⑦线程终止规则（Thread Termination Rule）</strong></p><p>线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过<code>isAlive()</code>方法检测线程是否终止运行</p><p><strong>⑧对象终结规则（Finalizer Rule）</strong></p><p>一个对象的初始化完成（构造函数结束）先行发生于它的<code>finalize()</code>方法的开始</p><p><code>finailze()</code>属于Object类的方法 用于JVM进行垃圾回收的<br>也就是对象要被回收的时候执行的</p><p>肯定是先初始化完了 才能被回收啊</p><h4 id="总结⭐⭐⭐"><a href="#总结⭐⭐⭐" class="headerlink" title="总结⭐⭐⭐"></a>总结⭐⭐⭐</h4><p><strong>Happens-Before 原则是线程安全的必要条件，但不是充分条件</strong>。换句话说：<strong>满足 Happens-Before 只能保证可见性和有序性，但无法自动解决原子性问题</strong>。</p><p><strong>也就是说如果一段代码想要满足线程安全，那么一定要满足Happens-Before原则，但是满足Happens-Before原则也不一定是线程安全的，应为Happens-Before无法自动解决原子性问题。（⭐）</strong></p><p>满足 Happens-before 原则<strong>不需要同时满足全部 8 条规则</strong>，而是<strong>只要两个操作之间满足任意一条 Happens-before 规则，它们之间就存在先行发生关系</strong></p><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setValue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设存在线程A和线程B</span></span><br><span class="line"><span class="comment">//线程A先(时间上的先后)调用setValue()</span></span><br><span class="line"><span class="comment">//然后线程B调用同一个对象的getValue()</span></span><br><span class="line"><span class="comment">//那么线程B收到的返回值是什么？</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用Happens-Before八条原则来分析一下，首先（5、6、7、8）和这段代码没什么关联，关注前四条，</p><p>第一条次序规则由于次序规则需要发生在同一个线程内所以不满足。<br>第二条锁定规则这边没有涉及到。<br>第三条volatile变量规则，这个变量value没有用volatile修饰不满足。<br>第四条也是只有两个线程，没有第三个也是不满足。</p><p>这段代码<strong>不满足任何一条Happens-Before</strong>原则，上面也总结了<strong>满足Happens-Before原则是线程安全的必要条件</strong>，所以这段代码是线程不安全的，无法确认线程B获得到的结果是什么。</p><p><strong>修复方法</strong><br>①get&#x2F;set方法都定义为synchronized方法加上锁<br>以这个this当前对象为锁使得同一个时间段只能由一个对象调用方法来保证线程安全</p><p><strong>缺点</strong><br>get方法加上synchronized导致读取的时候性能下降</p><p>②将value使用volatile修饰 配合使用synchronized修饰set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用volatile修饰变量value，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用synchronized修饰</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">setValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++value; <span class="comment">//对变量进行修改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p>首先解释一下什么是<strong>单次读&#x2F;写操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> x;         <span class="comment">// 单次读取变量 x</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> f;  <span class="comment">// 单次读取变量 f</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span>;            <span class="comment">// 单次写入变量 x</span></span><br><span class="line">f = <span class="literal">true</span>;          <span class="comment">// 单次写入变量 f</span></span><br></pre></td></tr></table></figure><p>诸如此类就是单词读&#x2F;写操作<br><strong>特征：</strong></p><ul><li><strong>原子性</strong>：单次读 &#x2F; 写操作在底层7是不可分割的（由 JVM 或硬件保证）</li></ul><p><strong>复合操作</strong><br>复合操作由多个<strong>独立的原子操作</strong>组成，但<strong>整体不具备原子性</strong><br>下面是常见的符合操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自增自减</span></span><br><span class="line">x++; <span class="comment">//相等于 x = x + 1 </span></span><br><span class="line">x--;</span><br><span class="line">++x;</span><br><span class="line">--x;</span><br><span class="line"><span class="comment">//拆解为</span></span><br><span class="line"><span class="comment">// 1. 读取x的值（原子操作）</span></span><br><span class="line"><span class="comment">// 2. 计算x + 1（原子操作）</span></span><br><span class="line"><span class="comment">// 3. 将结果写回x（原子操作）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//条件判断与赋值</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;  <span class="comment">// 检查</span></span><br><span class="line">    x = <span class="number">1</span>;     <span class="comment">// 执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基于当前值计算</span></span><br><span class="line">x = x * <span class="number">2</span>;     <span class="comment">// 读取→计算→写入</span></span><br><span class="line">x = list.size();  <span class="comment">// 读取集合状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们案例中就是复合操作，<strong>复合操作保证不了原子性</strong>，所以需要加synchronized锁来保证修改变量时候的线程安全。</p><p><strong>用volatile修饰的变量，任何对该变量的修改都会更新到主内存</strong>，同时，<strong>每次线程访问volatile变量的时候，它总是从主内存中重新读取该变量最新的值</strong>，而<strong>不是使用线程工作内存中可能过期的副本</strong>。</p><p>这样确保了不同线程之间对volatile变量的修改能够及时被其他线程看到。但是要注意<strong>volatile不能保证原子性</strong>，像x++操作，实际上是读取-修改-写入三步组成的，<strong>volatile只能够保证单个读操作和写操作是原子的</strong>，不保证复合操作的原子性。</p><h2 id="volatile与JMM"><a href="#volatile与JMM" class="headerlink" title="volatile与JMM"></a>volatile与JMM</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><strong>可见性</strong>：<strong>当一个线程修改了 <code>volatile</code> 变量的值时，会触发其他线程工作内存中对应变量副本失效</strong>，从而迫使其他线程后续读取该变量时，必须去主内存重新获取最新值 。因为volatile变量的读写操作会加入到<strong>内存屏障</strong>，强制刷新缓存和主内存的数据一致性。</li><li><strong>禁止指令重排序</strong>：volatile变量的修饰使得JVM在生成字节码时会在<strong>该变量的读写前后插入内存屏障</strong>，从而<strong>避免了指令的乱序执行问题</strong>。</li><li><strong>不保证原子性</strong>：<code>volatile</code>不能替代<code>synchronized</code>来保证原子性。例如，<code>count++</code>这样的操作实际上是由读取-修改-写入三步组成，而<code>volatile</code>只能保证<strong>单个读操作和写操作</strong>是原子的，<strong>不能保证复合操作的原子性</strong>。</li></ul><p><strong>案例详解volatile的可见性</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/14 15:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileSeeDemo</span> &#123;</span><br><span class="line">    <span class="comment">//static boolean flag = true;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; come in&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; flag被设置为false&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line"></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 将flag修改,当前flag的值为:&quot;</span> + flag);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 运行结果：</span></span><br><span class="line"><span class="comment">         * t1 come in</span></span><br><span class="line"><span class="comment">         * main 将flag修改,当前flag的值为:false</span></span><br><span class="line"><span class="comment">         * 程序还一直没有结束 说明t1线程中 while(flag)&#123;&#125;这边的循环还没终止，可是主线程已经将flag修改为false了 但是t1线程不可见</span></span><br><span class="line"><span class="comment">         * 原因分析：</span></span><br><span class="line"><span class="comment">         * 这是因为 t1线程有着自己的本地线程内存 而t1中本地线程内存的 flag还是true 并不是最新的false 所以没有终止</span></span><br><span class="line"><span class="comment">         * 也就是说主线程修改了flag变量的值但是 对其他线程不可见 看不但flag值被修改了</span></span><br><span class="line"><span class="comment">         * 所以在高并发环境下对于变量的状态变化 需要使用volatile修饰变量 保证变量的可见性</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//使用volatile修饰后 再次运行</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 运行结果：</span></span><br><span class="line"><span class="comment">         * t1 come in</span></span><br><span class="line"><span class="comment">         * main 将flag修改,当前flag的值为:false</span></span><br><span class="line"><span class="comment">         * t1 flag被设置为false</span></span><br><span class="line"><span class="comment">         * 程序也正常停止了</span></span><br><span class="line"><span class="comment">         * 就是因为我们所讲的 对于volatile的变量修改会立即刷新回主内存 对volatile变量的读取会到主内存中读取最新的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析：</p><p>基于 <strong>“内存屏障 + 缓存一致性协议”</strong> 的实现</p><ul><li><p><strong>写操作触发（修改 <code>volatile</code> 变量时）</strong>：<br>线程修改 <code>volatile</code> 变量后，JVM 会在写操作前后插入 <strong>内存屏障（Memory Barrier）</strong>，强制将工作内存中修改后的值 <strong>立即刷新回主内存</strong> 。<br>同时，通过 CPU 的 <strong>缓存一致性协议（如 MESI 协议）</strong>，其他线程工作内存里的该变量副本会被标记为 <strong>“失效”</strong>（可简单理解为通知其他线程 “你们缓存的旧值没用了” ）。</p></li><li><p><strong>读操作响应（其他线程读取 <code>volatile</code> 变量时）</strong>：<br>其他线程发现自己工作内存中该变量副本失效后，会 <strong>放弃旧值</strong>，主动去主内存重新读取最新值，保证拿到的是修改后的结果 。</p></li></ul><p><strong>volatile不保证原子性案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileNoAtomicDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyNumber</span> <span class="variable">myNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyNumber</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                myNumber.addPlus();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;value的值：&quot;</span> + myNumber.value);</span><br><span class="line">        <span class="comment">//结果：value的值：998</span></span><br><span class="line">        <span class="comment">//对于这种复合操作需要使用 synchronized关键字来保证线程安全问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//资源类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumber</span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPlus</span><span class="params">()</span>&#123;</span><br><span class="line">        value++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ol><li><p><strong><code>value++</code>的非原子性</strong>：<br><code>value++</code> 实际上是一个<strong>复合操作</strong>，包含三个步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 读取value的值（从主内存加载到工作内存）</span><br><span class="line"><span class="number">2.</span> 执行+<span class="number">1</span>操作（在工作内存中计算）</span><br><span class="line"><span class="number">3.</span> 将计算结果写回主内存</span><br></pre></td></tr></table></figure><p>即使<code>value</code>被声明为<code>volatile</code>，这三个步骤<strong>仍然可能被其他线程打断</strong>。</p></li><li><p><strong>写覆盖示例</strong>：<br>假设有两个线程 A 和 B 同时执行<code>value++</code>，初始值<code>value=0</code>：</p><ul><li><strong>线程 A</strong>读取<code>value=0</code>到工作内存。</li><li><strong>线程 B</strong>也读取<code>value=0</code>到工作内存（此时<code>volatile</code>保证读到的是最新值）。</li><li>线程 A 执行 + 1 操作，得到<code>value=1</code>，并写回主内存（<code>volatile</code>确保立即刷新）。</li><li>线程 B 执行 + 1 操作，得到<code>value=1</code>，并写回主内存（覆盖了线程 A 的结果）。<br>最终结果是<code>value=1</code>，而不是预期的<code>value=2</code>。</li></ul></li></ol><h3 id="volatile变量读写过程"><a href="#volatile变量读写过程" class="headerlink" title="volatile变量读写过程"></a>volatile变量读写过程</h3><p>Java内存模型中定义了8中<strong>每个线程自己工作内存</strong>与<strong>主物理内存</strong>之间的原子操作。</p><p>read（读取）–&gt; load（加载）–&gt; use（使用） –&gt; assign（赋值）–&gt; store（存储） –&gt; write（写入）–&gt; lock（锁定）–&gt; unlock （解锁）</p><p><img src="/ZzzjhBlog/images/image-20250614185902936.png" alt="image-20250614185902936"></p><p><img src="/ZzzjhBlog/images/image-20250614221140119.png" alt="image-20250614221140119"></p><h3 id="volatile的内存语义"><a href="#volatile的内存语义" class="headerlink" title="volatile的内存语义"></a>volatile的内存语义</h3><p>①当写一个volatile修饰的变量的时候，JMM会把该线程对应<strong>本地内存中共享变量值立即刷新到主内存</strong>中。</p><p>②当读一个volatile修饰的变量的时候，JMM会<strong>把本地内存设置为无效，重新回到主内存中获取最新的共享变量</strong>。</p><p>所以volatile写内存的语义是直接刷新到主内存中，读的内存语义是直接读取主内存中的值</p><h3 id="内存屏障（Memory-Barrier）⭐⭐⭐"><a href="#内存屏障（Memory-Barrier）⭐⭐⭐" class="headerlink" title="内存屏障（Memory Barrier）⭐⭐⭐"></a>内存屏障（Memory Barrier）⭐⭐⭐</h3><h4 id="什么是内存屏障"><a href="#什么是内存屏障" class="headerlink" title="什么是内存屏障?"></a>什么是内存屏障?</h4><p>内存屏障是CPU或者编译器对内存随机访问的操作中的一个同步点，<strong>使得此点之前所有的读写操作都执行后才可以开始执行此点之后的操作</strong>。避免代码重排序。内存屏障其实就是一种<strong>JVM指令</strong>，Java内存模型（JMM）的重排规则会<strong>要求Java编译在生成JVM指令的时候插入特定内存屏障指令</strong>。</p><p>内存屏障之前的所有<strong>写操作</strong>都要写回到主内存</p><p>内存屏障之后的所有<strong>读操作</strong>都能够获取到内存屏障之前所有写操作完成后的最新结果（实现了可见性）</p><p><strong>写屏障（Store Memory Barrier）</strong>：告诉处理器写屏障之前的所有存储在缓存（store bufferes）中的数据同步到主内存。简单来说就是<strong>碰到写屏障指令的时候，就必须把指令前所有的写入指令执行完毕才能继续往下执行（包括普通写和<code>volatile</code>写）</strong>。</p><p><strong>读屏障（Load Memory Barrier）</strong>：处理器在读屏障之后的读操作，都在读屏障之后执行。简单来说就是<strong>Load屏障指令之后的就能够保证读取数据指令一定能够获取到最新的数据</strong></p><p>所以JVM进行代码重排序的时候，不允许把内存屏障之后的指令重排序到内存屏障之前。也就是<strong>对volatile变量的写，先行发生于对volatile变量的读</strong></p><h4 id="重排序的-“禁止边界”-⭐⭐⭐"><a href="#重排序的-“禁止边界”-⭐⭐⭐" class="headerlink" title="重排序的 “禁止边界” ⭐⭐⭐"></a>重排序的 “禁止边界” ⭐⭐⭐</h4><p>在 JVM 执行代码时，编译器或 CPU 可能会对<strong>无依赖关系的指令</strong>做重排序来提升性能，但遇到 <code>volatile</code> 变量时，内存屏障会 “阻断” 这种重排序：</p><h5 id="1-写-volatile-变量的屏障约束"><a href="#1-写-volatile-变量的屏障约束" class="headerlink" title="1. 写 volatile 变量的屏障约束"></a>1. 写 <code>volatile</code> 变量的屏障约束</h5><p>当线程执行 <code>volatile</code> 写操作（如 <code>flag = true</code>）时，JVM 会在写操作前插入 <strong><code>StoreStore</code> 屏障</strong>、写操作后插入 <strong><code>StoreLoad</code> 屏障</strong> ，效果是：</p><ul><li>屏障前的<strong>所有写指令</strong>（包括普通变量赋值、其他 <code>volatile</code> 写）必须 “先落地” 到主内存。</li><li>屏障后的<strong>任何volatile指令</strong>（读或写）不能被重排序到屏障前执行。（<strong>如果线程 B 的读操作在时间顺序上发生在线程 A 的写操作之后，那么 B 必然能读到 A 写入的最新值</strong>）</li></ul><h5 id="2-读-volatile-变量的屏障约束"><a href="#2-读-volatile-变量的屏障约束" class="headerlink" title="2. 读 volatile 变量的屏障约束"></a>2. 读 <code>volatile</code> 变量的屏障约束</h5><p>当线程执行 <code>volatile</code> 读操作（如 <code>if (flag)</code>）时，JVM 会在读操作前插入 <strong><code>LoadLoad</code> 屏障</strong>、读操作后插入 <strong><code>LoadStore</code> 屏障</strong> ，效果是：</p><ul><li>屏障后的<strong>所有读 &#x2F; 写指令</strong>不能被重排序到屏障前执行。</li><li>读操作必须从主内存获取最新值，无视线程工作内存的缓存。</li></ul><h4 id="内存屏障的分类"><a href="#内存屏障的分类" class="headerlink" title="内存屏障的分类"></a>内存屏障的分类</h4><p>大体来说有两种<br><strong>①读屏障(Load Barrier)</strong></p><p><strong>②写屏障(Store Barrier)</strong></p><p>细分有四种</p><p><strong>①读读 loadload()</strong></p><p><strong>②写写 storestore()</strong></p><p><strong>③读后写 loadstore()</strong></p><p><strong>④写后读 storeload()</strong></p><p>c++源码图：</p><p><img src="/ZzzjhBlog/images/image-20250614010811150.png" alt="image-20250614010811150"></p><p>概括</p><p><img src="/ZzzjhBlog/images/image-20250614010735240.png" alt="image-20250614010735240"></p><p><strong>happens-before之volatile变量规则</strong></p><p><img src="/ZzzjhBlog/images/image-20250614011900002.png" alt="image-20250614011900002"></p><p>volatile读插入内存屏障后生成的指令序列示意图</p><p><img src="/ZzzjhBlog/images/image-20250614012127281.png" alt="image-20250614012127281"></p><p><strong>四大屏障插入情况</strong><br><img src="/ZzzjhBlog/images/image-20250615012120536.png" alt="image-20250615012120536"></p><p><strong>四大屏障插入情况案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileTest</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">        i = <span class="number">2</span>; <span class="comment">//普通写</span></span><br><span class="line">        flag = <span class="literal">true</span>; <span class="comment">//volatile写</span></span><br><span class="line">        <span class="comment">//volatile写之前的操作不允许重排序到volatile写之后 如果调换了那么输出结果就改变了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i= &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析图：</p><p><img src="/ZzzjhBlog/images/image-20250615025600434.png" alt="image-20250615025600434"></p><p><img src="/ZzzjhBlog/images/image-20250615025636004.png" alt="image-20250615025636004"></p><h3 id="如何正确使用volatile"><a href="#如何正确使用volatile" class="headerlink" title="如何正确使用volatile"></a>如何正确使用volatile</h3><p>①单一赋值情况下可以，复合运算不行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>②状态标志，判断业务是否结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 作为一个布尔装填，标识发生一个重要的一次性事件，例如完成初始化或者任务结束</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/15 4:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseVolatileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span>  <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③开销较低的读，写锁策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseVolatileDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用：当读远多于写，结合使用内部锁和 volatile 变量来</span></span><br><span class="line"><span class="comment">     * 理由：利用volatile保证读取操作的可见性；利用synchroniz</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> value;  <span class="comment">//利用volatile保证读取操作的可</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">increment</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> value++; <span class="comment">//利用synchronized保证复合操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④DCL双端锁的发布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance; <span class="comment">// 必须使用volatile</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第一次检查：无锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 第二次检查：加锁</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(); <span class="comment">// 关键操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DCL 的核心逻辑</span></span><br><span class="line"><span class="comment">//第一次检查（无锁）：</span></span><br><span class="line"><span class="comment">//如果 instance 不为 null，直接返回，避免进入同步块，减少开销。</span></span><br><span class="line"><span class="comment">//只有当 instance 为 null 时，才进入同步块。</span></span><br><span class="line"><span class="comment">//同步块与第二次检查：</span></span><br><span class="line"><span class="comment">//多个线程可能同时通过第一次检查，因此需要在同步块内再次检查，确保只有一个线程创建实例。</span></span><br><span class="line"><span class="comment">//volatile 的作用：</span></span><br><span class="line"><span class="comment">//禁止指令重排序，确保 instance = new Singleton() 的原子性。</span></span><br><span class="line"><span class="comment">//防止其他线程看到 “半初始化” 的实例（见下文分析）。</span></span><br></pre></td></tr></table></figure><p><strong>为什么需要 <code>volatile</code>？</strong></p><p><code>instance = new Singleton()</code> 实际包含三个步骤：</p><ol><li>分配内存空间。</li><li>初始化对象。</li><li>将引用指向内存空间。</li></ol><p><strong>JVM 可能重排序为</strong>：1 → 3 → 2。<br>若线程 A 执行了 1 → 3 但未完成 2，此时线程 B 通过第一次检查，发现 <code>instance</code> 不为 <code>null</code>，直接返回未初始化完成的对象，导致错误。</p><p><strong><code>volatile</code> 禁止重排序</strong>，确保步骤顺序为：1 → 2 → 3，保证线程安全。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>这边简单介绍一下前置知识<strong>原子类</strong>，这是JUC并发包下面的<code>java.util.concurrent.atomic</code>后面会详细学习。</p><h3 id="有无CAS的对比"><a href="#有无CAS的对比" class="headerlink" title="有无CAS的对比"></a>有无CAS的对比</h3><p><strong>没有CAS前</strong></p><p>在多线程环境下<strong>不使用原子类</strong>来保证线程安全i++（基本数据类型），通常采用<strong>加锁</strong>的方式来保证。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/16 22:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                r.addPlus();</span><br><span class="line">            &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">            t1.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结果的值为：&quot;</span> + r.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;</span><br><span class="line"><span class="comment">//加锁保证原子性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addPlus</span><span class="params">()</span>&#123;</span><br><span class="line">        value++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>有CAS之后</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/16 22:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                r.addPlus();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">2000</span>);&#125; <span class="keyword">catch</span> (InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结果的值为：&quot;</span> + r.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"><span class="comment">//使用原子类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">value</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPlus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//先获取值然后加1</span></span><br><span class="line">        value.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        <span class="keyword">return</span> value.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到有了CAS我们在处理类似代码的时候都不需要使用锁来保护代码块，就可以做到线程安全，这其中具体的原理下面就会说到。</p><h3 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS?"></a>什么是CAS?</h3><p>CAS是<code>CompareAndSwap</code>的缩写（比较并且交换）,实现并发算法的时候经常用到的技术。<br>其中它包含了三个操作数：<strong>内存位置</strong>、<strong>预期原值</strong>、<strong>更新值</strong></p><p>大致的流程就是：</p><p>执行CAS操作的时候，将内存位置的值与预期原值进行比较。<br>如果<strong>匹配</strong>，那么处理器就会自动将该位置的值更新为新的值。<br>如果不匹配，<strong>处理器要么不做做任何操作要么重新尝试这个行为（也成为自旋）</strong>，<strong>多个线程同时操作CAS只会有一个成功</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/17 21:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemon02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//compareAndSet() 传入两个参数 一个期望值，一个更新值</span></span><br><span class="line">        <span class="comment">//我们一开始的值是初始化的值是5  期望值传入为X 更新值传入Y 更新的时候会比较你原来的值5和期望值X是否相等相等就是将值修改为 更新值Y</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">2025</span>)); <span class="comment">//true 更新成功</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">2025</span>)); <span class="comment">//false 修改失败  因为修改成功将值改为2025了 不等于期望值5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的值：&quot;</span> + atomicInteger.get());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h3><p>这个<code>compareAndSet</code>方法底层调用UnSafe类的<code>compareAndSwapInt</code>方法<br><img src="/ZzzjhBlog/images/image-20250617223355919.png" alt="image-20250617223355919"></p><p>传入的参数分别是<code>this、valueOffset、expect、update</code>分别是<code>this</code></p><ul><li><strong>含义</strong>：当前<code>AtomicInteger</code>对象的引用</li><li><strong>作用</strong>：告诉底层<code>Unsafe</code>类操作的是哪个对象的字段</li></ul><p><code>valueOffset</code></p><ul><li><strong>含义</strong>：<code>AtomicInteger</code>对象中<code>value</code>字段的内存偏移量（offset） 。在 JVM 中，每个对象的字段在内存中都有一个相对于对象起始地址的固定偏移量。<br><code>valueOffset</code>表示<code>AtomicInteger</code>对象中<code>value</code>字段的内存地址与对象头地址的差值</li><li><strong>作用</strong>：通过偏移量直接定位到对象内存中的<code>value</code>字段，实现无锁操作</li><li></li></ul><p><code>expect</code></p><ul><li><strong>含义</strong>：期望当前<code>value</code>字段的值</li><li><strong>作用</strong>：用于 CAS 操作的比较阶段，验证内存中的值是否与预期一致</li></ul><p><code>update</code></p><ul><li><strong>含义</strong>：如果当前<code>value</code>等于<code>expect</code>，则将<code>value</code>更新为该值</li><li><strong>作用</strong>：用于 CAS 操作的更新阶段，当比较成功时写入新值</li></ul><h4 id="什么是UnSafe类？"><a href="#什么是UnSafe类？" class="headerlink" title="什么是UnSafe类？"></a>什么是UnSafe类？</h4><p>UnSafe是CAS核心类，Java中无法直接访问底层系统，需要通过本地的<code>native</code>方法来访问。基于UnSafe类可以直接操作特定的内存数据。<strong>UnSafe存在于sun.misc包中</strong>，内部方法可以像C语言中的<strong>指针</strong>一样直接操作内存。Java中CAS操作的执行依赖于UnSafe类。</p><p><strong>UnSafe类中所有的方法都是native修饰的，也就是UnSafe类中的方法都直接调用操作系统底层资源执行相应的任务。</strong></p><p>我们可以来看AtomicInteger类中的<code>getAndIncrement()</code>方法<br><img src="/ZzzjhBlog/images/image-20250617231547844.png" alt="image-20250617231547844"></p><p>这边调用了UnSafe类中的<code>getAndInt()</code>方法并且传入了三个参数，分别是当前<strong>当前<code>AtomicInteger</code>对象的引用</strong>,<strong>当前对象的value字段的偏移量</strong>，以及<strong>要增加的值</strong>。<br>进入到UnSafe类中的<code>getAndInt()</code>方法中<img src="/ZzzjhBlog/images/image-20250617231754709.png" alt="image-20250617231754709"></p><p>解析：<br><strong>定义局部变量 <code>var5</code></strong>：</p><ul><li>用于暂存读取到的当前值。</li></ul><p><strong>调用 <code>getIntVolatile(var1, var2)</code> 获取变量当前值</strong>：</p><ul><li><code>var1</code> 是目标对象（如 <code>AtomicInteger</code> 实例）；</li><li><code>var2</code> 是字段的内存偏移量；</li><li>该方法通过 <code>volatile</code> 语义读取字段，保证了可见性。</li></ul><p><strong>进入自旋循环，自适应重试更新值</strong>：</p><ul><li>调用 <code>compareAndSwapInt(var1, var2, var5, var5 + var4)</code>：<ul><li><code>var1</code> 是目标对象；</li><li><code>var2</code> 是字段偏移；</li><li><code>var5</code> 是期望值；</li><li><code>var5 + var4</code> 是要更新的新值；</li></ul></li><li>若 CAS 成功（即当前值仍为 <code>var5</code>），则更新成功，跳出循环；</li><li>若失败（说明有其他线程更新了该值），则重新读取最新值，自旋重试。</li></ul><p><strong>最终返回原值 <code>var5</code></strong>：</p><ul><li>这体现了 <code>getAndAdd</code> 的语义：<strong>返回原值并更新为原值 + delta</strong>。</li></ul><h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><p>我们上面用到了AtomicInteger原子整型，但是我们也可以自己封装我们自己想要的原子类型像<code>AtomicBook（原子书）、AtomicOrder（原子订单）</code>等等。</p><p>在<code>java.util.conrurrent.atomic</code>包下面给我们提供了一个包装类**<code>AtomicReference</code>**这样的一个类帮助我们自己封装原子类。就是这个 <strong>Class AtomicReference<V></strong></p><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 原子引用Demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/18 0:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        AtomicReference&lt;User&gt; userAtomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">13</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">14</span>);</span><br><span class="line">        <span class="comment">//将userAtomicReference 里面的value 设置为 user1</span></span><br><span class="line">        userAtomicReference.set(user1);</span><br><span class="line">        <span class="comment">//调用compareAndSet() 期望值：user1  修改值：user2</span></span><br><span class="line">        System.out.println(userAtomicReference.compareAndSet(user1, user2) + <span class="string">&quot;\t&quot;</span> + userAtomicReference.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String userName, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;User(%s,%s)&quot;</span>,userName,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//trueUser(李四,14)</span></span><br></pre></td></tr></table></figure><h3 id="CAS与自旋锁"><a href="#CAS与自旋锁" class="headerlink" title="CAS与自旋锁"></a>CAS与自旋锁</h3><h4 id="什么是自旋锁？"><a href="#什么是自旋锁？" class="headerlink" title="什么是自旋锁？"></a>什么是自旋锁？</h4><p>自旋锁是一种锁机制，其核心特点是当线程获取锁失败时，<strong>不会让线程进入阻塞状态</strong>，而是通过<strong>循环（自旋）不断尝试获取锁</strong>，直到成功为止。这种方式不会放弃 CPU 时间片，适用于锁持有时间短、竞争不激烈的场景，可<strong>避免线程上下文切换的开销</strong>。</p><h4 id="实现自旋锁"><a href="#实现自旋锁" class="headerlink" title="实现自旋锁"></a>实现自旋锁</h4><p>题目：实现一个自旋锁 不能用synchronized、lock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 实现自旋锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/19 21:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用原子引用 泛型为Thread 来设计</span></span><br><span class="line">    AtomicReference&lt;Thread&gt;  atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前执行线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="comment">// 调用atomicReference的compareAndSet()方法</span></span><br><span class="line">        <span class="comment">// 传入参数 期望值：null  更新值：currentThread 如果期望值和 atomicReference存储的值相等 就更新值为当前线程</span></span><br><span class="line">        <span class="comment">// 成功返回true  失败返回false  然后取反 如果失败就一直循环判断是否锁被占有 达到一个自旋的效果</span></span><br><span class="line">        <span class="keyword">while</span>(!atomicReference.compareAndSet(<span class="literal">null</span>,currentThread))&#123;</span><br><span class="line">            System.out.println(currentThread.getName() + <span class="string">&quot;正在自旋尝试获得锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取成功</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获取自旋锁成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前执行线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="comment">//这边释放锁的时候 传入参数 期望值：currentThread 希望还是我自己  更新值：null</span></span><br><span class="line">        atomicReference.compareAndSet(currentThread,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//获取成功</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;释放自旋成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpinLockDemo</span> <span class="variable">spinLockDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLockDemo</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            spinLockDemo.lock();</span><br><span class="line">            <span class="comment">//暂停几秒钟 模拟业务执行</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">550</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            spinLockDemo.unLock();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让线程A先于线程B获得锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            spinLockDemo.lock();</span><br><span class="line">            <span class="comment">//暂停几秒钟 模拟业务执行</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            spinLockDemo.unLock();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> A获取自旋锁成功</span></span><br><span class="line"><span class="comment"> B正在自旋尝试获得锁</span></span><br><span class="line"><span class="comment"> B正在自旋尝试获得锁</span></span><br><span class="line"><span class="comment"> B正在自旋尝试获得锁</span></span><br><span class="line"><span class="comment"> B正在自旋尝试获得锁</span></span><br><span class="line"><span class="comment"> B正在自旋尝试获得锁</span></span><br><span class="line"><span class="comment"> ......</span></span><br><span class="line"><span class="comment"> A释放自旋成功</span></span><br><span class="line"><span class="comment"> B获取自旋锁成功</span></span><br><span class="line"><span class="comment"> B释放自旋成功</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h3><p><strong>①长时间不断循环自旋 比较消耗CPU</strong></p><p><strong>②ABA问题</strong></p><p>CAS 是多线程环境实现无锁数据结构的常用原子操作，逻辑为：<strong>比较内存当前值与预期值，若相等则更新为新值，否则返回失败</strong>。但 CAS <strong>仅关注 “值是否一致”</strong>，忽略 “值是否在期间被修改过”，ABA 问题由此产生。</p><p><strong>ABA问题产生过程</strong></p><ul><li>线程 1 读取共享变量值为 <code>A</code> 。</li><li>线程 2 将该值先改为 <code>B</code> ，接着又改回 <code>A</code> 。</li><li>线程 1 再次检查变量，发现值仍为 <code>A</code> ，便误以为数据未被修改，继续后续操作，然而数据实际已被改动，可能引发不可预测行为，像无锁队列或栈中，会出现节点引用错误释放、数据丢失等情况</li></ul><p><strong>举例</strong><br><strong>正常情况</strong>：账户初始存款 100，线程 1、2 都要执行取 50 操作。线程 1 先成功扣款，存款变为 50，线程 2 因检测到存款值变化（100→50 ），操作失败，符合预期。</p><ul><li><strong>异常情况（出现 ABA 问题）</strong>：账户初始存款 100，线程 1、2 执行取 50 操作。线程 1 先成功扣款，存款成 50；之后线程 3（或其他操作）给账户转账 50，存款回到 100；线程 2 执行时，发现存款值还是 100（和自己之前读取的预期值一致 ），就再次执行扣款，最终账户扣款两次，出现错误。</li></ul><p><strong>解决方案</strong><br><strong>使用版本号（Versioned Pointers）</strong>：给数据附加版本号，更新变量时<strong>同时更新版本号</strong>，CAS 操作既比较值，也比较版本号。比如原始值为 <code>(A, 1)</code> ，线程修改为 <code>(B, 2)</code> 又改回 <code>(A, 3)</code> ，其他线程 CAS 时，因版本号（1≠3 ）变化，能识别数据已修改。Java 中的 <strong><code>AtomicStampedReference</code></strong> 就是通过这种方式避免 ABA 问题，它可以携带附加版本信息的原子引用 。</p><h3 id="CAS之AtomicStampedReference"><a href="#CAS之AtomicStampedReference" class="headerlink" title="CAS之AtomicStampedReference"></a>CAS之AtomicStampedReference</h3><p>上面说到了CAS中的ABA问题可以用<strong>AtomicStampedReference</strong>来解决</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> juc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/6/19 23:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicStampedReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>,<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">        <span class="comment">//创建AtomicStampedReference实例 泛型为BOOK 传入参数 book 、 流水号</span></span><br><span class="line">        AtomicStampedReference&lt;Book&gt; bookAtomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;Book&gt;(book1,<span class="number">1</span>);</span><br><span class="line">        System.out.println(bookAtomicStampedReference.getReference() + <span class="string">&quot;\t&quot;</span> + bookAtomicStampedReference.getStamp());</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>, <span class="string">&quot;水浒传&quot;</span>);</span><br><span class="line">        <span class="comment">//调用AtomicStampedReference的compareAndSet()方法 传入参数  期望值：book1  更新值：book2  期望版本号：bookAtomicStampedReference.getStamp() 原来的版本号   更新的版本号： bookAtomicStampedReference.getStamp() + 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;修改结果：&quot;</span> + bookAtomicStampedReference.compareAndSet(book1, book2, bookAtomicStampedReference.getStamp(), bookAtomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">        System.out.println(bookAtomicStampedReference.getReference() + <span class="string">&quot;\t&quot;</span> + bookAtomicStampedReference.getStamp());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id, String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Book(%s,%s)&quot;</span>,id,bookName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/ZzzjhBlog/2025/05/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/ZzzjhBlog/2025/05/11/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><p>策略模式是一种行为设计模式，将一系列可以互换的算法或者行为封装到独立的策略类中，并通过上下文在程序运行的时候进行灵活的选择和切换具体的策略。</p><h2 id="策略模式的结构"><a href="#策略模式的结构" class="headerlink" title="策略模式的结构"></a>策略模式的结构</h2><p><strong>抽象策略（Strategy）</strong>：声明所有具体策略类需实现的接口或抽象方法，定义了算法族的公共行为。</p><p><strong>具体策略（ConcreteStrategy）</strong>：实现抽象策略接口，封装具体的算法或行为，每个类对应一种算法。</p><p><strong>上下文（Context）</strong>：持有对抽象策略的引用，负责与外界交互，并在合适的时机调用策略对象的方法以执行对应算法。</p><h2 id="实际场景运用"><a href="#实际场景运用" class="headerlink" title="实际场景运用"></a>实际场景运用</h2><p><strong>商场促销活动 :</strong> 促销是商品的一个行为 , 促销行为 , 设置多个促销行为 , 将其封装到类中 ;</p><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 抽象策略接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PromotionStrategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 促销活动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doPromotion</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原价促销策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmptyPromotionStrategy</span> <span class="keyword">implements</span> <span class="title class_">PromotionStrategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPromotion</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;原价出售&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返现促销策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanXianPromotionStrategy</span> <span class="keyword">implements</span> <span class="title class_">PromotionStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPromotion</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返现出售&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 满减促销策列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManJianPromotionStrategy</span>  <span class="keyword">implements</span> <span class="title class_">PromotionStrategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPromotion</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满减活动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 促销活动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PromotionActivity</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 促销策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PromotionStrategy promotionStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PromotionActivity</span><span class="params">(PromotionStrategy promotionStrategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.promotionStrategy = promotionStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行促销策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executePromotionStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.promotionStrategy.doPromotion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PromotionStrategyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String,PromotionStrategy&gt; PROMOTION_STRATEGY_MAP  = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        PROMOTION_STRATEGY_MAP.put(<span class="string">&quot;满减&quot;</span>,<span class="keyword">new</span> <span class="title class_">ManJianPromotionStrategy</span>());</span><br><span class="line">        PROMOTION_STRATEGY_MAP.put(<span class="string">&quot;返现&quot;</span>,<span class="keyword">new</span> <span class="title class_">FanXianPromotionStrategy</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PromotionStrategyFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的键值获取相应的促销策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> promotionName 促销活动的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 促销活动策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PromotionStrategy <span class="title function_">getPromotionStrategy</span><span class="params">(String promotionName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PROMOTION_STRATEGY_MAP.get(promotionName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;、</span><br><span class="line">        <span class="comment">// 获取满减策略</span></span><br><span class="line">        <span class="type">PromotionStrategy</span> <span class="variable">manjianPromotionStrategy</span> <span class="operator">=</span> PromotionStrategyFactory.getPromotionStrategy(<span class="string">&quot;满减&quot;</span>);</span><br><span class="line">        <span class="comment">//创建策略活动</span></span><br><span class="line">        <span class="type">PromotionActivity</span> <span class="variable">promotionActivity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PromotionActivity</span>(manjianPromotionStrategy);</span><br><span class="line">        <span class="comment">//执行策略</span></span><br><span class="line">promotionActivity.executePromotionStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例2：</p><p>原型<br><strong><img src="/ZzzjhBlog/images/image-20250510214907570.png" alt="image-20250510214907570"></strong></p><p>这段代码是能够满足项目中业务需求的，而且很多已上线生产环境的代码也有这类代码。但是，这一段代码存在存在两个弊端：</p><ol><li>代码的复杂性，正常业务代码逻辑肯定会比这个代码块复杂很多，这也就 <strong>导致了 if-else 的分支以及代码数量过多</strong>。这种方式可以通过将代码拆分成独立函数或者拆分成类来解决。</li><li>开闭原则，价格优惠肯定会 <strong>随着不同的时期作出不同的改变</strong>，或许新增、删除或修改。如果在一个函数中修改无疑是件恐怖的事情，想想可能多个开发者分别进行开发，杂乱无章的注释，混乱的代码逻辑等情况十有八九会发生。</li></ol><p>将上述代码改造为策略模式</p><ol><li>定义抽象策略接口，因为业务使用接口而不是具体的实现类的话，便可以灵活的替换不同的策略；</li><li>定义具体策略实现类，实现自抽象策略接口，其内部封装具体的业务实现；</li><li>定义策略工厂，封装创建策略实现（算法），对客户端屏蔽具体的创建细节。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象策略接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiscountStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 95折策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount95Strategy</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 优惠后价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.95</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 九折策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount9Strategy</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 优惠后价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 八五折策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount85Strategy</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.85</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscountStrategyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String,DiscountStrategy&gt; DISCOUNT_STRATEGY_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DISCOUNT_STRATEGY_MAP.put(<span class="string">&quot;95折&quot;</span>,<span class="keyword">new</span> <span class="title class_">Discount9Strategy</span>());</span><br><span class="line">        DISCOUNT_STRATEGY_MAP.put(<span class="string">&quot;9折&quot;</span>,<span class="keyword">new</span> <span class="title class_">Discount9Strategy</span>());</span><br><span class="line">        DISCOUNT_STRATEGY_MAP.put(<span class="string">&quot;85折&quot;</span>,<span class="keyword">new</span> <span class="title class_">Discount85Strategy</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DiscountStrategy <span class="title function_">getDiscountStrategy</span><span class="params">(String discountStrategyName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DISCOUNT_STRATEGY_MAP.get(discountStrategyName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscountApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DiscountStrategy</span> <span class="variable">discount9Strategy</span> <span class="operator">=</span> DiscountStrategyFactory.getDiscountStrategy(<span class="string">&quot;9折&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">discount</span> <span class="operator">=</span> discount9Strategy.discount(<span class="number">10D</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;打完折后的金额：&quot;</span> + discount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上面代码我们分析得出确实减少了 if-else的设计<strong>在工厂中使用Map存储策略的实现</strong> 虽然在代码的复杂性降低了 如果<strong>新增一个策略那么只需要新增一个算法策略的实现类就可以了</strong> 但是添加策略算法实现 就<strong>需要改动策略工厂中的代码</strong> 还是不符合开闭原则。</p><h2 id="项目中真实的应用场景"><a href="#项目中真实的应用场景" class="headerlink" title="项目中真实的应用场景"></a>项目中真实的应用场景</h2><p>根据上面打折的例子 进行改造实现在项目中不需要改动策略工厂代码 实现开闭原则的策略模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 95折策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount95Strategy</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 优惠后价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.95</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mark</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 九折策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount9Strategy</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price 价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 优惠后价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mark</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 八五折策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount85Strategy</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.85</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mark</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiscountStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象策略接口</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">discount</span><span class="params">(Double price)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略算法的唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">mark</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscountStrategyFactory</span>  <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, DiscountStrategy&gt; discountStrategyHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String,DiscountStrategy&gt; discountStrategyMap = applicationContext.getBeansOfType(DiscountStrategy.class);</span><br><span class="line">        <span class="comment">// 将具体的策略算法标识添加到我们自定义的Map中 方便客户端调用</span></span><br><span class="line">        discountStrategyMap.forEach((key,value) -&gt; discountStrategyHashMap.put(value.mark(),value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据策略的唯一标识来获取策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mark 唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 策略具体实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> DiscountStrategy <span class="title function_">chooseDiscountStrategy</span><span class="params">(String mark)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discountStrategyHashMap.get(mark);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h3><ul><li><strong>抽象策略接口</strong>：<code>DiscountStrategy</code> 定义了 <code>discount(Double price)</code> 及 <code>mark()</code> 两个方法，用于执行折扣计算与策略标识。</li><li><strong>具体策略类</strong>：<code>Discount95Strategy</code>、<code>Discount9Strategy</code>、<code>Discount85Strategy</code> 分别实现不同折扣算法，并通过 <code>mark()</code> 方法返回唯一标识。</li><li><strong>策略工厂</strong>：<code>DiscountStrategyFactory</code> 实现 <code>InitializingBean</code>，在 <code>afterPropertiesSet()</code> 中通过 <code>applicationContext.getBeansOfType(DiscountStrategy.class)</code> 扫描所有策略 Bean 并填充 <code>Map&lt;String, DiscountStrategy&gt;</code>，并提供 <code>chooseDiscountStrategy(String mark)</code> 动态获取策略实例。</li></ul><p>角色详解</p><p><strong>抽象策略（<code>DiscountStrategy</code>）</strong></p><ul><li>定义了算法族的公共接口，符合策略模式中“Strategy”角色：声明了 <code>discount</code> 执行折扣和 <code>mark</code> 返回标识的协议，使上下文与具体算法实现解耦 。</li></ul><p><strong>具体策略（<code>Discount95Strategy</code> 等）</strong></p><ul><li>每个策略类都实现了 <code>discount(Double)</code>，封装各自的运算逻辑（例如 <code>price * 0.95</code>），以及 <code>mark()</code> 方法返回“1”、“2”、“3”等不同标识，便于客户端动态选择 。</li><li>分离算法实现，替换或新增策略时，只要实现该接口并注册为 Bean 即可，无需修改已有代码，满足开闭原则 。</li></ul><p><strong>上下文与工厂（<code>DiscountStrategyFactory</code>）</strong></p><ul><li>作为上下文（Context），持有对策略接口的引用。实现 <code>InitializingBean</code> 接口，在容器初始化完毕后执行 <code>afterPropertiesSet()</code>，一次性收集所有 <code>DiscountStrategy</code>。</li><li>将策略 Bean 按 <code>mark()</code> 值映射到 <code>discountStrategyHashMap</code>，提供 <code>chooseDiscountStrategy(mark)</code> 方法，客户端只需传入标识字符串即可获取对应策略并执行折扣。</li></ul><p><strong>与 Spring 容器的整合</strong></p><ol><li><strong>自动扫描与注入</strong>：各策略类使用 <code>@Component</code> 注解，Spring 容器启动时自动注册为 Bean；工厂类 <code>DiscountStrategyFactory</code> 通过 <code>@Autowired</code> 注入 <code>ApplicationContext</code>，体现了依赖注入（DI）机制。</li><li><strong>Bean 生命周期回调</strong>：工厂实现了 <code>InitializingBean</code>，其 <code>afterPropertiesSet()</code> 回调在所有 Bean 属性注入完成后执行，保证策略 Bean 已全部加载，适合做初始化组装工作 。</li></ol><p>优势与可扩展性</p><ul><li><strong>动态切换</strong>：运行时无需重启或修改业务代码，即可通过改变传入的 <code>mark</code> 值切换不同折扣实现，灵活应对不同促销场景 。</li><li><strong>避免条件分支</strong>：替代传统的 <code>if-else</code>&#x2F;<code>switch</code> 判断，将折扣算法封装到各策略类中，提升可读性和可维护性 。</li><li><strong>易于扩展</strong>：添加新的折扣策略（如满减、会员折扣）时，只需新增实现类并指定唯一 <code>mark</code>，无需触及工厂或现有策略代码，符合开闭原则 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8新特性Optional类</title>
      <link href="/ZzzjhBlog/2025/04/19/Java%208-Optional%E7%B1%BB/"/>
      <url>/ZzzjhBlog/2025/04/19/Java%208-Optional%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-8-Optional类"><a href="#Java-8-Optional类" class="headerlink" title="Java 8 -Optional类"></a>Java 8 -Optional类</h1><h2 id="什么是Optional类？"><a href="#什么是Optional类？" class="headerlink" title="什么是Optional类？"></a>什么是Optional类？</h2><p>Optional类是Java 8 中用来解决<strong>NullPointerExeception</strong>的一个类，该类提供了一种用于表示可选值而非空引用的类级别解决方案。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>传统判断null值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 首先我们调用方法getA()来获取一下A对象吧</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> getA();</span><br><span class="line">        <span class="comment">// 判断a是否空</span></span><br><span class="line">        <span class="keyword">if</span>(a != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(a.getMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a为空值&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这是传统的判断空值的写法</p><p>下面我们来试试使用Optional来解决null值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 老样子我们调用方法getA()来获取一下A对象吧</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> getA();</span><br><span class="line">        Optional&lt;A&gt; optional = Optional.ofNullable(a);</span><br><span class="line">        <span class="comment">// 使用ifPresent来判断是否为null 如果不是输出其中的信息</span></span><br><span class="line">        optional.ifPresent(item -&gt; System.out.println(item.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中可以看到使用Optional类的静态方法<code>ofNullable()</code>来创建optional对象 然后使用ifPresent()判断传入的对象是否为空<br>这边传入的是一个null值 所以控制台是不会打印的</p><p><code>ofNullable()</code>方法源码是这样的<img src="/ZzzjhBlog/images/image-20250419021659553.png" alt="image-20250419021659553"><br>使用三目运算符 判断传入的值是否为空 为空创建一个空的 Optional 对象 不为空就正常创建</p><h2 id="Optional对象创建方法"><a href="#Optional对象创建方法" class="headerlink" title="Optional对象创建方法"></a>Optional对象创建方法</h2><p>我们创建Optional对象可以用很多方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空的 Optional对象</span></span><br><span class="line">Optional&lt;String&gt; empty = Optional.empty();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个非空的Optional对象（注意这边 Optional.of() 方法必须传入的是非空的值 不然编译器就会报错）</span></span><br><span class="line">Optional&lt;String&gt; empty = Optional.of(<span class="string">&quot;Zzzjh&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种就是我们刚刚例子中使用的静态方法 ofNullable() 创建一个即可空又可非空的 Optional 对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(message);</span><br><span class="line">System.out.println(optional); </span><br></pre></td></tr></table></figure><p>然后我们判断值是否存在就是用<code>isPresent()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(message);</span><br><span class="line"><span class="comment">// 存在就输出 true 不存在输出false</span></span><br><span class="line">System.out.println(optional.isPresent()); </span><br></pre></td></tr></table></figure><p>它的底层实现就是<code>!=null</code>来进行判断的</p><h3 id="Optional-的非空表达式"><a href="#Optional-的非空表达式" class="headerlink" title="Optional 的非空表达式"></a>Optional 的非空表达式</h3><p>Optional中使用的是 <strong>ifPresent()方法</strong><br><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Zzzjh&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(msg);</span><br><span class="line"><span class="comment">// ifPresent() 中可以使用函数式编程  这边的代码意思就是 如果optional中值存在那么输出</span></span><br><span class="line">optional.ifPresent(k -&gt; System.out.println(k));</span><br></pre></td></tr></table></figure><h3 id="Optional-获取值"><a href="#Optional-获取值" class="headerlink" title="Optional 获取值"></a>Optional 获取值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Zzzjh&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(msg);</span><br><span class="line">System.out.println(optional.get());</span><br></pre></td></tr></table></figure><p>使用 get()方法获取optional对象中的值</p><p>注意这边可能会报错<br>因为如果你传递的是一个 null值 那么程序运行时就会抛出一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.NoSuchElementException: No value present</span><br><span class="line">at java.util.Optional.get(Optional.java:<span class="number">135</span>)</span><br><span class="line">at optional.OptionalTest01.main(OptionalTest01.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>所以这边还是建议使用 <code>orElseGet()</code> 方法来获取 因为它的底层代码是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(msg);</span><br><span class="line">System.out.println(optional.orElseGet(() -&gt; <span class="string">&quot;optional值不为空&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="Optional-过滤值"><a href="#Optional-过滤值" class="headerlink" title="Optional 过滤值"></a>Optional 过滤值</h3><p>我们可以使用Optional类中<code>filter()</code>方法来过滤值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Zzzjh&quot;</span></span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(msg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码的意思就是 optional值是长度大于3 是否存在 存在返回true 不存在返回false</span></span><br><span class="line">System.out.println(optional.filter(k -&gt; k.length() &gt; <span class="number">3</span>).isPresent());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次添加条件 长度需要大于3 并且小于10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Zzzjh111111111111111111111&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(msg);</span><br><span class="line">System.out.println(optional.filter(k -&gt; k.length() &gt; <span class="number">3</span> &amp;&amp; k.length() &lt; <span class="number">10</span>).isPresent());</span><br></pre></td></tr></table></figure><p>由于<code>filter()</code> 方法的参数类型为 Predicate（Java 8 新增的一个函数式接口），也就是说可以将一个 Lambda 表达式传递给该方法作为条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Zzzjh111111111111111111111&quot;</span>;</span><br><span class="line"><span class="comment">// 创建 Optional 对象</span></span><br><span class="line">Optional&lt;String&gt; optional = Optional.ofNullable(msg);</span><br><span class="line"><span class="comment">// 定义长度大于 3 的条件</span></span><br><span class="line">Predicate&lt;String&gt; len3 = k -&gt; k.length() &gt; <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 定义长度小于 10 的条件</span></span><br><span class="line">Predicate&lt;String&gt; len10 = k -&gt; k.length() &lt; <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 过滤并判断是否存在符合条件的值</span></span><br><span class="line">System.out.println(optional.filter(len3.and(len10)).isPresent());</span><br></pre></td></tr></table></figure><h3 id="Optional-转换值"><a href="#Optional-转换值" class="headerlink" title="Optional 转换值"></a>Optional 转换值</h3><p>在Optional中使用<code>map()</code>方法进行值的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Zzzjh&quot;</span>;</span><br><span class="line">Optional&lt;String&gt; optional = Optional.of(msg);</span><br><span class="line">Optional&lt;Integer&gt; intOpt = nameOptional.map(String::length);</span><br><span class="line">System.out.println( intOpt.orElse(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p><code>map()</code> 方法，该方法可以按照一定的规则将原有 Optional 对象转换为一个新的 Optional 对象，原有的 Optional 对象不会更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;AbCdEfgHiJkLMn&quot;</span>;</span><br><span class="line">       Optional&lt;String&gt; strOptional = Optional.ofNullable(msg);</span><br><span class="line">       Predicate&lt;String&gt; len6 = k -&gt; k.length() &gt; <span class="number">6</span>;</span><br><span class="line">       Predicate&lt;String&gt; len10 = k -&gt; k.length() &lt; <span class="number">15</span>;</span><br><span class="line">       Optional&lt;String&gt; newOptional = strOptional.map(String::toUpperCase).filter(len6.and(len10));</span><br><span class="line">       System.out.println(newOptional.orElseGet(() -&gt; <span class="string">&quot;没有值&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis消息队列</title>
      <link href="/ZzzjhBlog/2025/04/04/Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/ZzzjhBlog/2025/04/04/Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h1><p>学习笔记基于黑马的Redis教程</p><p>Redis中提供了三个不同的方式实现消息队列</p><p><strong>list结构:基于List来实现消息队列</strong><br><strong>PubSub：基本的点对点消息模型</strong><br><strong>Stream：比较完善的消息队列模型</strong></p><h2 id="list结构-基于List来实现消息队列"><a href="#list结构-基于List来实现消息队列" class="headerlink" title="list结构:基于List来实现消息队列"></a>list结构:基于List来实现消息队列</h2><p>消息队列（Message Queue）就是存放消息的队列 Redis的list结构是一个双向队列 很容易模拟出队列效果</p><p>队列是先进先出 那么入口和出口不在一边 因此我们可以利用：<strong>LPUSH</strong>结合<strong>RPOP</strong> 或者<strong>RPUSH</strong> 结合<strong>LPOP</strong>来实现这个队列效果</p><p><img src="/ZzzjhBlog/images/image-20250402133721391.png" alt="image-20250402133721391"></p><p><img src="/ZzzjhBlog/images/image-20250402133730174.png" alt="image-20250402133730174"></p><p>这里需要注意的是<strong>队列中没有消息的时候RPOP或LPOP操作会返回null 不会像JVM阻塞队列那样会阻塞并等待消息</strong>。<br>这里应该<strong>使用BRPOP或者BLPOP来实现阻塞效果</strong></p><p><img src="/ZzzjhBlog/images/image-20250402141534895.png" alt="image-20250402141534895"></p><p><strong>那为什么不直接使用JVM阻塞队列呢？</strong></p><p>第一：消息队列是<strong>JVM以外的独立服务不受JVM内存限制</strong><br>第二：消息队列不仅仅做数据存储，还要确保<strong>数据安全</strong>，<strong>消息队列中的数据做持久化存储</strong>不管是服务宕机还是服务重启消息队列中的消息不会消失</p><h3 id="Redis示例操作"><a href="#Redis示例操作" class="headerlink" title="Redis示例操作"></a>Redis示例操作</h3><p>首先我们执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对于列表 l1 执行BRPOP 对于l1列表执行删除最后一个元素并且返回它</span></span><br><span class="line">BRPOP l1 20 #这里的20指的是阻塞的时间</span><br></pre></td></tr></table></figure><p>然后我们往l1列表中添加元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPUSH l1 e1 e2</span><br></pre></td></tr></table></figure><p>我们可以在马上看到 这边执行了移除最后一个元素的得到的结果</p><p><img src="/ZzzjhBlog/images/image-20250402141847242.png" alt="image-20250402141847242"><br>我们在执行一次 <strong>BRPOP l1 20</strong> 又可以看到</p><p><img src="/ZzzjhBlog/images/image-20250402141947156.png" alt="image-20250402141947156"><br>我们可以直观的了解这个执行过程 <strong>有元素就移除 没有元素就等待对于的阻塞时间（自己定义)</strong></p><p>这就是利用List结构模拟消息队列方式 </p><p><strong>对比JVM的阻塞队列优势</strong><br>①独立于JVM存储 不依赖JVM 不用担心 存储数据上限问题<br>②数据安全 Redis数据支持持久化存储 RDB 和 AOF方式<br>③满足消息的有序性</p><p><strong>List消息队列的缺点</strong><br>①无法避免消息丢失 比如里从队列中拿出消息（从队列中删除消息） 但是没来的及处理Redis宕机了 那么其他消费者也拿不到这条消息 造成消息丢失<br>②只支持单消费者</p><h2 id="PubSub：基本的点对点消息模型"><a href="#PubSub：基本的点对点消息模型" class="headerlink" title="PubSub：基本的点对点消息模型"></a>PubSub：基本的点对点消息模型</h2><p><strong>PubSub</strong>（发布订阅 Publis SubScribe）这个是Redis2.0 引入的消息传递模型。 就是消费者可以订阅一个或者多个channel 生产者向channel发送消息后 所有的订阅者都能够收到相关的消息</p><p><strong>SUBSCRIBE channel [channel] ：订阅一个或多个频道</strong></p><p><strong>PUBLISH channel msg：向一个频道发送消息</strong></p><p><strong>PSUBSCRIBE pattern [pattern] ： 订阅与pattern格式匹配的所有频道</strong></p><p><strong>匹配符号写法：</strong><br><img src="/ZzzjhBlog/images/image-20250402200449048.png" alt="image-20250402200449048"></p><p><strong>h?llo 代表当个任意字符</strong><br><strong>h*llo 代表中间可以添加任意多个字符</strong><br><strong>h[ae]lloo 代表只能是 helloo或者 hallo</strong></p><p><img src="/ZzzjhBlog/images/image-20250402165302164.png" alt="image-20250402165302164"></p><h3 id="Redis操作示例"><a href="#Redis操作示例" class="headerlink" title="Redis操作示例"></a><strong>Redis操作示例</strong></h3><p>开启三个Redis控制台窗口</p><p>一个使用subscribe</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe order.q1</span><br></pre></td></tr></table></figure><p>一个使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psubscribe order.*</span><br></pre></td></tr></table></figure><p>一个发布消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish order.q1 hello3</span><br></pre></td></tr></table></figure><p>此时两个都会收到信息</p><p>如果发布消息的频道改成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish order.q2 hello3</span><br></pre></td></tr></table></figure><p>那么第一个订阅<strong>subscribe order.q1</strong>频道的就接受不到相关消息</p><h3 id="PubSub的消息队列优缺点"><a href="#PubSub的消息队列优缺点" class="headerlink" title="PubSub的消息队列优缺点"></a>PubSub的消息队列优缺点</h3><p><strong>优点：</strong><br>①采用发布订阅模型 支持多生产 多消费</p><p><strong>缺点：</strong><br>①不支持数据持久化（PubSub 的消息是实时的，默认情况下不会被持久化到磁盘，所以即使开启了 AOF 或 RDB，也不会保存 PubSub 的消息）<br>②无法避免消息丢失 （Redis宕机那么这些临时数据就丢失了）<br>③消息堆积有上限 超出时候数据丢失</p><h2 id="Stream：比较完善的消息队列模型"><a href="#Stream：比较完善的消息队列模型" class="headerlink" title="Stream：比较完善的消息队列模型"></a>Stream：比较完善的消息队列模型</h2><p>Stream是Redis 5.0 引入的一种新的数据类型 可以实现一个功能非常完善的一个消息队列</p><p><strong>发送消息的命令：XADD</strong><br><img src="/ZzzjhBlog/images/image-20250402222635851.png" alt="image-20250402222635851"></p><p><strong>创建示例：</strong></p><p><img src="/ZzzjhBlog/images/image-20250402223245390.png" alt="image-20250402223245390"></p><p>向名为s1的队列中添加一条消息 k1 v1 消息id自动生成 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">xadd s1 * k1 v1</span></span><br><span class="line">1743604433411-0 #返回的消息id</span><br></pre></td></tr></table></figure><p><strong>读取消息方式：XREAD</strong></p><p><img src="/ZzzjhBlog/images/image-20250402223808744.png" alt="image-20250402223808744"></p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XREAD COUNT 1 STREAMS s1 0  #COOUNT 1 表示读取一条消息  STREAMS s1 表示从s1队列中读取  0 表示从第一个位置开始读</span><br><span class="line">s1</span><br><span class="line">1743604433411-0</span><br><span class="line">k1</span><br><span class="line">v1</span><br></pre></td></tr></table></figure><p>在Stream中一条消息被读取之后<strong>不会消失 永久存在可以被多个消费者读取</strong></p><p>读取最新消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">XREAD COUNT 1 STREAMS $ <span class="comment">#读取最新消息使用美刀符</span></span></span><br></pre></td></tr></table></figure><p><strong>如果队列中所有的消息都被读取过了那么 会返回空</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XREAD COUNT 1 STREAMS s1 $</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>如果想要等待读取最新的消息 那么就要阻塞它就是命令中加上BLOCK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREAD COUNT 1 BLOCK 0 STREAMS s1 $ #BLOCK 代表阻塞获取最新消息 后面跟上阻塞时间 如果是0那么代表永久的阻塞</span><br></pre></td></tr></table></figure><p>此时阻塞获取后我们开启另一个控制台再次添加消息 可以得到输出结果</p><p>存入消息</p><p><img src="/ZzzjhBlog/images/image-20250402225237905.png" alt="image-20250402225237905"><br>另一个控制台结果<br><img src="/ZzzjhBlog/images/image-20250402225328380.png" alt="image-20250402225328380"></p><p><img src="/ZzzjhBlog/images/image-20250402225428703.png" alt="image-20250402225428703"></p><p><img src="/ZzzjhBlog/images/image-20250402225553988.png" alt="image-20250402225553988"></p><p><strong>问题复现：</strong></p><p>首先阻塞读取一次<br><img src="/ZzzjhBlog/images/image-20250402230426515.png" alt="image-20250402230426515"></p><p>发送消息</p><p><img src="/ZzzjhBlog/images/image-20250402230345669.png" alt="image-20250402230345669"><br>然后这边就读取到了<br><img src="/ZzzjhBlog/images/image-20250402230524916.png" alt="image-20250402230524916"><br>在处理这条消息的期间进来了很多条消息<br><img src="/ZzzjhBlog/images/image-20250402230602056.png" alt="image-20250402230602056"><br>然后它下次再次阻塞读取最新的消息那么此时读取到的消息就是<br><img src="/ZzzjhBlog/images/image-20250402230637308.png" alt="image-20250402230637308"><br>在这之间就漏读取了很多条消息</p><h3 id="STREAM类型的消息队列的优缺点"><a href="#STREAM类型的消息队列的优缺点" class="headerlink" title="STREAM类型的消息队列的优缺点"></a>STREAM类型的消息队列的优缺点</h3><p><strong>优点：</strong><br>①消息可以回溯(Redis Stream 实现的消息队列<strong>支持持久化</strong>，其设计目标之一就是解决 PubSub 消息可靠性不足的问题)<br>②一个消息可以被多个消费者读取<br>③可以阻塞读取</p><p><strong>缺点：</strong><br>①有消息漏读的风险</p><h2 id="基于Stream的消息队列-消费者组"><a href="#基于Stream的消息队列-消费者组" class="headerlink" title="基于Stream的消息队列-消费者组"></a>基于Stream的消息队列-消费者组</h2><p>消费者组就是将多个消费者划分到一个组中 监听同一个队列</p><h3 id="三大特点"><a href="#三大特点" class="headerlink" title="三大特点"></a>三大特点</h3><p><img src="/ZzzjhBlog/images/image-20250402235649269.png" alt="image-20250402235649269"></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>创建消费者组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATE key groupName ID [MKSTREAM]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">key：队列名称</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">groupName：消费者组名称</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ID：起始 ID 标示，$ 代表队列中最后一个消息，0 则代表队列中第一个消息</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MKSTREAM：队列不存在时自动创建队列</span></span><br></pre></td></tr></table></figure><p><strong>其他常见命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除指定的消费者组</span></span><br><span class="line">XGROUP DESTORY key groupName</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给指定的消费者组添加消费者</span></span><br><span class="line">XGROUP CREATECONSUMER key groupname consumername</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除消费者组中的指定消费者</span></span><br><span class="line">XGROUP DELCONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><h3 id="Redis操作示例-1"><a href="#Redis操作示例-1" class="headerlink" title="Redis操作示例"></a><strong>Redis操作示例</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建消费者组  s1 队列名称  g1 组名称  0代表从队列第一条消息开始 如果不想从第一条消息开始 就用 $ 代表从最新消息开始</span> </span><br><span class="line">XGROUP CREATE s1 g1 0 </span><br></pre></td></tr></table></figure><p><strong>从消费者组读取消息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key …] ID [ID …]</span><br></pre></td></tr></table></figure><p>group：消费组名称<br>● consumer：消费者名称，若消费者不存在，会自动创建一个消费者<br>● count：本次查询的最大数量<br>● BLOCK milliseconds：无消息时最长等待时间<br>● NOACK：无需手动 ACK，获取消息后自动确认<br>● STREAMS key：指定队列名称<br>● ID：获取消息的起始 ID：<br>● “&gt;”：从下一个未消费的消息开始<br>● 其它：根据指定 ID 从 pending-list 中获取已消费但未确认的消息（如 0，是从 pending-list 中的第一个消息开始）</p><p><strong>从消费者组读取消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP GROUP g1 c1 COUNT 1  BLOCK 2000 STREAMS s1  &gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">g1 组名</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">c1 消费者名 不存在会自动创建</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BLOCK 2000 阻塞2s</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">STREAMS s1 队列名称参数</span></span><br></pre></td></tr></table></figure><p>结果：<br><img src="/ZzzjhBlog/images/image-20250403005015859.png" alt="image-20250403005015859"></p><p>如果此时换到另一个控制台进行读取那么就会从k2 v2开始读取这是它的<strong>消息标识</strong>的一个特点</p><p><strong>读一个消息就要确认一个消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XACK key group id[id ...]</span><br></pre></td></tr></table></figure><ul><li>key 队列名称</li><li>group 组名称</li><li>id  需要确认的消息id</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XACK s1 g1 1743604433411-0</span><br></pre></td></tr></table></figure><p>这样消息就会从pendingList中移除了 这边也可以写多个id</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-Stream</title>
      <link href="/ZzzjhBlog/2025/04/04/Java8-Stream/"/>
      <url>/ZzzjhBlog/2025/04/04/Java8-Stream/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><h3 id="什么是Stream？"><a href="#什么是Stream？" class="headerlink" title="什么是Stream？"></a>什么是Stream？</h3><p>Stream也叫Stream流 是JDK8开始新增的一套API（java.util.stream.*） <strong>可以用来操作集合或者数组的数据</strong></p><h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><p>Stream流大量的<strong>结合了Lambda</strong>的语法风格 提供了<strong>更加强大 更简单</strong>的方式操作集合或者数组中的数据 <strong>代码变得更加简洁 可读性更好</strong></p><p>简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;aab&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ac&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;aad&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ae&quot;</span>);</span><br><span class="line">        <span class="comment">// 把集合中所有 &#x27;a&#x27; 开头 并且是3个字符的元素存储到一个新的集合</span></span><br><span class="line">        <span class="comment">// 传统写法</span></span><br><span class="line">        ArrayList&lt;String&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.startsWith(<span class="string">&quot;a&quot;</span>) &amp;&amp; str.length() == <span class="number">3</span>)&#123;</span><br><span class="line">                newList.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(newList);</span><br><span class="line">        <span class="comment">// stream流写法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代码解析：filter 代表过滤  filter()中可以书写Lambda表达式</span></span><br><span class="line"><span class="comment">         * each 代表集合中每一个元素</span></span><br><span class="line"><span class="comment">         * each.startsWith(&quot;a&quot;) &amp;&amp; each.length() == 3 判断条件</span></span><br><span class="line"><span class="comment">         * collect(Collectors.toList()) 将筛选出来的结果转换为集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; streamList = list.stream()</span><br><span class="line">                .filter(each -&gt; each.startsWith(<span class="string">&quot;a&quot;</span>) &amp;&amp; each.length() == <span class="number">3</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(streamList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream流使用步骤图解</p><p><img src="/ZzzjhBlog/images/image-20250403215751473.png" alt="image-20250403215751473"></p><h3 id="Stream常用方法"><a href="#Stream常用方法" class="headerlink" title="Stream常用方法"></a>Stream常用方法</h3><p>获取Stream流<br>集合的话可以直接使用stream()获取Stream流</p><p><img src="/ZzzjhBlog/images/image-20250403220007933.png" alt="image-20250403220007933"></p><p>数组的话需要使用Arrays.stream（） </p><p><img src="/ZzzjhBlog/images/image-20250403221055973.png" alt="image-20250403221055973"></p><p>如果像是Map的话你是没办法直接通过stream()来获取Stream流因为它不是Collection<br>对于Map我们可以这样来获取Stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;d&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取键的集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="comment">// 通过键的集合获取stream流</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = keySet.stream();</span><br><span class="line">        <span class="comment">// 获取值的集合</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="comment">// 通过值的集合获取Stream流</span></span><br><span class="line">        Stream&lt;String&gt; valuesStream = values.stream();</span><br><span class="line"><span class="comment">// 也可以通过整体进行处理</span></span><br><span class="line">        <span class="comment">// 获取键值对集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        entries.stream()</span><br><span class="line">            .filter(e -&gt; e.getKey().contains(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">            .forEach(e -&gt; System.out.println(e.getKey() + <span class="string">&quot;-----&quot;</span> + e.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Stream中间方法"><a href="#Stream中间方法" class="headerlink" title="Stream中间方法"></a>Stream中间方法</h3><p><img src="/ZzzjhBlog/images/image-20250403222411173.png" alt="image-20250403222411173"></p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p><strong>题目：过滤和转换</strong><br>有一个 <code>List&lt;String&gt;</code> 存储字符串数字（如 <code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</code>），请使用流：</p><ul><li>过滤出能被 2 整除的数字字符串</li><li>将过滤后的字符串转为整数并计算平方</li><li>最后收集到列表中输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; res = list.stream()</span><br><span class="line">                .filter(each -&gt; Integer.parseInt(each) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .map(each -&gt; &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(each);</span><br><span class="line">                    <span class="keyword">return</span> num * num;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>代码解析</strong>：</p><ol><li><strong>创建字符串数字列表</strong>：使用 <code>Arrays.asList</code> 构建初始数据 <code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;6&quot;, &quot;8&quot;]</code>。</li><li><strong>过滤操作</strong>：<code>filter</code> 中通过 <code>Integer.parseInt(numStr) % 2 == 0</code> 判断字符串转整数后能否被 2 整除。</li><li><strong>转换与计算</strong>：<code>map</code> 先将字符串转整数，再计算平方（<code>num * num</code>）。</li><li><strong>收集结果</strong>：最后用 <code>collect(Collectors.toList())</code> 将处理后的元素收集到列表并输出。</li></ol><p><strong>题目：综合操作</strong></p><p>给定 <code>List&lt;Integer&gt; numList = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)</code>，要求：</p><ul><li>先去重 </li><li>再按升序排序</li><li>跳过前 2 个元素</li><li>取前 3 个元素</li><li>最后输出结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;Integer&gt; res = list.stream().distinct().sorted().skip(<span class="number">2</span>).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>代码解析</strong>：</p><ol><li><strong><code>distinct()</code> 去重</strong>：原始列表 <code>[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]</code> 去重后得到 <code>[3, 1, 4, 5, 9, 2, 6]</code>。</li><li><strong><code>sorted()</code> 排序</strong>：对去重后的元素升序排序，结果为 <code>[1, 2, 3, 4, 5, 6, 9]</code>。</li><li><strong><code>skip(2)</code> 跳过前 2 个元素</strong>：跳过 <code>1</code> 和 <code>2</code>，剩余 <code>[3, 4, 5, 6, 9]</code>。</li><li><strong><code>limit(3)</code> 取前 3 个元素</strong>：得到 <code>[3, 4, 5]</code>。</li><li><strong><code>collect(Collectors.toList())</code> 收集结果</strong>：最终输出 <code>[3, 4, 5]</code>。</li></ol><p> <strong>补充: 如果是自定义类型对象（如果希望内容一样就是重复 需要重写对象的hashCode 和 equals方法）</strong></p><p><strong>题目：复杂map操作</strong><br>有一个 <code>List&lt;String&gt;</code> 存储单词（如 <code>[&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;]</code>），使用流：</p><ul><li>将每个单词首字母转大写，其余小写（例如 <code>hello</code> 转 <code>Hello</code>）</li><li>过滤出长度大于 4 的单词</li><li>最后收集到列表中输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        List&lt;String&gt; res = list.stream()</span><br><span class="line">                <span class="comment">// 先转换：首字母大写，其余小写</span></span><br><span class="line">                .map(each -&gt; each.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + each.substring(<span class="number">1</span>).toLowerCase())</span><br><span class="line">                <span class="comment">// 再过滤：处理后的单词长度大于4</span></span><br><span class="line">                .filter(each -&gt; each.length() &gt; <span class="number">4</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(res); <span class="comment">// 输出：[Hello, World]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>题目：合并与处理</strong><br>有两个 <code>List&lt;Integer&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; listA = Arrays.asList(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">List&lt;Integer&gt; listB = Arrays.asList(<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>);</span><br></pre></td></tr></table></figure><p>要求：</p><ul><li>合并两个列表的流</li><li>对合并后的元素进行 <code>* 2</code> 操作</li><li>过滤出大于 50 的元素</li><li>最后收集到列表中输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; listA = Arrays.asList(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">        List&lt;Integer&gt; listB = Arrays.asList(<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; concat = Stream.concat(listA.stream(), listB.stream());</span><br><span class="line">        List&lt;Integer&gt; res = concat.map(each -&gt; each * <span class="number">2</span>)</span><br><span class="line">                .filter(each -&gt; each &gt; <span class="number">50</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="代码执行流程"><a href="#代码执行流程" class="headerlink" title="代码执行流程"></a>代码执行流程</h3><ol><li><strong>合并流</strong>：<code>Stream.concat(listA.stream(), listB.stream())</code> 将两个列表合并为一个流，元素顺序为 <code>[10, 20, 30, 40, 50, 60]</code>。</li><li><strong>元素翻倍</strong>：<code>map(each -&gt; each * 2)</code> 将每个元素乘以 2，得到 <code>[20, 40, 60, 80, 100, 120]</code>。</li><li><strong>过滤条件</strong>：<code>filter(each -&gt; each &gt; 50)</code> 筛选出大于 50 的元素，结果为 <code>[60, 80, 100, 120]</code>。</li><li><strong>收集结果</strong>：最终输出 <code>[60, 80, 100, 120]</code>。</li></ol><p><strong>补充：对于Stream中sorted的补充 如果你是自定义类型对象你需要自己创建比较器 或者在应用对象中有定义比较规则</strong></p><h3 id="Stream创建的终结方法："><a href="#Stream创建的终结方法：" class="headerlink" title="Stream创建的终结方法："></a>Stream创建的终结方法：</h3><p><img src="/ZzzjhBlog/images/image-20250403231816143.png" alt="image-20250403231816143"></p><p><strong>题目 1：<code>forEach</code> 遍历操作</strong></p><p>给定 <code>List&lt;Integer&gt; numList = Arrays.asList(1, 3, 5, 7, 9)</code>，使用流的 <code>forEach</code> 方法遍历输出所有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">       List&lt;Integer&gt; numList = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>);</span><br><span class="line">       numList.stream().forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>题目 2：<code>count</code> 统计数量</strong></p><p>已知 <code>List&lt;String&gt; fruitList = Arrays.asList(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;date&quot;, &quot;grape&quot;)</code>，使用流统计长度大于 5 的字符串数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; fruitList = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;grape&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> fruitList.stream()</span><br><span class="line">                .filter(each -&gt; each.length() &gt; <span class="number">5</span>)</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>题目3：<code>max</code> 求最大值</strong><br>定义员工类 <code>Employee</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法、getter 省略  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现有 <code>List&lt;Employee&gt; employeeList</code>，使用流和 <code>max</code> 方法获取薪资最高的员工</p><p>employee对象初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/4/3 23:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小红&quot;</span>, <span class="number">8000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小蓝&quot;</span>, <span class="number">7650</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小绿&quot;</span>, <span class="number">9000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小紫&quot;</span>, <span class="number">7000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">5500</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        employees.add(a);</span><br><span class="line">        employees.add(b);</span><br><span class="line">        employees.add(c);</span><br><span class="line">        employees.add(d);</span><br><span class="line">        employees.add(e);</span><br><span class="line"></span><br><span class="line">        Optional&lt;Employee&gt; max = employees.stream().max((o1, o2) -&gt; Integer.compare(o1.getSalary(),o2.getSalary()));</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> max.get();</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>收集Stream流：就是把Stream流操作后的结果转回到集合或者数组中</strong></p><p><img src="/ZzzjhBlog/images/image-20250404002549751.png" alt="image-20250404002549751"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/ZzzjhBlog/2025/04/01/%E9%9B%86%E5%90%88/"/>
      <url>/ZzzjhBlog/2025/04/01/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="/ZzzjhBlog/images/%E9%9B%86%E5%90%88.png" alt="集合"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>①可以<strong>动态的保存</strong>任意多个对象 使用比较方便<br>②提供了一系列方便的操作对象的方法add、remove、set、get等等w</p><p>java的集合类 分为两大类<br>单列集合：Collection<br>双列集合：Map</p><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>Collection接口<strong>实现类</strong>的特点<br>public interface Collection <E> extends <strong>Iterable</strong><E><br>①collection实现类可以存放多个元素 每个元素可以是Object类及其子类<br>②有些collection的实现类 是有序的(List) 有些是无序的<Set><br>③Collection接口没有直接实现的子类 是通过它的子接口Set 和 List来实现。</p><p><strong>Collectio接口遍历元素的方法</strong></p><p><strong>方法一：使用Iterator（迭代器）</strong><br>①Iterator对象称为迭代器 <strong>主要用于遍历Colleciton集合中的元素</strong><br>②所有实现了Collection接口的集合类都有一个Iteratio迭代器<br>③Iterator 的结构<br>一个集合迭代器的执行原理<br><img src="/ZzzjhBlog/images/image-20240924015615583.png" alt="image-20240924015615583"></p><p><img src="/ZzzjhBlog/images/image-20240924015549430.png" alt="image-20240924015549430"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> arrayList.iterator();<span class="comment">//得到一个集合的迭代器对象</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123; <span class="comment">//hasNext()：判断是否还有下一个元素</span></span><br><span class="line">    <span class="comment">//next() 返回下一个元素</span></span><br><span class="line">    System.out.println(interator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;雪豹&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;孙笑川&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;赛小息&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//c = [丁真,雪豹,孙笑川,赛小息]</span></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line">        <span class="comment">/*System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">        System.out.println(iterator.next());*/</span></span><br><span class="line">        <span class="comment">//超出集合长度会报异常NoSuchElementException没有此元素 集合中有几个取几次</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行流程 当我们程序调用 iterator()方法的时候 一开始默认开始在 集合的第一个元素位置上</span></span><br><span class="line">        <span class="comment">//然后开始调用 hasNext()方法判断当前位置是否有数据 有返回true 没有 false</span></span><br><span class="line">        <span class="comment">//然后接下来判断有数据 执行 next()方法 获取当前位置元素 并且将迭代器位置 移动至下一个元素处 一直如此 直到 iterator()方法 为false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><p>​执行流程 当我们程序调用 iterator()方法的时候 一开始默认开始在 集合的第一个元素位置上<br>​        然后开始调用 hasNext()方法判断当前位置是否有数据 有返回true 没有 false<br>​        然后接下来判断有数据 执行 next()方法 获取当前位置元素 并且将迭代器位置 移动至下一个元素处 一直如此 直到 iterator()方法 为false</p><p><strong>注意事项</strong><br>在<strong>调用next()方法时</strong> 最好是<strong>每次hasNext()判断后只调用一次</strong> 如果<strong>调用两次及以上 会出现越界问题</strong></p><p>④Iterator只用于遍历集合 Iterator本身不存放对象</p><p><strong>方法二：增强for循环</strong></p><p>增强for循环 可以代替iterator迭代器<br>特点：<strong>增强for 循环就是简化版的 iterator</strong><br>本质一样<strong>只能用于 遍历集合或数组</strong></p><p><strong>底层就是迭代器</strong></p><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素类型 元素名 : 集合名或数组名字)&#123;</span><br><span class="line">    访问元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;雪豹&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;孙笑川&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;赛小息&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//c = [丁真,雪豹,孙笑川,赛小息]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : collection) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方式三：Lambda表达式</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Iterator01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;雪豹&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;孙笑川&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;赛小息&quot;</span>);</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//c = [丁真,雪豹,孙笑川,赛小息]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lambda表达式遍历</span></span><br><span class="line">        collection.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//可以简化</span></span><br><span class="line">        collection.forEach((String s) -&gt; &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//继续简化</span></span><br><span class="line">        collection.forEach(s-&gt; System.out.println(s));</span><br><span class="line">        <span class="comment">//最终</span></span><br><span class="line">        collection.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a><strong>List接口</strong></h3><h4 id="List接口基本介绍"><a href="#List接口基本介绍" class="headerlink" title="List接口基本介绍"></a><strong>List接口基本介绍</strong></h4><p>List接口是Collection接口的子接口<br>①List集合类中元素有序<br>②List集合中的每个元素都有其对应的顺序索引<br>③List容器中的元素都对应一个整数类型的序号记载<br>④List接口的实现类有 <strong>ArrayList、LinkedList、Vector</strong></p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p><strong>有序 可重复 有索引</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//add:添加单个元素</span></span><br><span class="line">        arrayList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="number">10</span>);</span><br><span class="line">        arrayList.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//remove：移除指定元素</span></span><br><span class="line">        <span class="comment">//删除第一个元素</span></span><br><span class="line">        arrayList.remove(<span class="number">0</span>);  <span class="comment">//arrayList.remove(&quot;jack&quot;);</span></span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//contains：查找元素是否存在</span></span><br><span class="line">        System.out.println(arrayList.contains(<span class="string">&quot;jack&quot;</span>) ? <span class="string">&quot;存在&quot;</span> : <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">        <span class="comment">//size：获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;长度 &quot;</span> + arrayList.size());</span><br><span class="line">        <span class="comment">//isEmpty：判断是否为空</span></span><br><span class="line">        System.out.println(arrayList.isEmpty() ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">        <span class="comment">//clear：清空</span></span><br><span class="line">        arrayList.clear();</span><br><span class="line">        <span class="comment">//addAll：添加多个元素 传入的是另一个List</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">addList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        addList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        addList.add(<span class="number">20</span>);</span><br><span class="line">        addList.add(<span class="literal">false</span>);</span><br><span class="line">        addList.add(<span class="number">1000</span>);</span><br><span class="line">        arrayList.addAll(addList);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        <span class="comment">//containsAll：查找多个元素是否存在</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">containList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        containList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        containList.add(<span class="number">20</span>);</span><br><span class="line">        System.out.println(arrayList.containsAll(containList));</span><br><span class="line">        <span class="comment">//removeAll：删除多个元素</span></span><br><span class="line">        arrayList.removeAll(containList);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ArrayList底层原理"><a href="#ArrayList底层原理" class="headerlink" title="ArrayList底层原理"></a><strong>ArrayList底层原理</strong></h5><p>ArrayList <strong>底层基于数组实现</strong>的<br><strong>①</strong>数组基本特点查询数据快（是根据索引查询数据）：查询数据通过地址值和索引定位 <strong>查询任意数据耗时相同</strong></p><p><strong>②</strong>删除效率低：可能<strong>需要把后面很多的数据进行前移</strong></p><p><strong>③</strong>添加效率极低：可能<strong>需要把后面很多数据后移</strong>，在添加数据；或者也<strong>可能需要进行数组扩容</strong></p><h5 id="创建ArrayList底层执行流程"><a href="#创建ArrayList底层执行流程" class="headerlink" title="创建ArrayList底层执行流程"></a>创建ArrayList底层执行流程</h5><p>①利用无参数构造器创建的集合 会在底层创建一个默认长度为0的数组<br>②添加第一个元素的时候 底层会创建一个新的长度为10的数组<br>③存满的时候 会扩容1.5倍<br>④如果一次添加多个元素 1.5倍还放不下 则新创建数组的长度以实际为准</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p><strong>有序 可重复 有索引</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//add:添加单个元素</span></span><br><span class="line">        linkedList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="number">10</span>);</span><br><span class="line">        linkedList.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">        <span class="comment">//remove：移除指定元素</span></span><br><span class="line">        <span class="comment">//删除第一个元素</span></span><br><span class="line">        linkedList.remove(<span class="number">0</span>);  <span class="comment">//arrayList.remove(&quot;jack&quot;);</span></span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">        <span class="comment">//contains：查找元素是否存在</span></span><br><span class="line">        System.out.println(linkedList.contains(<span class="string">&quot;jack&quot;</span>) ? <span class="string">&quot;存在&quot;</span> : <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">        <span class="comment">//size：获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;长度 &quot;</span> + linkedList.size());</span><br><span class="line">        <span class="comment">//isEmpty：判断是否为空</span></span><br><span class="line">        System.out.println(linkedList.isEmpty() ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">        <span class="comment">//clear：清空</span></span><br><span class="line">        linkedList.clear();</span><br><span class="line">        <span class="comment">//addAll：添加多个元素 传入的是另一个List</span></span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">addList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        addList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        addList.add(<span class="number">20</span>);</span><br><span class="line">        addList.add(<span class="literal">false</span>);</span><br><span class="line">        addList.add(<span class="number">1000</span>);</span><br><span class="line">        linkedList.addAll(addList);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">        <span class="comment">//containsAll：查找多个元素是否存在</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">containList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        containList.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        containList.add(<span class="number">20</span>);</span><br><span class="line">        System.out.println(linkedList.containsAll(containList));</span><br><span class="line">        <span class="comment">//removeAll：删除多个元素</span></span><br><span class="line">        linkedList.removeAll(containList);</span><br><span class="line">        System.out.println(linkedList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinkedList集合的底层原理"><a href="#LinkedList集合的底层原理" class="headerlink" title="LinkedList集合的底层原理"></a>LinkedList集合的底层原理</h5><p>LinkedList底层基于<strong>双向链表</strong>实现的<br>线程不安全没有实现同步<br>可以添加任何元素 可以重复 包括null</p><p><strong>什么是链表</strong><br>链表分为 单向链表 和 双向链表</p><p><strong>单向链表</strong><br>链表中的<strong>节点是独立的对象</strong> 在内存中是<strong>不连续的</strong> 每个节点<strong>包含了数据值和下一个节点的地址</strong><br><img src="/ZzzjhBlog/images/image-20240924170119841.png" alt="image-20240924170119841"></p><p><strong>单向链表特点</strong><br>①查询慢 无论查询哪个数据都要从头开始找<br>②增删相对数组比较快</p><p><strong>双向链表</strong></p><p>双向链表就是 链表中每个节点 <strong>不仅包含下一个节点的地址 还包含上一个节点的地址</strong></p><p><img src="/ZzzjhBlog/images/image-20240924170427498.png" alt="image-20240924170427498"></p><p><strong>双向链表特点</strong></p><p>①查询慢 增删相对较快 但是<strong>对首尾的元素进行增删改查的速度是极快的</strong><br>②LinkedList 新增了很多首位操作的特有方法</p><p><strong>应用场景</strong>：可以用来设计队列</p><p><strong>示例：</strong><br>模拟一个简单的双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟一个简单的双向链表</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a-&gt;b&gt;c</span></span><br><span class="line">        <span class="comment">// c-&gt;b-&gt;a</span></span><br><span class="line">        a.next = b;</span><br><span class="line">        b.next = c;</span><br><span class="line">        c.pre = b;</span><br><span class="line">        b.pre = a;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> a; <span class="comment">//a 就是链表头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> c; <span class="comment">//c 就是链表尾节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从头到尾遍历</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//b 和c 之间插入一个节点d</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="comment">//让b的下一个节点指向 d</span></span><br><span class="line">        b.next = d;</span><br><span class="line">        <span class="comment">//让d的下一个节点指向 c</span></span><br><span class="line">        d.next = c;</span><br><span class="line">        <span class="comment">//让c的上一个节点指向 d</span></span><br><span class="line">        c.pre = d;</span><br><span class="line">        <span class="comment">//再次遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        <span class="comment">//让头节点再次指向a</span></span><br><span class="line">        first = a;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Node类 Node对象代表链表中的一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object item; <span class="comment">//真正存放数据的地方</span></span><br><span class="line">    <span class="keyword">public</span> Node next; <span class="comment">//存放指向下一个节点</span></span><br><span class="line">    <span class="keyword">public</span> Node pre;<span class="comment">//存放指向上一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.item = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;Node name = &quot;</span> + item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ArrayList 和 LinkedList比较</strong></p><p><img src="/ZzzjhBlog/images/image-20241007161508869.png" alt="image-20241007161508869"></p><h4 id="Vecotr"><a href="#Vecotr" class="headerlink" title="Vecotr"></a>Vecotr</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>Vector类实现了一个动态数组，和ArrayList类似，两者不同的是Vector是线程安全的。</p><p><img src="/ZzzjhBlog/images/image-20250401150402005.png" alt="image-20250401150402005"></p><p>Vector 是<strong>矢量队列</strong>，它是JDK1.0版本添加的类。继承于AbstractList，实现了List, RandomAccess, Cloneable这些接口。 Vector 继承了AbstractList，实现了List；所以，<strong>它是一个队列，支持相关的添加、删除、修改、遍历等功能。</strong> Vector 实现了RandmoAccess接口，即提供了<strong>随机访问功能</strong>。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在Vector中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。 Vector 实现了Cloneable接口，即实现clone()函数。它能被克隆。</p><p>和ArrayList不同，<strong>Vector中的操作是线程安全的 Vector类的操作方法中带有synchronized关键字  某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性。</strong></p><p><img src="/ZzzjhBlog/images/image-20250401165311846.png" alt="image-20250401165311846"></p><p><img src="/ZzzjhBlog/images/image-20250401165410794.png" alt="image-20250401165410794"></p><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>①无序（添加和取出的顺序不一致）没有索引<br>②不允许重复元素 所以最多包含一个null<br>③接口的实现 类有 <strong>HashSet</strong> 和 <strong>TreeSet</strong></p><h4 id="Set接口常用方法"><a href="#Set接口常用方法" class="headerlink" title="Set接口常用方法"></a>Set接口常用方法</h4><p>和List接口一样 Set接口也是Collection的子接口 因此 常用方法和Collection接口一样</p><h4 id="Set接口遍历方法"><a href="#Set接口遍历方法" class="headerlink" title="Set接口遍历方法"></a>Set接口遍历方法</h4><p>①迭代器<br>②增强for<br>③不能使用索引方式获取</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/7 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Set01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//不能存放重复的顺序</span></span><br><span class="line">        <span class="comment">//set 存放数据是无序的（添加的顺序和取出的顺序不一致）</span></span><br><span class="line">        <span class="comment">//注意：取出的顺序虽然不是添加的顺序 但是它是固定 就是取出时候顺序是怎么样就是怎么样 不会随着再次取出而改变</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;oto&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;michael&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        <span class="comment">//添加重复的只会存放一个</span></span><br><span class="line">        set.add(<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">        set.add(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="comment">//增强for</span></span><br><span class="line">        <span class="keyword">for</span> (Object object : set) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移除</span></span><br><span class="line">        set.remove(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>①实现了Set接口<br>②HashSet<strong>实际上是HashMap</strong><br><strong>有图有真相</strong></p><p><img src="/ZzzjhBlog/images/image-20241007163851960.png" alt="image-20241007163851960"></p><p>③存放null值 但是只能由有一个null<br>④HashSet不保证元素是有序的 取决于hash后 在确定索引的结果<br>⑤<strong>不能有重复的元素&#x2F;对象</strong><br>⑥<strong>添加已存在的元素时，HashSet 不会改变</strong></p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/7 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Set01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;rose&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;rose&quot;</span>));</span><br><span class="line">        <span class="comment">//问set有几个元素</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * set.add(&quot;jack&quot;); 添加成功</span></span><br><span class="line"><span class="comment">         * set.add(&quot;jack&quot;); 添加失败</span></span><br><span class="line"><span class="comment">         * set.add(new Dog(&quot;rose&quot;)); 添加成功</span></span><br><span class="line"><span class="comment">         * set.add(new Dog(&quot;rose&quot;)); 添加成功   因为它们是两个不同的对象实例（除非Dog类重写了hashCode()和equals()方法）。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;zjh&quot;</span>)); <span class="comment">//会被添加</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;zjh&quot;</span>)); <span class="comment">//不会被添加</span></span><br><span class="line"><span class="comment">//看分析：</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>首先，当执行new String(“zjh”)时，Java会执行以下步骤：</p><p><strong>在字符串常量池中查找是否存在</strong>字符串字面量”zjh”。</p><p>如果存在，就使用它作为构造新String对象的基础。</p><p>如果不存在，就将它添加到常量池中，然后使用新添加的字符串字面量。</p><p><strong>使用找到的或新添加的字符串字面量（在常量池中）的引用作为内部状态</strong>，来创建一个新的String对象实例。这个新对象是在堆上分配的，它有一个指向常量池中字符串字面量的内部引用（这个引用是String对象的一部分，但String对象本身和常量池中的字符串字面量是两个不同的对象）。</p><p>接下来，<strong>关于HashSet如何判断两个元素是否相等</strong>：</p><p>HashSet在添加元素时，<strong>首先会调用该元素的hashCode()方法</strong>。<strong>如果两个元素的哈希码相同</strong>（这<strong>并不意味着它们一定相等</strong>，<strong>只是有可能相等</strong>），HashSet会<strong>进一步调用它们的equals()方法来确定它们是否真正相等</strong>。</p><p>对于<strong>String类</strong>：<br>hashCode()方法是<strong>根据字符串的内容</strong>（即字符的Unicode值序列）计算出来的。因此，如果<strong>两个String对象的内容相同</strong>，它们的<strong>哈希码也一定相同</strong>。</p><p>equals()方法是<strong>比较两个字符串的内容是否完全相同</strong>。如果<strong>两个String对象的内容相同</strong>（即字符序列和字符的Unicode值都相同），则<strong>equals()方法返回true</strong>。</p><p>因此，当向HashSet中添加两个通过new String(“zjh”)创建的String对象时：</p><p>尽管这两<strong>个String对象是不同的实例</strong>（它们在<strong>堆上有不同的内存地址</strong>），</p><p>但由<strong>于它们的内容相同</strong>，所以它们的<strong>哈希码也相同</strong>，</p><p>并且<strong>equals()方法返回true</strong>，表示它们<strong>逻辑上是相等的</strong>。</p><p>因此，<strong>从HashSet的角度来看</strong>，<strong>这两个对象是相等的</strong>（即它们被<strong>视为同一个元素的两个不同实例</strong>），并且HashSet<strong>只会存储其中一个对象</strong>（<strong>实际上，是存储了那个对象的引用</strong>，但由于它们内容相同，所以哪个引用被存储并不重要）。</p><p><strong>总结：尽管使用了两次new String(“zjh”)来创建看似不同的String对象实例，并且它们在堆上有不同的内存地址，但由于String类的hashCode()和equals()方法的实现，以及字符串常量池的机制，HashSet实际上只会将这两个对象视为同一个元素，并只存储其中一个的引用。</strong></p><h5 id="HahSet底层机制"><a href="#HahSet底层机制" class="headerlink" title="HahSet底层机制"></a>HahSet底层机制</h5><p><strong>HashSet底层就是HashMap HashMap底层是（数组+链表+红黑树）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetStructure</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟一个HashSet的底层（HashMao的底层结构）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、创建一个数组 数组的类型是 Node【】 长度16</span></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;table&quot;</span> + table);</span><br><span class="line">        <span class="comment">//2、创建节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;john&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">2</span>] = john;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        john.next = jack; <span class="comment">//形成链表 将jack挂载到john</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;rose&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        jack.next = rose; <span class="comment">//将rose挂载到jack</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">3</span>] = lucy;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Node类 Node对象代表链表中的一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">//结点，存放数据 可以指向下一个节点 形成链表</span></span><br><span class="line">    <span class="keyword">public</span> Object item; <span class="comment">//存放数据</span></span><br><span class="line">    <span class="keyword">public</span> Node next; <span class="comment">//存放下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name,Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = name;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node name = &quot;</span> + item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/ZzzjhBlog/images/image-20241007201916519.png" alt="image-20241007201916519"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解(Annotation)</title>
      <link href="/ZzzjhBlog/2025/04/01/%E6%B3%A8%E8%A7%A3-Annotation/"/>
      <url>/ZzzjhBlog/2025/04/01/%E6%B3%A8%E8%A7%A3-Annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="注解（Annotation）"><a href="#注解（Annotation）" class="headerlink" title="注解（Annotation）"></a>注解（Annotation）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>注解就是Java代码里面的特殊标记 比如：@Override、@Test等</p><p>作用是：让其他程序根据注解的信息决定怎么执行该程序</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>注解可以用在类上、构造器、方法上、成员变量上、参数上等位置处。</p><h2 id="java内置注解"><a href="#java内置注解" class="headerlink" title="java内置注解"></a>java内置注解</h2><p>@Override：定义在java.land.Overide中，此只适用于修饰方法，表明一个方法声明打算重写超类中的另一个方法声明</p><p>@Deprecated ：定义在java.land.Deprecated中，此注释可以用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择</p><p>@SuppressWarnings：定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。与前两个注释有所不同，你需要添加一个参数才能正确的使用，这些参数都是已经定义好的<br>@SuppressWarnings(“all”)、@SuppressWarnings(“unchecked”)、@@SuppressWarnings(value&#x3D;{“unchecked”,“deprecation”})</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p><strong>格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    <span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    String[] c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation(a = &quot;牛魔王&quot;,b = true,c = &#123;&quot;HTML&quot;,&quot;Java&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(a = &quot;铁扇公主&quot;,b = false,c = &#123;&quot;Python&quot;,&quot;Web&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊属性名：value</strong><br>如果注解中只有一个value属性，使用注解时，value名称可以不写!!<br><strong>演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@MyAnnotation2(value = &quot;孙悟空&quot;) value 是特殊属性 value = 可以不写直接赋值</span></span><br><span class="line"><span class="meta">@MyAnnotation2(&quot;孙悟空&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest02</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意如果这个注解中包含除了value（属性名必须是value） 外还有多个属性 那么就不能省略</strong></p><h2 id="注解的原理"><a href="#注解的原理" class="headerlink" title="注解的原理"></a>注解的原理</h2><p>将   .class 文件反编译之后可以得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyAnnotation</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.annotation.Annotation &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.String <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> java.lang.String[] c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是反编译后得到的源代码<br>我们可以看到 <strong>它本质是一个接口 继承了Annotation这个接口，里面的属性其实都是抽象方法的形式</strong>。</p><p>那么我们使用注解的时候<br><img src="/ZzzjhBlog/images/image-20240912000848301.png" alt="image-20240912000848301"></p><p>本质上这个就是注解的实现类对象，然后分装这些属性信息。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>指的是 修饰注解的注解</strong></p><p><strong>示例</strong><br><img src="/ZzzjhBlog/images/image-20240912001342888.png" alt="image-20240912001342888"></p><p><strong>@Target</strong></p><p><strong>作用：声明被修饰的注解只能在哪些位置使用</strong><br><img src="/ZzzjhBlog/images/image-20240912001555573.png" alt="image-20240912001555573"><br>1.TYPE   类、接口<br>2.FIELD 成员变量<br>3.METHOD 成员方法<br>4.PARAMETER 方法参数<br>5.CONSTRUCTOR 构造器<br>6.LOCAL_VARIABLE 局部变量<br>可以多选比如<br><img src="/ZzzjhBlog/images/image-20240912001929416.png" alt="image-20240912001929416"></p><p>如果修饰在 没被声明的位置使用就会报错</p><p><strong>@Retention</strong></p><p><strong>作用：声明注解的保留周期</strong><br>1.SOURCE<br><strong>只作用在源码阶段</strong>，字节码文件中不存在</p><p>2.CLASS  (默认值)<br><strong>保留到字节码文件阶段</strong>，运行阶段不存在 </p><p>3.RUNTIME(开发常用)<br>一直保留到运行阶段 当运行Java程序的时候 JVM会保留注释。程序可以通过反射获取 该注释</p><p><strong>@Document</strong><br>指定该注解是否会在javadoc 体现</p><p><strong>@Inherited</strong><br>子类会继承父类注解</p><h2 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h2><p><strong>什么是注解的解析</strong></p><p>就是判断类上、方法上、成员变量上是否存在注解，并把注解里的内容给解析出来</p><p><strong>如何解析注解</strong><br>思想：要解析谁，就应该先拿到谁的对象<br><strong>·</strong>   比如要解析类上面的注解<strong>先获取该类的Class对象</strong>，<strong>再通过Class对象解析其上面的注解</strong>。</p><p><strong>·</strong>  比如要解析成员方法上面的注解，则应该<strong>获取到成员方法的Method对象</strong>，<strong>再通过Method对象解析其上面的注解</strong></p><p><strong>Class、Method、Field、Constructor都实现了AnnotationElement接口它们都拥有解析其注解的能力</strong><br><img src="/ZzzjhBlog/images/image-20240912004305378.png" alt="image-20240912004305378"></p><p><strong>案例</strong></p><p><strong>需求</strong>：<br>① 定义注解MyAnnotation<br> <strong>·</strong>  包含属性：String value()<br> <strong>·</strong>  包含属性：double a()，默认值为100<br> <strong>·</strong>  包含属性：String[] b()<br> <strong>·</strong>  限制注解使用位置：类和方法上<br> <strong>·</strong>  指定注解有效范围：一直到运行时<br>② 定义一个类：叫Demo，在类中定义一个test1()方法，并在该类和方法上使用MyAnnotation注解<br>③ 定义AnnotationTest测试类 解析Demo类中的全部注解</p><p>代码：<br>第一步：定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">a</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line">    String[] b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步：定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;AA&quot;, a = 99.5, b = &#123;&quot;Java&quot;, &quot;Python&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(value = &quot;BB&quot;, a = 199.9, b = &#123;&quot;Go&quot;, &quot;Rust&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步：解析类注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先得到Class对象</span></span><br><span class="line">        Class&lt;Demo&gt; demoClass = Demo.class;</span><br><span class="line">        <span class="comment">//2.解析类上面的注解</span></span><br><span class="line">        <span class="comment">//判断类上面有没有包含 MyAnnotation注解</span></span><br><span class="line">        <span class="keyword">if</span> (demoClass.isAnnotationPresent(MyAnnotation.class))&#123;</span><br><span class="line">            <span class="comment">//获取注解</span></span><br><span class="line">            <span class="type">MyAnnotation</span> <span class="variable">myAnnotation</span> <span class="operator">=</span> demoClass.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class="line">            <span class="comment">//拿到注解后可以获取注解中的内容</span></span><br><span class="line">            System.out.println(myAnnotation.value());</span><br><span class="line">            System.out.println(myAnnotation.a());</span><br><span class="line">            System.out.println(Arrays.toString(myAnnotation.b()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第四步：解析方法上面的注解 （和解析类上的注解差不多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.先得到Class对象</span></span><br><span class="line">        Class&lt;Demo&gt; demoClass = Demo.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获得要解析的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">test1</span> <span class="operator">=</span> demoClass.getDeclaredMethod(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="comment">//3.解析方法上面的注解</span></span><br><span class="line">        <span class="comment">//判断方法上面有没有包含 MyAnnotation注解</span></span><br><span class="line">        <span class="keyword">if</span> (test1.isAnnotationPresent(MyAnnotation.class))&#123;</span><br><span class="line">            <span class="comment">//获取注解</span></span><br><span class="line">            <span class="type">MyAnnotation</span> <span class="variable">myAnnotation</span> <span class="operator">=</span> test1.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class="line">            <span class="comment">//拿到注解后可以获取注解中的内容</span></span><br><span class="line">            System.out.println(myAnnotation.value());</span><br><span class="line">            System.out.println(myAnnotation.a());</span><br><span class="line">            System.out.println(Arrays.toString(myAnnotation.b()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析出结果：<br>类上的</p><p><img src="/ZzzjhBlog/images/image-20240912010126461.png" alt="image-20240912010126461"><br>方法上的<br><img src="/ZzzjhBlog/images/image-20240912010531980.png" alt="image-20240912010531980"><br>和我们当初 定义的内容一样解析成功</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>注解一般是结合反射技术 做框架用的比如junit框架</p><p><strong>案例：</strong><br><strong>简易版Junit框架</strong><br>需求：定义诺干个方法，只要加了MyTest注解，就会触发该方法执行</p><p>分析：<br>①：定义一个自定义注解MyTest 只能注解方法 存活范围一直都在 因为到运行阶段 只有注解还在我们才知道运行哪些方法<br>②：定义诺干个方法 部分方法加上@MyTest注解，部分不加<br>③模拟一个junit程序 可以触发@MyTest注解的方法执行</p><p>代码<br>第一步：创建@MyTest注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二：模拟一个junit程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 豪酱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJunit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//为后面invoke()方法调用创造对象</span></span><br><span class="line">        <span class="type">MyJunit</span> <span class="variable">myJunit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyJunit</span>();</span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        Class&lt;MyJunit&gt; myJunitClass = MyJunit.class;</span><br><span class="line">        <span class="comment">//拿到该类所有方法</span></span><br><span class="line">        Method[] declaredMethods = myJunitClass.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//遍历方法数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line">            <span class="comment">//判断该方法是否有加 @MyTest 注解 有的话运行没有就不运行</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(MyTest.class))&#123;</span><br><span class="line">                method.invoke(myJunit); <span class="comment">//invoke() 方法调用是要传对象 和参数的 这里我们测试方法无参 无返回值 所以只要 传对象就好了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/ZzzjhBlog/images/image-20240912021052284.png" alt="image-20240912020927203"></p><p> <strong>结果分析：</strong><br>代码中 只有test1() 和test3() 加了 @MyTest注解 并且输出正确</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/ZzzjhBlog/2025/04/01/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/ZzzjhBlog/2025/04/01/%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p><strong>描述</strong>：<br>没有方法名，没有返回值，只有方法体，不需要通过对象或类显示调用，而是加载类的时候，或创建对象时候隐式调用</p><p><strong>基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">    代码</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>（1）修饰符可选，要写的话也只能写static。<br>（2）代码块分为两种 使用static修饰的叫静态代码块，没有static修饰的叫普通代码块。<br>（3）逻辑语句可以写任何逻辑语句（输入、输出、方法调用、循环、判断）等等。<br>（4）；号可以写上 也可以省略。</p><p><strong>细节</strong>：</p><p>（1）static代码块也叫静态代码块，作用是对类进行初始化，而且它随着<strong>类的加载而执行</strong>，<strong>并且只会执行一次</strong>。如果是<strong>普通代码块</strong>，<strong>每创建一个对象就执行</strong></p><p><strong>静态代码块在类加载过程中只执行一次，也就是说它在整个应用程序生命周期中只执行一次。无论创建多少个类的实例，静态代码块只会在类加载时执行一次。</strong></p><p>（2）<strong>类什么时候被加载：</strong><br><strong>①创建对象实例时候（new）</strong><br><strong>②创建子类对象实例，父类也会被加载</strong><br><strong>③使用类的静态成员时（静态属性、静态方法）</strong></p><p>（3）<strong>普通代码块</strong>，在创建对象实例的时候，会被隐式的调用，<strong>创建一次对象，就调用一次</strong>。如果只是<strong>使用类的静态成员</strong>，普通代码块并<strong>不会执行</strong>。</p><p>（4）创建对象时，在<strong>一个类</strong>的调用顺序：<br>①调用<strong>静态代码块</strong>和<strong>静态属性初始化</strong>（它们两个<strong>优先级一样</strong>，如果有多个静态代码块和多个静态变量初始化，则<strong>按照定义的顺序执行</strong>）。<br>②调用<strong>普通代码块</strong>和<strong>普通属性</strong>的初始化（它们两个优先级一样，如果有多个普通代码块和普通属性，则按照定义顺序执行）<br>③调用构造方法</p><p>（5）如果在创建对象时候，这个对象是<strong>某个对象的子类的话</strong>那么执行顺序如下：<br><strong>先执行父类静态代码块&#x2F;父类静态变量初始化  –&gt; 子类静态代码块&#x2F;子类静态变量初始化 –&gt; 父类普通代码块 –&gt;</strong><br><strong>父类构造方法 –&gt; 子类普通代码块 –&gt; 子类构造方法</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的静态代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;A的普通代码块被执行&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参数被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的静态代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的普通代码块被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的无参数构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（6）静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以任意调用成员</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>下面代码会输出什么结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    Sample(String s) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Sample() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sample默认构造函数被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">Sample</span> <span class="variable">sam1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;sam1成员初始化&quot;</span>); <span class="comment">// 成员变量初始化</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Sample</span> <span class="variable">sam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(<span class="string">&quot;静态成员sam初始化&quot;</span>); <span class="comment">// 静态成员初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static块执行&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sam == <span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;sam is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test() &#123; <span class="comment">// 构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Test默认构造函数被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] str)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(); <span class="comment">// 无参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态成员sam初始化</span><br><span class="line"><span class="keyword">static</span>块执行</span><br><span class="line">sam1成员初始化</span><br><span class="line">Test默认构造函数被调用</span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><h3 id="执行顺序分析"><a href="#执行顺序分析" class="headerlink" title="执行顺序分析"></a>执行顺序分析</h3><ol><li><p><strong>静态成员初始化</strong>：</p><ul><li>Java 在加载类时，首先执行静态成员和静态块。</li><li>静态成员 <code>sam</code> 初始化：<code>new Sample(&quot;静态成员sam初始化&quot;)</code>，会调用 <code>Sample</code> 类的构造函数并输出 <code>&quot;静态成员sam初始化&quot;</code>。</li></ul></li><li><p><strong>静态块</strong>：</p><ul><li>紧接着，静态块被执行。输出 <code>&quot;static块执行&quot;</code>。</li><li>静态块中有一个检查 <code>if (sam == null)</code>，但此时 <code>sam</code> 已经初始化，所以不会输出 <code>&quot;sam is null&quot;</code>。</li></ul></li><li><p><strong>实例成员初始化</strong>：</p><ul><li>当执行 <code>new Test()</code> 时，开始实例化对象，这时首先初始化实例成员。</li><li>实例成员 <code>sam1</code> 初始化：<code>new Sample(&quot;sam1成员初始化&quot;)</code>，会调用 <code>Sample</code> 类的构造函数并输出 <code>&quot;sam1成员初始化&quot;</code>。</li></ul></li><li><p><strong>构造函数</strong>：</p><ul><li>最后，执行 <code>Test</code> 类的构造函数，输出 <code>&quot;Test默认构造函数被调用&quot;</code>。</li></ul></li></ol><h3 id="总结：程序输出顺序"><a href="#总结：程序输出顺序" class="headerlink" title="总结：程序输出顺序"></a>总结：程序输出顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态成员sam初始化</span><br><span class="line"><span class="keyword">static</span>块执行</span><br><span class="line">sam1成员初始化</span><br><span class="line">Test默认构造函数被调用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/ZzzjhBlog/2025/04/01/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/ZzzjhBlog/2025/04/01/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="代理-Proxy"><a href="#代理-Proxy" class="headerlink" title="代理 Proxy"></a>代理 Proxy</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理在编译时就确定了代理类和目标类的关系。代理类通常实现与目标类相同的接口，并在其方法中调用目标类的方法。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>编译时确定</strong>：代理类在编译时就已经存在。</li><li><strong>代码重复</strong>：每个代理类都需要手动编写，容易导致代码</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是在运行时创建代理类，通常使用 Java 的反射机制。Java 提供了 <code>Proxy</code> 类来实现动态代理。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>运行时确定</strong>：代理类在运行时生成，灵活性更高。</li><li><strong>减少代码重复</strong>：可以通过一个代理类来代理多个目标类。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>静态代理</strong>适合于代理关系明确且不变的场景，但可能导致代码冗余。</li><li><strong>动态代理</strong>则提供了更大的灵活性，适用于需要代理多个类的情况。</li></ul><h2 id="为什么需要代理？"><a href="#为什么需要代理？" class="headerlink" title="为什么需要代理？"></a>为什么需要代理？</h2><p>代理是一种设计模式,它可以为对象提供一个替身或占位符,以控制对这个对象的访问。使用代理的主要目的有:</p><ul><li>远程访问:客户端通过代理访问远程服务,隐藏了服务的具体实现细节。</li><li>安全控制:代理可以在访问真实对象之前进行权限检查,控制对象的访问。</li><li>延迟加载:代理可以延迟创建真实对象,优化资源的使用。</li><li>增强功能:代理可以在调用真实对象的方法前后添加额外的逻辑,如日志记录、缓存等。</li></ul><h2 id="代理长什么样子？"><a href="#代理长什么样子？" class="headerlink" title="代理长什么样子？"></a>代理长什么样子？</h2><ul><li>**静态代理:**程序员手动创建代理类,实现与真实对象相同的接口。代理类包含了真实对象的引用,并且可以在调用方法时添加额外逻辑。</li><li>**动态代理:**JDK提供了动态代理机制,可以在运行时动态生成代理类。动态代理通过反射机制实现,可以更加灵活地控制方法的调用。</li></ul><h2 id="Java如何保证代理的样子"><a href="#Java如何保证代理的样子" class="headerlink" title="Java如何保证代理的样子?"></a>Java如何保证代理的样子?</h2><p> Java使用接口来定义代理需要实现的方法签名,保证了代理和真实对象之间的一致性。同时,Java还提供了抽象类,可以在抽象类中实现一些公共的代理逻辑,供子类继承和扩展。</p><h2 id="下面举个例子来讲解动态代理"><a href="#下面举个例子来讲解动态代理" class="headerlink" title="下面举个例子来讲解动态代理"></a>下面举个例子来讲解动态代理</h2><p>这边举一个明星唱歌 跳舞的例子 然后代理做 收钱 准备场地的事情</p><p>定义明星类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStart</span> <span class="keyword">implements</span> <span class="title class_">Start</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStart</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String songName)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;在唱&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;演唱完毕&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义代理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Start</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sing</span><span class="params">(String songName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建代理工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Start <span class="title function_">createProxy</span><span class="params">(BigStart bigStart)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                InvocationHandler h)</span></span><br><span class="line"><span class="comment">                参数一：ClassLoader 用于指定一个类加载器 一般用当前类 比如当前类为 ProxyUtil.class.getClassLoader()</span></span><br><span class="line"><span class="comment">                参数二：指定生成的代理长什么样 有哪些方法 （就是接口类对象的数组）</span></span><br><span class="line"><span class="comment">                参数三：用来指定生成的代理要干什么事情 （InvocationHandler 是一个接口 所以我们这边创建的是一个InvocationHandler的匿名内部类对象来指定干什么事情）</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        <span class="type">Start</span> <span class="variable">start</span> <span class="operator">=</span>  (Start) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Start.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 比如invoke方法写好之后</span></span><br><span class="line"><span class="comment">            * 程序中 Start startProxy = ProxyUtil.createProxy(s);</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * 调用sing方法   或者dance方法</span></span><br><span class="line"><span class="comment">            * startProxy.sing(&quot;好运来&quot;); startProxy.dance();</span></span><br><span class="line"><span class="comment">            * 此时 sing 和 dance方法 会调用invoke方法来进行回调</span></span><br><span class="line"><span class="comment">            * invoke方法的三个参数</span></span><br><span class="line"><span class="comment">            * Object proxy ： 当前调用方法的 代理对象 startProxy</span></span><br><span class="line"><span class="comment">            * Method method ： 把当前调用的方法 传进来 比如 sing方法 或者dance方法</span></span><br><span class="line"><span class="comment">            *  Object[] args ： 这个就是 调用方法 sing 或者 dance 的参数列表 像 startProxy.sing(&quot;好日子&quot;) 就会把 &quot;好日子&quot;当作参数传进来</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//invoke就是一个回调方法  代理做什么事情由invoke决定</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">//代理要做什么事情 在这里写</span></span><br><span class="line">                <span class="comment">//判断当前 代理调用的方法是不是 sing 如果是的话 执行对应逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;sing&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;准备话筒&quot;</span>);</span><br><span class="line">                    <span class="comment">//将方法结果返回</span></span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bigStart,args);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;dance&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;准备场地 跳舞&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bigStart,args);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果不是 sing 或者 dance 则不需要代理  那么直接让 bigStart执行就好 使用方法的回调 传入实现类对象和参数即可</span></span><br><span class="line">                    <span class="keyword">return</span> method.invoke(bigStart,args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//可以把优化代码 把return method.invoke(bigStart,args); 提出来</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/12/27 3:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建明星对象</span></span><br><span class="line">        <span class="type">BigStart</span> <span class="variable">jay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigStart</span>(<span class="string">&quot;周杰伦&quot;</span>);</span><br><span class="line">        <span class="type">Start</span> <span class="variable">startProxy</span> <span class="operator">=</span> ProxyUtil.createProxy(jay);</span><br><span class="line">        System.out.println(startProxy.sing(<span class="string">&quot;稻香&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        startProxy.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/ZzzjhBlog/images/image-20241227035150796.png" alt="image-20241227035150796"></p><h2 id="Java提供了什么API帮我们创建代理"><a href="#Java提供了什么API帮我们创建代理" class="headerlink" title="Java提供了什么API帮我们创建代理"></a>Java提供了什么API帮我们创建代理</h2><p>Java 提供了动态代理(Dynamic Proxy)来帮我们创建代理对象。动态代理允许我们在运行时动态生成代理类,从而实现对目标对象的代理和拦截。</p><h2 id="newProxyInstance方法在创建代理的时候-需要接收几个参数-每个参数的含义是什么？"><a href="#newProxyInstance方法在创建代理的时候-需要接收几个参数-每个参数的含义是什么？" class="headerlink" title="newProxyInstance方法在创建代理的时候 需要接收几个参数 每个参数的含义是什么？"></a>newProxyInstance方法在创建代理的时候 需要接收几个参数 每个参数的含义是什么？</h2><p>newProxyInstance() 方法用于创建动态代理对象。它需要3个参数:</p><ul><li><strong>ClassLoader:</strong> 用于加载代理类的类加载器</li><li><strong>Class&lt;?&gt;[]:</strong> 被代理对象实现的接口列表</li><li><strong>InvocationHandler:</strong> 代理对象的调用处理器,用于实现对目标方法的拦截和自定义逻辑</li></ul><p>这3个参数共同决定了动态代理对象的行为。</p><p><strong>当通过代理对象调用方法时,实际上是在调用 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法。这个方法接收3个参数:</strong></p><ul><li><strong><code>proxy</code>: 代理对象自身</strong></li><li><strong><code>method</code>: 被调用的方法对象</strong></li><li><strong><code>args</code>: 方法的参数列表</strong></li></ul><h2 id="通过-InvocationHandler-的-invoke-方法指定代理干的事时-这个-invoke-会被谁调用-要接哪几个参数"><a href="#通过-InvocationHandler-的-invoke-方法指定代理干的事时-这个-invoke-会被谁调用-要接哪几个参数" class="headerlink" title="通过 InvocationHandler 的 invoke() 方法指定代理干的事时,这个 invoke() 会被谁调用?要接哪几个参数?"></a>通过 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法指定代理干的事时,这个 <code>invoke()</code> 会被谁调用?要接哪几个参数?</h2><p>在 <code>invoke()</code> 方法中,我们可以对目标方法进行拦截、增强或者自定义逻辑的处理。</p><p>总之,Java 动态代理提供了一种灵活的方式来创建代理对象,并对目标对象的方法调用进行拦截和自定义处理。这在<strong>实现 AOP、RPC、缓存等功能时非常有用</strong>。</p><h2 id="动态代理的应用场景和好处"><a href="#动态代理的应用场景和好处" class="headerlink" title="动态代理的应用场景和好处"></a>动态代理的应用场景和好处</h2><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>场景某个系统有一个用户管理类 包含用户登录、删除用户、查询用户等功能、系统要求统计每个功能的执行耗时情况 以便后期观察程序性能</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>现在 某个初级程序员已经开发好了该模块 请观察该模块代码 找出目前存在的问题 并对其进行改造</p><p><strong>问题代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用户业务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 登录功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName,String passWord)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 查询用户，返回数组的形式。</span></span><br><span class="line">    String[] selectUsers() <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户业务实现类（面向接口编程）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName, String passWord)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//业务逻辑。。。。。。</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;成功删除了1万个用户~&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectUsers() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;查询出了3个用户&quot;</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张全蛋&quot;</span>, <span class="string">&quot;李二狗&quot;</span>, <span class="string">&quot;牛爱花&quot;</span>&#125;;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问题：</strong><br>每个方法都要写一遍 记录运行事件 重复了 并且和业务无关</p><p>解决方法：<br>使用代理解决</p><p>方法：<br>定义一个代理工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 UserService 的动态代理实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userService 原始的 UserService 实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UserService 的代理实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title function_">createProxy</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Proxy.newProxyInstance 创建代理实例</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userServiceProxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">            ProxyUtil.class.getClassLoader(), <span class="comment">// 类加载器</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;UserService.class&#125;,    <span class="comment">// 代理实现的接口</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;           <span class="comment">// InvocationHandler 实现</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    Object rs; <span class="comment">// 用于存储方法返回值</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 判断是否为需要记录运行时间的方法</span></span><br><span class="line">                    <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;login&quot;</span>) || </span><br><span class="line">                        method.getName().equals(<span class="string">&quot;deleteUsers&quot;</span>) || </span><br><span class="line">                        method.getName().equals(<span class="string">&quot;selectUsers&quot;</span>)) &#123;</span><br><span class="line">                        </span><br><span class="line">                        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 记录开始时间</span></span><br><span class="line">                        rs = method.invoke(userService, args); <span class="comment">// 调用原始方法</span></span><br><span class="line">                        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();   <span class="comment">// 记录结束时间</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 输出方法执行时间</span></span><br><span class="line">                        System.out.println(method.getName() + <span class="string">&quot;运行时间：&quot;</span> + (end - start) / <span class="number">1000.0</span> + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> rs; <span class="comment">// 返回方法结果</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 对于其他方法，直接调用并返回结果</span></span><br><span class="line">                        rs = method.invoke(userService, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> rs; <span class="comment">// 返回结果</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> userServiceProxy; <span class="comment">// 返回代理实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后把之前UserServiceImpl中的记录运行时间代码去掉即可<br><strong>运行结果：</strong></p><p><img src="/ZzzjhBlog/images/image-20241229222514231.png" alt="image-20241229222514231"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/ZzzjhBlog/2025/04/01/IO%E6%B5%81/"/>
      <url>/ZzzjhBlog/2025/04/01/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>I指的是Input，称为输入流：负责把数据读到内存中去<br>O指的是Output,称为输出流：负责把写数据出去</p><p><img src="/ZzzjhBlog/images/image-20241108002401395.png" alt="image-20241108002401395"></p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p><strong>构造方法</strong></p><p><img src="/ZzzjhBlog/images/image-20241008222354419.png" alt="image-20241008222354419"></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/8 22:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1、创建文件字节输入流管道 与源文件相通</span></span><br><span class="line">        <span class="comment">//FileInputStream fis = new FileInputStream(new File(&quot;文件路径&quot;))</span></span><br><span class="line">        <span class="comment">//简化写法</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//开始读取文件的字节数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> fis.read(); <span class="comment">//每次读取一个数据 如果没有数据了 返回 -1</span></span><br><span class="line">        System.out.println((<span class="type">char</span>) b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始读取文件中的字节数据 每次读取多个字节</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(data)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读取性能差</span></span><br><span class="line">        <span class="comment">//读取汉字会乱码</span></span><br><span class="line">        <span class="comment">//流使用完之后必须关闭</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/9 1:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//方法①</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次性读取完文件所有字节</span></span><br><span class="line">        <span class="comment">//创建字节输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//需要创建一个和文件字节数目大小一样的 数组</span></span><br><span class="line">        <span class="comment">//获取文件长度</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> file.length();</span><br><span class="line">        <span class="comment">//创建字节数组  </span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) length];</span><br><span class="line">        fileInputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法②</span></span><br><span class="line">        <span class="comment">//只用readAllBytes方法直接将当前输入流对应的文件对象的字节数据装到一个字节数组返回</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = fileInputStream1.readAllBytes();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        fileInputStream1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>弊端</strong><br>如果文件过大创建的字节数组也会过大 可能引起内存溢出</p><p>**读写文本更适合 字符流 **<br><strong>字节流适合做数据转移 如：文件复制等</strong></p><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p>作用：以内存为基础 把内存中的数据以字节的形式写到文件中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/9 1:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建字节输出流管道与目标文件接通</span></span><br><span class="line">        <span class="comment">//覆盖管道：覆盖之前的数据</span></span><br><span class="line"><span class="comment">//        FileOutputStream fileOutputStream = new FileOutputStream(&quot;E:\\chuanyi\\Test\\src\\IO\\out&quot;);</span></span><br><span class="line">        <span class="comment">//追加数据的管道不会覆盖</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\chuanyi\\Test\\src\\IO\\out&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        fileOutputStream.write(<span class="number">97</span>); <span class="comment">//97代表一个字节 代表a</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// &#x27;b&#x27; 代表一个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;豪&#x27;</span>); <span class="comment">//汉字占三个字节 [xxx] 默认只会写出一个字节 所以会乱码</span></span><br><span class="line">        <span class="comment">//每次写多个字节</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;HelloWorld你好世界&quot;</span>.getBytes();</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        <span class="comment">//指定写出范围</span></span><br><span class="line">        <span class="comment">//以bytes中内容 从索引0开始 长度为2</span></span><br><span class="line">        fileOutputStream.write(bytes,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/10/9 1:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建字节输入流与原文件接通</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\郑佳豪\\Pictures\\Saved Pictures\\4.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流与目标的文件接通</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\chuanyi\\chaunyi1008\\src\\copy.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">//1KB</span></span><br><span class="line">        <span class="comment">//从字节输入流中读取数据 写到字节输出流中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len; <span class="comment">//记住每次读取多少个字节</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流 先关后创建的流 再关先创建的流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>任何文件的底层都是字节，字节流做复制，只是一字不漏的转移完全部字节，只要复制后的文件格式一致就没有问题</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>UTF-8编码常用中文字符占3字节、不常用中文字符占4个字节</p><p>GBK编码中字符占两个字节</p><p>释放资源</p><p> <strong>释放资源的方式</strong></p><p>①<strong>try-catch-finally</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            System.out.println(10 / 0);            </span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>);</span><br><span class="line"><span class="comment">//            System.out.println(10 / 0);</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fileOutputStream.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//可能出现 空指针 以及 已经关闭的异常 所以还要判断 是否为空 和捕获已经关闭的异常</span></span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk7新增方式<br><strong>②try-with-resource</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">try</span>(<span class="comment">//定义资源1;定义资源2;....)&#123;</span></span><br><span class="line">        <span class="comment">//可能出现异常的代码</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="comment">//异常类名 变量名)&#123;</span></span><br><span class="line">        <span class="comment">//异常处理代码</span></span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例：        </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//定义资源  （！！！ 注意这里只能放置资源对象 资源就是实现了AutoCloseable 接口）</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">//可能会出现异常的代码</span></span><br><span class="line">            System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fileOutputStream.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//异常信息打印</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><p><strong>这个方法 不用手动关闭 它会自动给你关闭资源 执行完会自动调用 AutoCloseable 接口的 close方法</strong></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>适合读写文本文件内容</p><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><p><strong>Reader接口</strong> 以及 <strong>BufferReader实现类</strong></p><p><img src="/ZzzjhBlog/images/image-20241108095551000.png" alt="image-20241108095551000"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = fileReader.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符输入流会把文件中的每一个英文字母和汉字 当作一个字符所以不会乱码 （<strong>前提文件字符编码 和代码的字符编码一样</strong>）</p><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p><strong>Writer接口</strong> 以及 <strong>FileWriter实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建一个文件字符输出流和与目标文件接通</span></span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">//写出一个字符</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            fileWriter.write(<span class="number">97</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&#x27;豪&#x27;</span>);</span><br><span class="line">            <span class="comment">//写出一个字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;你好 世界 我爱你&quot;</span>);</span><br><span class="line">            <span class="comment">//只写出一部分 比如 世界 我爱你</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;你好 世界 我爱你&quot;</span>,<span class="number">6</span>,<span class="number">3</span>);  <span class="comment">//从哪里开始 长度多少</span></span><br><span class="line">            <span class="comment">//写出字符数组</span></span><br><span class="line">            <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;你&#x27;</span>,<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;世&#x27;</span>,<span class="string">&#x27;界&#x27;</span>&#125;;</span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line">            <span class="comment">//写字符数组的一部分</span></span><br><span class="line">            fileWriter.write(chars,<span class="number">0</span>,<span class="number">2</span>); <span class="comment">//下标 0开始 长度 2</span></span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符流的注意事项"><a href="#字符流的注意事项" class="headerlink" title="字符流的注意事项"></a>字符流的注意事项</h3><p><strong>！！！字符流写出数据后 必须刷新流 或者 关闭流 写出去的数据才会生效</strong></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建一个文件字符输出流和与目标文件接通</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//写出一个字符</span></span><br><span class="line">        fileWriter.write(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        fileWriter.write(<span class="number">97</span>);</span><br><span class="line">        fileWriter.write(<span class="string">&#x27;豪&#x27;</span>);</span><br><span class="line"><span class="comment">//如果 不刷新或者关闭 写出的数据就无效</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//刷新流</span></span><br><span class="line">fileWriter.flush();</span><br><span class="line">        <span class="comment">//或者 关闭流 fileWriter.close();</span></span><br><span class="line">    <span class="comment">//一般使用关闭流  关闭流默认包含刷新操作</span></span><br><span class="line">        <span class="comment">//区别是 关闭流后无法使用 但是刷新流 后还能继续使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原因：</strong><br>因为IO流执行一次每次读写数据 都会进行一次系统的调用才能把数据 读写到文件中 而每次调用都会耗费 计算机性能 如果你一次写出多个字符 意味着 要执行多次系统调用 这样性能就会很差 而文件字符输出流优化了这个问题 当你创建文件字符输出流的时候 <strong>系统会在内存中 分配一个 缓冲区</strong> 你<strong>每次写出数据的时候 是先写到缓冲区中</strong> 这样<strong>速度会很快 等你写完了 系统最后将缓冲区的 数据写出到文件中</strong><br>所以要解决这个问题 你写出数据完 <strong>要么刷新缓冲区</strong>  要么<strong>关闭流</strong></p><p><strong>如果缓冲区装满了 系统会自动先写出去</strong></p><p>字符流的缓冲区</p><h1 id="IO-缓冲流"><a href="#IO-缓冲流" class="headerlink" title="IO-缓冲流"></a>IO-缓冲流</h1><p><img src="/ZzzjhBlog/images/image-20241109121759572.png" alt="image-20241109121759572"></p><p><strong>缓冲流的作用：</strong> <strong>就是对原始流进行包装 提高原始流读写数据的性能</strong></p><p><img src="/ZzzjhBlog/images/image-20241109123318619.png" alt="image-20241109123318619"><br><img src="/ZzzjhBlog/images/image-20241109123402685.png" alt="image-20241109123402685"></p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 字节缓冲输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 12:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//定义一个字节输入流</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;IO\\test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//定义一个字节缓冲输入流 包装 字节输入流</span></span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">                <span class="comment">// 也可以自己定义字节缓冲流的缓冲池 大小  BufferedInputStream bis = new BufferedInputStream(fis,8192*2);  默认 8192（8kb）  *2 代表（16kb）</span></span><br><span class="line">                <span class="comment">//定义一个字节输出流</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;IO\\copy-test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//定义一个字节缓冲输出流 包装 字节输出流</span></span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><p><img src="/ZzzjhBlog/images/image-20241109132143747.png" alt="image-20241109132143747"></p><p><img src="/ZzzjhBlog/images/image-20241109132212541.png" alt="image-20241109132212541"><br><img src="/ZzzjhBlog/images/image-20241109133345869.png" alt="image-20241109133345869"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//定义一个 原始的字符输入流</span></span><br><span class="line">                <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;IO\\test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//定义一个 字符缓冲输入流 包装 原始字符流</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line">                <span class="comment">//定义一个 原始字符输出流</span></span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;IO\\copy-test&quot;</span>);</span><br><span class="line">                <span class="comment">//定义 缓冲字符流 包装原始的 字符输出流</span></span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileWriter)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = reader.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bufferedWriter.write(chars,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原始流、缓冲流的性能分析【重点】"><a href="#原始流、缓冲流的性能分析【重点】" class="headerlink" title="原始流、缓冲流的性能分析【重点】"></a>原始流、缓冲流的性能分析【重点】</h2><p>分别使用原始的字节流，以及字节缓冲流复制一个很大视频。</p><p>一般情况下定义的<strong>字节数组越大，速度越快，运行效率越高</strong> 但是字符数组越大，把数据往字符数组里倒入倒出也需要时间，所以在字符数组大到一定程度时，再增加它的大小，效率也不会有提升。</p><p>结论：建议使用<strong>字节缓冲输入流、字节缓冲输出流，结合字节数组的方式，目前来看是性能最优的组合。</strong></p><h1 id="IO转换流"><a href="#IO转换流" class="headerlink" title="IO转换流"></a>IO转换流</h1><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>转换流可以解决不同编码读取出现乱码的问题</p><p>因为 如果你代码编码和被读取的<strong>文本文件的编码不一致</strong> 使用<strong>字符流</strong>读取文本文件就<strong>会出现乱码</strong></p><p><img src="/ZzzjhBlog/images/image-20241109151737663.png" alt="image-20241109151737663"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 转换流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transform</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (   <span class="comment">//得到文件的原始字节流 (GBK字节流形式)</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;IO\\test.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//把原始的字节流转换按照指定的字符集编码转换为 字符输入流</span></span><br><span class="line">                <span class="type">Reader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                <span class="comment">//再把 字符输入流再包装成 缓冲字符输入流 提升性能</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr)</span><br><span class="line">        ) &#123;</span><br><span class="line">            System.out.println(br.readLine());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符输出转换流"><a href="#字符输出转换流" class="headerlink" title="字符输出转换流"></a>字符输出转换流</h2><p>作用：可以指定写出去的字符使用上面字符集编码</p><p><img src="/ZzzjhBlog/images/image-20241109153226895.png" alt="image-20241109153226895"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 转换流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transform</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (   <span class="comment">//创建文件字节输出流</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;IO\\out.txt&quot;</span>);</span><br><span class="line">                <span class="comment">//把原始文件字节输出流 按照指定字符集转换成 字符输出转换流</span></span><br><span class="line">                <span class="type">OutputStreamWriter</span> <span class="variable">ow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(ow)</span><br><span class="line">        ) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;你好世界&quot;</span>); <span class="comment">//此时写出去的 数据采用 GBK字符集形式</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="IO-打印流"><a href="#IO-打印流" class="headerlink" title="IO-打印流"></a>IO-打印流</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>打印流实现更方便 更高效的将数据打印出去 实现打印什么出去就是什么</p><h2 id="PrintStream-PrintWriter"><a href="#PrintStream-PrintWriter" class="headerlink" title="PrintStream &#x2F;PrintWriter"></a><strong>PrintStream &#x2F;PrintWriter</strong></h2><h2 id="PrintStream-API"><a href="#PrintStream-API" class="headerlink" title="PrintStream API"></a>PrintStream API</h2><p><img src="/ZzzjhBlog/images/image-20241109160728154.png" alt="image-20241109160728154"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 打印流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑佳豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/11/9 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintSteam</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">PrintStream</span> <span class="variable">printSteam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;IO\\test.txt&quot;</span>) <span class="comment">//如果想要追加 就先创建低级设置追加 然后使用打印流包装低级流</span></span><br><span class="line">        ) &#123;</span><br><span class="line">                printSteam.println(<span class="number">97</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><h4 id="InputStream类的available-方法获取流的长度问题"><a href="#InputStream类的available-方法获取流的长度问题" class="headerlink" title="InputStream类的available()方法获取流的长度问题"></a>InputStream类的available()方法获取流的长度问题</h4><p><img src="/ZzzjhBlog/images/image-20241112031443382.png" alt="image-20241112031443382"></p><p><code>available()</code> 是一个用来辅助了解缓冲区情况的方法，<strong>不应依赖它来获取文件或流的总大小</strong>，也<strong>不能作为文件是否读取完毕的判断</strong>依据。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exception（异常）</title>
      <link href="/ZzzjhBlog/2025/03/31/Exception%EF%BC%88%E5%BC%82%E5%B8%B8%EF%BC%89/"/>
      <url>/ZzzjhBlog/2025/03/31/Exception%EF%BC%88%E5%BC%82%E5%B8%B8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常(Exception)"></a>异常(Exception)</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Java语言中，将程序执行中发生的不正常情况成为“异常”，（开发中逻辑和语法错误不是异常）<br>执行过程中所发生的异常事件可分为两类<br>1）<strong>Error（错误）</strong>：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：<strong>StackOverflowError[栈溢出]和OOM（out of memory），Error是严重错误，程序会崩溃</strong>。</p><p>2）<strong>Exception</strong>：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等，<strong>Exception分为两大类：运行时异常和编译时异常。</strong></p><h2 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h2><table><thead><tr><th>层级关系</th><th>异常类型 &#x2F; 子类</th><th>说明</th></tr></thead><tbody><tr><td><code>Object</code></td><td>—</td><td>所有类的基类</td></tr><tr><td><code>Throwable</code></td><td>—</td><td>所有异常和错误的父类，分为 <code>Error</code>（错误）和 <code>Exception</code>（异常）两大类</td></tr><tr><td><strong><code>Error</code></strong></td><td><code>VirtualMachineError</code></td><td>JVM 相关错误，如：</td></tr><tr><td></td><td><code>StackOverflowError</code></td><td>栈溢出错误</td></tr><tr><td></td><td><code>OutOfMemoryError</code></td><td>内存溢出错误</td></tr><tr><td></td><td><code>InternalError</code></td><td>JVM 内部错误</td></tr><tr><td></td><td><code>AWTError</code></td><td>AWT 相关错误</td></tr><tr><td><strong><code>Exception</code></strong></td><td><code>IOException</code></td><td>输入输出异常，如：</td></tr><tr><td></td><td><code>EOFException</code></td><td>输入流结束异常</td></tr><tr><td></td><td><code>FileNotFoundException</code></td><td>文件未找到异常</td></tr><tr><td></td><td><code>SQLException</code></td><td>数据库操作异常</td></tr><tr><td></td><td><code>RuntimeException</code></td><td>运行时异常（程序逻辑问题），如：</td></tr><tr><td></td><td><code>NullPointerException</code></td><td>空指针异常</td></tr><tr><td></td><td><code>ArithmeticException</code></td><td>算术异常（如除零）</td></tr><tr><td></td><td><code>ArrayIndexOutOfBoundsException</code></td><td>数组越界异常</td></tr><tr><td></td><td><code>IllegalArgumentException</code></td><td>非法参数异常</td></tr></tbody></table><p>Throwable：有两个重要的子类：Exception（异常）和Error（错误），两者都包含了大量的异常处理类。Exception这种异常又分为两类：运行时异常和编译异常。</p><p>1、<strong>运行时异常(不受检异常)</strong>：RuntimeException类极其子类表示JVM在运行期间可能出现的错误。比如说试图使用<strong>空值对象的引用（NullPointerException）</strong>、<strong>数组下标越界（ArrayIndexOutBoundException）</strong>。此类异常属于不可查异常，一般是由程序逻辑错误引起的，<strong>在程序中可以选择捕获处理，也可以不处理。</strong></p><p>2、<strong>编译异常(受检异常)</strong>：Exception中除RuntimeException极其子类之外的异常。如果程序中出现此类异常，比如说<strong>IOException</strong>，<strong>必须对该异常进行处理，否则编译不通过</strong>。在程序中，通常不会自定义该类异常，而是直接使用系统提供的异常类。</p><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3><ol><li>NullPointerException<code> - 空指针异常，当应用程序试图在需要对象的地方使用</code>null&#96;时抛出。</li><li><code>ArithmeticException</code> - 数学运算异常，当出现异常的算术条件时，例如整数除以零时抛出。</li><li><code>ArrayIndexOutOfBoundsException</code> - 数组下标越界异常，当使用不合法的索引访问数组时抛出。</li><li><code>ClassCastException</code> - 类型转换异常，当试图将对象强制转换为不是实例的子类时抛出。</li><li><code>NumberFormatException</code> - 数字格式不正确异常，当应用程序试图将字符串转换为一种数值类型，但该字符串没有有效的格式时抛出。</li></ol><h3 id="常见的编译异常"><a href="#常见的编译异常" class="headerlink" title="常见的编译异常"></a>常见的编译异常</h3><ol><li><code>SQLException</code> - 操作数据库时，查询表可能发生异常。</li><li><code>IOException</code> - 操作文件时，发生的异常。</li><li><code>FileNotFoundException</code> - 当操作一个不存在的文件时，发生异常。</li><li><code>ClassNotFoundException</code> - 加载类时，而该类不存在时，发生的异常。</li><li><code>EOFException</code> - 操作文件时，到达文件末尾时，发生的异常。</li><li><code>IllegalArgumentException</code> - 参数异常，当传递给方法或构造函数的参数不合法或超出预期范围时，发生的异常。</li></ol><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>异常处理就时异常发生的时候，对异常处理的方式</p><h3 id="异常处理的方式"><a href="#异常处理的方式" class="headerlink" title="异常处理的方式"></a>异常处理的方式</h3><h3 id="①try-catch、try-catch-finally"><a href="#①try-catch、try-catch-finally" class="headerlink" title="①try-catch、try-catch-finally"></a><strong>①try-catch、try-catch-finally</strong></h3><p>程序员在代码中捕获异常 自行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//代码有可能异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//捕获到的异常</span></span><br><span class="line">            <span class="comment">//1.当异常发生的时候 系统将异常封装成Exception对象e</span></span><br><span class="line">            <span class="comment">//2.得到异常对象后，程序员自己处理</span></span><br><span class="line">            <span class="comment">//如果没有发生异常catch中代码块不会执行</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//1.不管代码快有没有异常 最后都会执行finally中的代码 </span></span><br><span class="line">            <span class="comment">//2.通常用来释放资源</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.如果try代码块可能有多个异常</span></span><br><span class="line">        <span class="comment">//2.可以使用多个catch 分别捕获不同异常 相应处理</span></span><br><span class="line">        <span class="comment">//3.要求子类异常写在前面，父类异常写在后面</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            <span class="comment">//name 为null</span></span><br><span class="line">            System.out.println(person.name);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123; <span class="comment">//捕获空指针异常</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123; <span class="comment">//捕获算数异常</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;最后一定要运行的代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><strong>null</strong><br><strong>&#x2F;by zero</strong><br><strong>最后一定要运行的代码</strong></p><p><strong>练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>]; <span class="comment">// String数组</span></span><br><span class="line">            <span class="keyword">if</span> (names[<span class="number">1</span>].equals(<span class="string">&quot;tom&quot;</span>)) &#123; <span class="comment">// 这里会抛出NullPointerException，因为names[1]是null</span></span><br><span class="line">                System.out.println(names[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;hspedu&quot;</span>; <span class="comment">// 这里会抛出ArrayIndexOutOfBoundsException，因为索引3超出范围</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">// 捕获NullPointerException</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 必须执行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">// 返回4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method()); <span class="comment">//  输出什么？  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行流程：</p><ol><li><strong>进入 <code>try</code> 块</strong>：<ul><li><code>String[] names = new String[3];</code> 创建了一个长度为 3 的字符串数组，所有元素都被初始化为 <code>null</code>。</li><li>代码检查 <code>names[1].equals(&quot;tom&quot;)</code>，由于 <code>names[1]</code> 是 <code>null</code>，会抛出 <code>NullPointerException</code>。</li><li>程序跳到对应的 <code>catch (NullPointerException e)</code> 块。</li></ul></li><li><strong>进入 <code>NullPointerException</code> 的 <code>catch</code> 块</strong>：<ul><li>在 <code>catch (NullPointerException e)</code> 中，程序执行 <code>return 3;</code>，表示函数准备返回 3。</li><li>但在 <code>return 3;</code> 之前，程序会先执行 <code>finally</code> 块。</li></ul></li><li><strong>进入 <code>finally</code> 块</strong>：<ul><li><code>finally</code> 块中的 <code>return 4;</code> 强制函数返回 4，这会覆盖原本 <code>catch</code> 块中准备返回的值。</li></ul></li><li><strong>返回结果</strong>：<ul><li>无论之前 <code>try</code> 或 <code>catch</code> 块中执行了什么操作，由于 <code>finally</code> 块中有 <code>return 4;</code>，最终返回值都会是 4。</li></ul></li></ol><p><strong>练习二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;<span class="comment">// i = 2</span></span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>]; <span class="comment">//创建String[] 数组 然后初始化为 null</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;tom&quot;</span>.equals(names[<span class="number">1</span>])) &#123;<span class="comment">//这里不会出现 空指针异常 因为 是 “tom“字符串调用的equals()方法</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;小黄人&quot;</span>;  <span class="comment">//数组越界异常 被越界异常捕获</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123; <span class="comment">//捕获数组越界异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">//由于有finally 不会返回</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; <span class="comment">//必须执行</span></span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">// 执行 ++i  i的值为3 由于finally中有return 方法所以直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method()); <span class="comment">// 输出3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1. names[1]是null，因此&quot;tom&quot;.equals(names[1])始终为false，执行else块。</span></span><br><span class="line"><span class="comment">// 2.因为 &quot;tom&quot; 是非 null 的字符串常量，所以调用 equals 时不会出错，即使 names[1] 是 null，它也只会返回 false，不会抛出异常。names[1].equals(&quot;tom&quot;)：如果 names[1] 是 null，则会抛出 NullPointerException，因为你试图对 null 对象调用方法。</span></span><br><span class="line"><span class="comment">// 3. names[3]是越界访问，将抛出ArrayIndexOutOfBoundsException。</span></span><br><span class="line"><span class="comment">// 4. 由于finally块中的return语句，其他所有return语句都将被忽略。</span></span><br><span class="line"><span class="comment">// 5. 最终，method()方法返回3。</span></span><br></pre></td></tr></table></figure><p>代码执行流程：</p><ol><li><strong>初始变量设置</strong>：<ul><li><code>int i = 1;</code>，即 <code>i</code> 初始值为 1。</li></ul></li><li><strong>进入 <code>try</code> 块</strong>：<ul><li><code>i++</code>，即 <code>i</code> 的值变为 2。</li><li><code>String[] names = new String[3];</code> 创建一个长度为 3 的字符串数组，所有元素都初始化为 <code>null</code>。</li><li><code>if (&quot;tom&quot;.equals(names[1]))</code>，由于 <code>names[1]</code> 为 <code>null</code>，因此 <code>equals</code> 比较时不会抛出 <code>NullPointerException</code>，而是返回 <code>false</code>（<code>&quot;tom&quot;.equals(null)</code> 为 <code>false</code>）。</li><li>程序进入 <code>else</code> 分支，执行 <code>names[3] = &quot;小黄人&quot;;</code>，但由于 <code>names</code> 的长度为 3，访问 <code>names[3]</code> 超出数组范围，抛出 <code>ArrayIndexOutOfBoundsException</code>。</li></ul></li><li><strong>进入 <code>ArrayIndexOutOfBoundsException</code> 的 <code>catch</code> 块</strong>：<ul><li>捕获数组越界异常，并执行 <code>return 2;</code>，表示准备返回 2。</li><li>但是由于有 <code>finally</code> 块，<code>return 2;</code> 会暂时被搁置，程序会继续执行 <code>finally</code> 块。</li></ul></li><li><strong>进入 <code>finally</code> 块</strong>：<ul><li><code>finally</code> 块中的 <code>return ++i;</code> 会再次执行 <code>++i</code>，此时 <code>i</code> 变为 3，并返回 3。</li><li>由于 <code>finally</code> 块中的 <code>return</code> 语句会覆盖其他所有的 <code>return</code>，因此最终返回值为 3。</li></ul></li></ol><p>总结：</p><ul><li><p><strong>最终输出结果</strong>：<code>method()</code> 方法的返回值是 3。</p></li><li><p>这是因为 <code>finally</code> 块中的 <code>return ++i;</code> 覆盖了 <code>try</code> 和 <code>catch</code> 块中的 <code>return</code> 语句。</p></li></ul><p><strong>练习三</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">            String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> (names[<span class="number">1</span>].equals(<span class="string">&quot;tom&quot;</span>)) &#123; <span class="comment">// 这里会抛出NullPointerException，因为names[1]是null</span></span><br><span class="line">                System.out.println(names[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                names[<span class="number">3</span>] = <span class="string">&quot;小黄人&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">//捕获空指针异常</span></span><br><span class="line">            <span class="keyword">return</span> ++i; <span class="comment">//执行  ++i i = 3 由于最后有finally但是finally中没有return语句 所以 这里执行完++i之后 会有一个 临时变量 temp 保存了 i 的值 temp=&gt;3 然后去执行finally 然后等finally执行完之后 再回来执行return语句</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ++i; <span class="comment">//i = 4</span></span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i); <span class="comment">//输出 i = 4 由于没有 return  回到  捕获空指针异常中 然后返回的是temp临时变量的值;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(method()); <span class="comment">// 调用method方法并打印其返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// method()的实际返回值将取决于捕获到的异常类型，但由于finally块中的++i，最终的返回值可能会受到影响（但在这个特定代码中，由于return语句的位置，finally块中的修改不会影响返回值）。</span></span><br></pre></td></tr></table></figure><p><strong>代码执行流程</strong></p><ol><li><strong>初始变量设置</strong>：<ul><li><code>int i = 1;</code>，即 <code>i</code> 初始值为 1。</li></ul></li><li><strong>进入 <code>try</code> 块</strong>：<ul><li><code>i++</code>，即 <code>i</code> 的值变为 2。</li><li><code>String[] names = new String[3];</code>，声明一个长度为 3 的字符串数组，所有元素都初始化为 <code>null</code>。</li><li><code>if (names[1].equals(&quot;tom&quot;))</code>，此时 <code>names[1]</code> 依然为 <code>null</code>，因此会抛出 <code>NullPointerException</code>，程序跳转到对应的 <code>catch (NullPointerException e)</code> 块。</li></ul></li><li><strong>进入 <code>NullPointerException</code> 的 <code>catch</code> 块</strong>：<ul><li><code>++i</code>，即 <code>i</code> 从 2 变为 3。</li><li>然后准备返回 <code>i</code>，但由于有 <code>finally</code> 块，返回值暂时保存为一个临时变量 <code>temp</code>，<code>temp = 3</code>。</li></ul></li><li><strong>进入 <code>finally</code> 块</strong>：<ul><li><code>++i</code>，即 <code>i</code> 再次自增，变为 4。</li><li>打印输出 <code>&quot;i=4&quot;</code>，这是最后一步显示的内容。</li><li><code>finally</code> 块结束后，控制权返回到之前的 <code>catch</code> 块的 <code>return</code> 语句，但最终返回的是保存下来的 <code>temp</code> 值，即 3。</li></ul></li><li><strong>返回结果</strong>：<ul><li>因此，<code>method()</code> 方法的返回值是 3，而不是 <code>finally</code> 块中修改后的 <code>i</code> 值 4。<code>finally</code> 中对 <code>i</code> 的修改不会影响返回值，因为返回值在进入 <code>finally</code> 前已经确定。</li></ul></li></ol><p>总结：</p><p>需要注意的是 <code>finally</code> 修改了 <code>i</code> 但并不影响返回值。</p><p><strong>try-catch异常处理及try-catch-finally执行顺序小结：</strong>  </p><ol><li><p><strong>没有出现异常时</strong>：  </p><ul><li>执行try块中的所有语句。  </li><li>不执行catch块中的任何语句。  </li><li>如果存在finally块，则最后执行finally块中的所有语句。</li></ul></li><li><p><strong>出现异常时</strong>：  </p><ul><li>try块中异常发生的位置之后的所有语句将不再执行。  </li><li>执行与异常类型相匹配的catch块中的语句。  </li><li>如果有finally块，则在catch块（或try块直接结束后，如果没有匹配的catch块）执行完毕后，最后执行finally块中的所有语句。</li></ul></li></ol><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>如果用户输入的不是整数，就提示他反复的输入 直到输入正确为止 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionExe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入整数&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                number = Integer.parseInt(str);  <span class="comment">// 将输入的字符串转成整数</span></span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 如果输入成功，跳出循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;  <span class="comment">// 只捕获数字格式异常</span></span><br><span class="line">                System.out.println(<span class="string">&quot;你需要输入整数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        scanner.close();  <span class="comment">// 关闭 Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="②throws"><a href="#②throws" class="headerlink" title="②throws"></a><strong>②throws</strong></h3><p>将发生的异常抛出，交给调用者（方法来处理），最顶级的处理者就是JVM</p><h4 id="throws处理机制图"><a href="#throws处理机制图" class="headerlink" title="throws处理机制图"></a>throws处理机制图</h4><table><thead><tr><th>步骤</th><th>处理单元</th><th>操作</th><th>异常传递说明</th></tr></thead><tbody><tr><td>1</td><td>f2 方法</td><td>抛出异常</td><td>f2 方法执行过程中触发异常，生成异常对象并抛出。</td></tr><tr><td>2</td><td>f1 方法</td><td>throws 声明异常</td><td>f1 方法通过<code>throws</code>声明承接 f2 抛出的异常，若自身未处理（无 try-catch），继续向上传递。</td></tr><tr><td>3</td><td>main 方法</td><td>throws 声明异常</td><td>main 方法通过<code>throws</code>接收 f1 传递的异常，若仍未处理（无 try-catch-finally），再次向上抛出。</td></tr><tr><td>4</td><td>JVM</td><td>最终处理异常</td><td>异常未被程序代码捕获处理，JVM 接收后执行默认操作（如终止程序、打印异常堆栈信息）。</td></tr></tbody></table><h4 id="throws异常处理-基本介绍"><a href="#throws异常处理-基本介绍" class="headerlink" title="throws异常处理,基本介绍"></a>throws异常处理,基本介绍</h4><p>1）如果一个方法（中的语句执行时）可能生成某种异常，但是并不能确定如何,处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些,异常进行处理，而由该方法的<strong>调用者负责处理</strong>。<br>2）在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异,常类型可以是方法中产生的异常类型，也可以是它的父类。</p><p>注意事项和使用细节,ThrovwsDetail.java<br>1）对于编译异常，程序中必须处理，比如try-catch或者throws<br>2）对于运行时异常，程序中<strong>如果没有处理，默认就是throws的方式处理</strong><br>3）子类重写父类的方法时，对抛出异常的规定：<strong>子类重写的方法，所抛出的异常类型要,么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="comment">//子类重写父类的方法 对抛出异常的规定：子类的重写方法</span></span><br><span class="line">    <span class="comment">//抛出的异常类型要么和父类一致 要么是父类抛出异常的子类型 不然会报错</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）在throws过程中，<strong>如果有方法try-catch，就相当于处理异常，就可以不必,throws</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">//因为f1（）方法调用f3（）方法 f3（）方法抛出了异常交给f1（）方法处理 所以 f1（）方法也要处理这个异常</span></span><br><span class="line">        <span class="comment">//可以try-catch 或者继续 throws 出去 如果有很多个方法这样嵌套 最终 异常会抛出到最开始的方法</span></span><br><span class="line">        f3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;<span class="comment">//抛出文件路径错误异常</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C://a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>当程序出现某些”错误“ 但该错误信息并没有在Throwanle子类中描述处理，这个时候可以自己设计异常类用于描述该错误信息</p><h3 id="自定义异常步骤："><a href="#自定义异常步骤：" class="headerlink" title="自定义异常步骤："></a>自定义异常步骤：</h3><p>①定义类：自定义异常类名（程序员自己写）继承Exception或RuntiomeException<br>②如果继承Exception，属于编译异常<br>③如果继承RuntimeException，属于运行异常（一般来说继承RuntimeException）</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment">//要求在18 - 120之间 否则抛出一个自定义异常</span></span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;age 范围错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的年龄范围正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><table><thead><tr><th>关键字</th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td>throws</td><td>异常处理的一种方式</td><td>方法声明处</td><td>异常类型</td></tr><tr><td>throw</td><td>手动生成异常对象的关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table><p><strong>练习</strong><br>编写应用程序EcmDef.java 接受命令行的两个参数（整数类型）计算两数相除<br>计算两个数相除 要求使用方法cal（int n1，int n2）<br>对数据格式不正确 缺少命令行参数、除0 进行异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EcmDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;参数个数不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;计算结果是：&quot;</span> +  cal(n1, n2));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数类型不对&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现了除0异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 / n2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot起步依赖和自动配置原理</title>
      <link href="/ZzzjhBlog/2025/03/31/SpringBoot%E8%B5%B7%E6%AD%A5%E4%BE%9D%E8%B5%96%E5%92%8C%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
      <url>/ZzzjhBlog/2025/03/31/SpringBoot%E8%B5%B7%E6%AD%A5%E4%BE%9D%E8%B5%96%E5%92%8C%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-起步依赖和自动配置原理"><a href="#SpringBoot-起步依赖和自动配置原理" class="headerlink" title="SpringBoot 起步依赖和自动配置原理"></a>SpringBoot 起步依赖和自动配置原理</h1><p>基于黑马JavaWeb教程中 SpringBoot原理的笔记</p><h2 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h2><p>我们在使用springboot项目的时候 引入了一个<strong>spring-boot-starter-web</strong>的依赖<br>这个依赖中包含了<strong>当前web程序开发所有的常见依赖 比如aop的依赖、json的依赖、等等</strong> 我们只需要引入这一个依赖 那么其他依赖就会自动的 通过maven的依赖传递机制传递进来。<br><strong>（Maven依赖传递机制就是 A依赖B B依赖C C依赖D我们引入A之后那么B、C、D就会都引入进来）</strong></p><p><strong>这就是起步依赖的原理就是 Maven的依赖传递机制</strong></p><h2 id="自动配置（重点）"><a href="#自动配置（重点）" class="headerlink" title="自动配置（重点）"></a><strong>自动配置</strong>（重点）</h2><h3 id="什么是自动配置"><a href="#什么是自动配置" class="headerlink" title="什么是自动配置"></a>什么是自动配置</h3><p>自动配置就是 在SpringBoot项目启动的时候 除了我们自己定义的Controller、Service、Dao这些Bean对象以外<strong>SpringBoot还会将一些内置的配置类以及Bean对象创建好放入IOC容器中</strong><br>当我们使用到框架的一些功能的时候 比如Web开发、AOP程序开发、事务管理 这时候就不需要我们手动去声明Bean对象 可以直接使用 简化了配置 提高了开发效率 </p><p>比如我们启动一个SpringBoot工程去查看它的所有的Bean对象</p><p>示例：</p><p><img src="/ZzzjhBlog/images/image-20250221014537584.png" alt="image-20250221014537584"></p><p>这些Bean对象我们都可以用@Autowired 注入进来就能使用</p><p>我们可以引入自己封装的依赖</p><p>比如引入一个依赖<br><img src="/ZzzjhBlog/images/image-20250221015535979.png" alt="image-20250221015535979"></p><p>我们导入的依赖的中所声明的Bean需要生效才能使用<br>那我们就需要SpringBoot能够扫描到它 才能将它添加到IOC容器中<br>在SpringBoot中 @SpringBootApplicaiton 具有包扫描的作用（<strong>扫描范围 启动类当前包及其子包</strong>）</p><p>方式一：使用@ComponentScan 组件扫描<br><img src="/ZzzjhBlog/images/image-20250221020545327.png" alt="image-20250221020545327"></p><p>@ComponentScan（）中传递的是一个字符串数组<br><img src="/ZzzjhBlog/images/image-20250221020646525.png" alt="image-20250221020646525"></p><p><strong>问题一：为什么之前引入Mybatis、PageHelper等依赖 不需要这样扫描它们所在包 直接可以使用？</strong></p><p>首先如果采用这样配置 那项目开发引入大量的 第三方依赖那么这边组件扫描 这边要扫描的包就非常多<br><strong>像这样 每次使用一个第三方依赖 都需要添加 非常多 性能也不高 所以就不这样使用</strong></p><p><img src="/ZzzjhBlog/images/image-20250221020959898.png" alt="image-20250221020959898"></p><p><strong>方案二：@Import导入的类会被加载到Spring IOC 容器中</strong></p><p>导入形式主要有：<br><img src="/ZzzjhBlog/images/image-20250221023001652.png" alt="image-20250221023001652"> </p><p>这边着重介绍以下 @Import导入 ImportSelector接口实现类的方式<br>首先我们点击到MyImportSelector类中查看一下<br><img src="/ZzzjhBlog/images/image-20250421225029778.png" alt="image-20250421225029778"></p><p>发现它实现了<strong>ImportSelector</strong>接口 并且实现了selectImports这个方法 我们跟进到ImportSelector中查看一下</p><p><img src="/ZzzjhBlog/images/image-20250421225339771.png" alt="image-20250421225339771"></p><p>我们可以看到selectImports()这个方法 <strong>返回的是一个字符串的数组 而数组中存的是类的名字</strong> 然后会将这部分类<strong>会被导入到IOC中</strong></p><p>但是这样还是很繁琐</p><p>我们还需要知道导入第三方依赖中那些配置类和Bean对象</p><p><strong>解决办法：让第三方依赖自己指定哪些配置类和Bean对象</strong><br>第三方依赖 提供注解 <strong>@Enablexxxx</strong>  封装@Import注解</p><p>定义@Enablexxx注解<br><img src="/ZzzjhBlog/images/image-20250221023751948.png" alt="image-20250221023751948"></p><p>这样然后在 <strong>启动类上加上这个注解就好了 相于加上了@Import这个注解 导入Bean和配置类</strong><br><img src="/ZzzjhBlog/images/image-20250221023835483.png" alt="image-20250221023835483"></p><p>那么我们在开发的时候自然是不需要自己定义@Enable***的注解的 因为SpringBoot已经帮我们统一的定义好了<br>下面我们来跟踪一下SpringBoot源码 看看它是如何封装的</p><h2 id="SpringBoot源码跟踪"><a href="#SpringBoot源码跟踪" class="headerlink" title="SpringBoot源码跟踪"></a>SpringBoot源码跟踪</h2><p>首先在我们点击启动类的<strong>注解@SpringBootApplication</strong> 进入查看</p><p>我们可发现这个@SpringBootApplication除了四个元注解还包含了挺多的注解![屏幕截图 2025-02-22 054026](images&#x2F;屏幕截图 2025-02-22 054026.png)</p><p>然后我们点击这个<strong>EnableAutoConfiguration</strong>注解进去查看它的源码</p><p><strong>@EnableAutoConfiguartion源码图</strong></p><p>![屏幕截图 2025-02-22 055330](images&#x2F;屏幕截图 2025-02-22 055330.png)<br>在图中我们可以看到这个EnableAutoConfiguartion注解中 封装了Import注解 并且在Import中导入了 <strong>AutoConfigurationImportSelector.class</strong> 这个类 <strong>ImportSelector是一个接口</strong> 那么AutoConfigurationImportSelector就是它的一个实现类 在<strong>这个实现类里面就封装了需要导入哪些配置类和Bean</strong></p><p>我们再一次点击去查看这个<strong>AutoConfigurationImportSelector</strong><br><img src="/ZzzjhBlog/images/image-20250222060453177.png" alt="image-20250222060453177"></p><p>在图中我们可以看到AutoConfigurationImportSelector实现了 <strong>DeferredImportSelector</strong>接口这个<strong>DeferredImportSelector继承了ImportSelector接口</strong><br><img src="/ZzzjhBlog/images/image-20250222060557339.png" alt="image-20250222060557339"></p><p>我们可以顺着这个去查看到<strong>ImportSelector接口</strong>的源码<br>![屏幕截图 2025-02-22 060810](images&#x2F;屏幕截图 2025-02-22 060810.png)</p><p>这时候我们就需要找到<strong>AutoConfigurationImportSelector实现类</strong> 是如何实现这个方法的</p><p><strong>AutoConfigurationImportSelector实现类中 selectImports源码图示</strong> </p><p> <img src="/ZzzjhBlog/images/image-20250222061300945.png" alt="image-20250222061300945"></p><p>在源码中可以看到 <strong>调用autoConfigurationEntry对象的getConfigurations这个方法获取到返回值并将返回值转为String数组返回</strong><br>autoConfigurationEntry 这个对象又是调用 getAutoConfigurationEntry（）方法获取的<br>我们需要查看一下这个getAutoConfigurationEntry（）方法</p><p><img src="/ZzzjhBlog/images/image-20250222061821597.png" alt="image-20250222061821597"></p><p>可以看到返回的时候<br><img src="/ZzzjhBlog/images/image-20250222061918419.png" alt="image-20250222061918419"><br><strong>但是前面selectImports方法中返回的时候 获取的是autoConfigurationEntry 的configurations这个属性值 那么我们就需要查看这个configurations中封装了什么信息</strong></p><p>在方法中可以看到<br><img src="/ZzzjhBlog/images/image-20250222062145380.png" alt="image-20250222062145380"><br>这个<strong>configurations</strong>是通过调用<strong>getCandidateConfigurations方法</strong>来获取的</p><p>这个时候我们又需要来到<strong>getCandidateConfigurations方法</strong> 中来查看configurations 是如何封装的<br><img src="/ZzzjhBlog/images/image-20250222064917709.png" alt="image-20250222064917709"></p><p>这个代码中可以看到有一个断言 来判断configurations是否为空<br>这个如果为空 断言的信息提示是<br><img src="/ZzzjhBlog/images/image-20250222063736103.png" alt="image-20250222063736103"></p><p>这个翻译过来就是<strong>在 META-INFspring.factories 中没有找到自动配置类。如果您使用的是自定义打包，请确保该文件正确无误。</strong></p><p>那我们就知道了 configurations的信息它是保存在 <strong>META-INF&#x2F;spring.factories</strong> 文件中的 </p><p>在在导入的jar包中查找<br><img src="/ZzzjhBlog/images/image-20250222065355055.png" alt="image-20250222065355055"><br>可以看到有spring.factories<br>spring.factories中就有<br><img src="/ZzzjhBlog/images/image-20250222065432732.png" alt="image-20250222065432732"></p><p>这些都是配置信息</p><p>那么这些就是自动配置的核心原理了</p><p><img src="/ZzzjhBlog/images/image-20250222065647432.png" alt="image-20250222065647432"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="自定义Starter"><a href="#自定义Starter" class="headerlink" title="自定义Starter"></a>自定义Starter</h3><p><img src="/ZzzjhBlog/images/image-20250222070343026.png" alt="image-20250222070343026"></p><p>像我们引入的 srping-boot-starter-web等等</p><p>这边使用一个阿里云OSS封装为starter作为例子</p><p>这边使用一个阿里云OSS封装为starter作为例子</p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>自定义 aliyun-oss-spring-boot-starter 完成阿里云操作工具类 AliyunOSSOperator</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>创建<strong>aliyun-oss-spring-boot-starter</strong>模块<br>创建<strong>aliyun-oss-spring-boot-autoconfigure</strong>模块 在starter中引入该模块<br>在<strong>aliyun-oss-spring-boot-autoconfigure</strong>模块中定义的自动配置功能 并定义 <strong>META-INF&#x2F;spring&#x2F;xxx.imports</strong></p><p><img src="/ZzzjhBlog/images/image-20250422012609427.png" alt="image-20250422012609427"></p><p>在<code>aliyun-oss-spring-boot-autoconfigure</code> 负责编写自动配置的代码 而<code>aliyun-oss-spring-boot-starter </code>不需要编写任何代码 只需要引入<code>aliyun-oss-spring-boot-autoconfigure</code>即可（到时候根据maven依赖传递 引入了<code>aliyun-oss-spring-boot-starter</code>  自然会引入<code>aliyun-oss-spring-boot-autoconfigur</code>）</p><p>①创建<code>aliyun-oss-spring-boot-starter</code>模块</p><p><img src="/ZzzjhBlog/images/image-20250422024041151.png" alt="image-20250422024041151"></p><p>然后继承<code>spring-boot-starter-parent</code>的一个依赖 版本尽量和你要引入的项目版本一致就好</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>aliyun-oss-spring-boot-starter</code><strong>不需要写任何代码 它只负责依赖管理的</strong></p><p>②创建<code>aliyun-oss-spring-boot-autoconfigure</code>模块<br><img src="/ZzzjhBlog/images/image-20250422024116102.png" alt="image-20250422024116102"></p><p>③在starter中引入autoconfigure模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>person.zjh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④接下来在autoconfigure中完成自动配置的功能</p><p>首先要使用aliyun oss 我们需要有阿里云oss的依赖 所以我们在 autoconfigure中引入 aliyun oss的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no more than 2.3.3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后创建阿里云OSS的工具类<code>AliOSSOperator</code> 和 对应的属性类<code>AliOSSProperties</code></p><p><code>AliOSSOperator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> person.zjh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSOperator</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AliOSSProperties aliOSSProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AliOSSOperator</span><span class="params">(AliOSSProperties aliOSSProperties)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.aliOSSProperties = aliOSSProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现上传图片到OSS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取阿里云OSS参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> aliOSSProperties.getEndpoint();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> aliOSSProperties.getAccessKeyId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> aliOSSProperties.getAccessKeySecret();</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> aliOSSProperties.getBucketName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">        <span class="comment">// 关闭ossClient</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> url;<span class="comment">// 把上传到oss的路径返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>AliOSSProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> person.zjh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里就不引入Lombok依赖手动写get set方法 </span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndpoint</span><span class="params">(String endpoint)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endpoint = endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessKeyId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessKeyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessKeyId</span><span class="params">(String accessKeyId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accessKeyId = accessKeyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessKeySecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessKeySecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessKeySecret</span><span class="params">(String accessKeySecret)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accessKeySecret = accessKeySecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBucketName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bucketName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBucketName</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bucketName = bucketName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>上面AliOSSProperties 中@ConfigurationProperties会报异常 这个是因为如果你添加这个注解 你这个类需要是Spring 中的组件 也就是这个类需要是Spring中的bean</strong><br>那么我们就需要将这AliOSSProperties导入到IOC容器中使它成为bean对象 那么Spring中想将这个类添加为Bean对象 可以添加@Component 但是添加@Component注解是不行的 <strong>因为SpringBoot启动的时候只会扫描启动类所在包及其子包下</strong>这个 范围但是我们这个并不在它的范围中所以不行 那么我们还有一种方式就是 使用@Import注解 上面讲解使用**@Import导入的类会被加载到IOC容器中**  那么我们这边可以直接使用 <strong>@EnableConfigurationProperties</strong> 里面封装了 @Import注解 并且可以指定 <strong>@EnableConfigurationProperties（“这里可以指定要导入的类 可以导入多个”）</strong>  </p><p><strong>我们仿照源码的写法 首先写一个配置类然后再配置类当中声明Bean对象</strong><br>创建配置类 <code>AliyunOSSAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> person.zjh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类需要的注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 将AliOSSOperator导入到IOC容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AliOSSProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunOSSAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//代表IOC容器中没有这个Bean的时候再去创建</span></span><br><span class="line">    <span class="keyword">public</span> AliOSSOperator <span class="title function_">aliOssOperator</span><span class="params">(AliOSSProperties aliOSSProperties)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOSSOperator</span>(aliOSSProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中 我们使用了<code>@EnableConfigurationProperties(AliOSSProperties.class)</code> 将<code>AliOSSProperties</code>这个类导入到IOC容器中 然后再创建<code>AliOSSOperator</code>的时候 就可以注入<code>AliOSSProperties</code>对象了</p><p>⑤将配置类加载到固定的文件 META-INF&#x2F;Spring&#x2F;***.imports 中</p><p>在上面操作后 还没完全结束  因为在上面追踪源码的时候 我们了解到了 你的自动配置需要定义在一个固定文件当中才能够生效，这样SpringBoot启动的时候回去读取对应的固定文件 然后加载配置类到IOC容器中 这个固定文件 我们上面也追踪到过就是<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code><br>在resource目录下面创建对应的文件<br><img src="/ZzzjhBlog/images/image-20250422032847194.png" alt="image-20250422032847194"></p><p>其中存放的是配置类的全类名</p><p>然后导入aliyun-oss-spring-boot-starter 即可使用  当然可以自己定义starter不一定要 aliyun oss </p><p><strong>注意事项</strong></p><ul><li><strong><code>spring.factories</code></strong>：这是 Spring Boot 早期版本采用的自动配置机制，在 2.7 及之前的版本中被广泛使用。要是你的项目用的是较旧的 Spring Boot 版本，可能就不支持 <code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>。</li><li><strong><code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></strong>：这是 Spring Boot 2.7 之后引入的新机制，目的是替代 <code>spring.factories</code>，以提升自动配置的性能和加载速度。若你的项目使用的是较旧版本的 Spring Boot，采用这种新机制就会失败。</li></ul><p>这边使用的是org.springframework.boot.autoconfigure.AutoConfiguration.imports所以注意自己的springboot版本</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring循环依赖</title>
      <link href="/ZzzjhBlog/2025/03/31/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
      <url>/ZzzjhBlog/2025/03/31/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring循环依赖"><a href="#Spring循环依赖" class="headerlink" title="Spring循环依赖"></a>Spring循环依赖</h1><h2 id="什么是Spring循环依赖？"><a href="#什么是Spring循环依赖？" class="headerlink" title="什么是Spring循环依赖？"></a>什么是Spring循环依赖？</h2><p>A 依赖于 B，B 依赖于 A，  或者 C循环依赖C</p><p><img src="/ZzzjhBlog/images/image-20250411231558535.png" alt="image-20250411231558535"></p><p>循环依赖代码具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// A中注入了B</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="comment">// B中也注入了A</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自己依赖自己</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// A中注入了A</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会导致它们<strong>初始化互相注入导致死循环造成程序运行异常、内存耗尽</strong>等等</p><h2 id="如何解决循环依赖？"><a href="#如何解决循环依赖？" class="headerlink" title="如何解决循环依赖？"></a>如何解决循环依赖？</h2><p>我们来看看Spring是如何解决的<br>在Spring中使用的<strong>是三级缓存来解决循环依赖问题 使用Map结构将对象缓存起来</strong></p><h3 id="什么是三级缓存？"><a href="#什么是三级缓存？" class="headerlink" title="什么是三级缓存？"></a>什么是三级缓存？</h3><p><strong>一级缓存</strong>：存放完全初始化好的单例 Bean<br><strong>二级缓存</strong>：存放正在创建但未完全初始化的 Bean 实例<br><strong>三级缓存</strong>：存放 Bean 工厂对象，用于提前暴露 Bean</p><h3 id="三级缓存解决循环依赖详细过程"><a href="#三级缓存解决循环依赖详细过程" class="headerlink" title="三级缓存解决循环依赖详细过程"></a>三级缓存解决循环依赖详细过程</h3><p>我们首先到Spring源码中org.springframework.beans.factory.support这个包下 找到<strong>DefaultSingletonBeanRegistry</strong>类<br><img src="/ZzzjhBlog/images/image-20250412044532551.png" alt="image-20250412044532551"></p><p>从图片中可以看到我们的三级缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title class_">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"><span class="comment">// 一级缓存。value装的是成品bean</span></span><br><span class="line"><span class="comment">/** Cache of singleton objects: bean name to bean instance. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 三级缓存。value装的是函数式接口的具体实例，核心就是里面的方法。因此可以简单地理解为装的就是一个lambda表达式</span></span><br><span class="line"><span class="comment">/** Cache of singleton factories: bean name to ObjectFactory. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 二级缓存。value装的是半成品bean</span></span><br><span class="line"><span class="comment">/** Cache of early singleton objects: bean name to bean instance. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中核心的方法getSingleton方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从容器缓存中获取指定名称的单例 Bean，支持“早期引用”机制，用于解决单例循环依赖。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Spring 通过三级缓存来处理循环依赖：</span></span><br><span class="line"><span class="comment"> *  1. singletonObjects：已完全创建并初始化的单例 Bean（一级缓存）</span></span><br><span class="line"><span class="comment"> *  2. earlySingletonObjects：已实例化但未初始化完成的早期 Bean（二级缓存）</span></span><br><span class="line"><span class="comment"> *  3. singletonFactories：用于创建早期 Bean 的 ObjectFactory（三级缓存）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName            Bean 的名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> allowEarlyReference 是否允许通过三级缓存提前暴露 Bean 实例（处理构造器注入循环依赖）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到，则返回对应的单例实例；否则返回 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, <span class="type">boolean</span> allowEarlyReference)</span> &#123;</span><br><span class="line">    <span class="comment">// ① 尝试从一级缓存获取：已完全初始化的单例 Bean</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ② 如果一级缓存没有命中，且该 Bean 正在创建过程中，则可能存在循环依赖</span></span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="comment">// ③ 再次尝试从二级缓存获取：已实例化但未完成初始化的早期 Bean</span></span><br><span class="line">        singletonObject = <span class="built_in">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ④ 如果二级缓存仍未命中，且允许早期引用，则尝试从三级缓存获取 ObjectFactory</span></span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">            <span class="comment">// 加锁保证并发安全，避免重复创建</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">                <span class="comment">// ⑤ 并发场景下再次检查一级缓存</span></span><br><span class="line">                singletonObject = <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// ⑥ 再次检查二级缓存</span></span><br><span class="line">                    singletonObject = <span class="built_in">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// ⑦ 如果仍为空，从三级缓存获取用于创建早期 Bean 的工厂</span></span><br><span class="line">                    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                        ObjectFactory&lt;?&gt; singletonFactory = (ObjectFactory&lt;?&gt;) <span class="built_in">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                        <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 通过 ObjectFactory#getObject() 实例化 Bean</span></span><br><span class="line">                            singletonObject = singletonFactory.getObject();</span><br><span class="line">                            <span class="comment">// 将实例放入二级缓存，供后续引用</span></span><br><span class="line">                            <span class="built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                            <span class="comment">// 移除三级缓存中的工厂，避免重复创建</span></span><br><span class="line">                            <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ⑧ 返回找到的 Bean 实例，可能来自一级或二级缓存，若都未命中则返回 null</span></span><br><span class="line">    <span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么我们根据这个方法来走一遍流程</p><p>我们使用这段代码进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> B b ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>流程：</strong><br>① <strong>实例化 A</strong></p><ul><li>创建 A 的实例（只是调用构造方法，还未进行依赖注入）。</li><li>将 A 的<strong>对象工厂</strong>（<code>ObjectFactory</code>）放入**三级缓存（singletonFactories）**中，表示 A 已开始创建，虽然未完成，但先暴露一个“早期引用”。</li></ul><p>② <strong>A 注入属性，发现依赖 B</strong></p><ul><li>在给 A 注入属性时，发现它需要注入 B。</li><li>Spring 检查发现 B 还未被创建，因此开始<strong>实例化 B</strong>。</li></ul><p>③ <strong>B 注入属性，发现依赖 A</strong></p><ul><li>在给 B 注入属性时，发现它需要注入 A。</li><li>Spring 依次从缓存查找 A（<strong>一级缓存</strong>→<strong>二级缓存</strong>→<strong>三级缓存</strong>）。</li><li>在三级缓存中找到了 A 的<strong>对象工厂</strong>，通过工厂方法拿到一个<strong>早期的 A 实例</strong>。</li><li>将 A 放入<strong>二级缓存（earlySingletonObjects）</strong>，同时<strong>删除三级缓存中的 A</strong>，表示 A 已正式暴露早期对象。</li><li>完成 B 的属性注入和初始化，将 B 放入<strong>一级缓存（singletonObjects）</strong>。</li></ul><p>④ <strong>回到 A 继续完成属性注入</strong></p><ul><li>继续为 A 注入属性，此时可以从<strong>一级缓存</strong>中顺利拿到已经完整初始化好的 B。</li><li>完成 A 的属性注入和初始化。</li><li>A 对象也正式创建完成，<strong>从二级缓存中移除 A</strong>，并放入<strong>一级缓存</strong>。</li></ul><p>⑤ <strong>最终状态</strong></p><ul><li><strong>一级缓存</strong>中保存着实例化并且初始化完成的 A 和 B。</li><li>二级、三级缓存中关于 A、B 的记录均已清理。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用**@AutoWired<strong>是只能在</strong>单例情况（Singleton）<strong>下解决循环依赖<br>于</strong>原型模式（prototype）的 bean**，每次获取都会创建一个新的实例，Spring 容器无法提前创建早期引用并放入缓存，因此无法解决循环依赖问题。</p><p><strong>构造方法注入问题：</strong><br> 值得注意的是，Spring 能够解决的是基于<strong>属性注入（Setter 注入或字段注入）的循环依赖</strong>。如果使用构造器注入，由于在创建构造器参数时就需要完全实例化依赖，循环依赖将无法解决，会直接抛出异常</p><p><strong>为什么Setter和字段注入（@Autowired）Spring可以通过缓存和早期引用解决？</strong><br>当使用 setter 或字段注入时，Spring 首先会通过<strong>默认构造器或者无参构造器创建 Bean 的实例</strong>，而<strong>不需要立即注入依赖</strong>。这就允许 Bean 在实例化后就可以被提前暴露，例如放进 Spring 的三级缓存中</p><h2 id="为什么需要三级缓存-二级缓存不行吗？"><a href="#为什么需要三级缓存-二级缓存不行吗？" class="headerlink" title="为什么需要三级缓存 二级缓存不行吗？"></a>为什么需要三级缓存 二级缓存不行吗？</h2><p><strong>支持 AOP 代理和 BeanPostProcessor 的处理</strong></p><p>当 bean 正在创建时，并且存在循环依赖，直接将未经过后置处理（例如 AOP 代理）的 bean 提前暴露，是有风险的。</p><p>使用 <strong>三级缓存</strong>，Spring 可以在真正把 bean 放入二级缓存前，通过 ObjectFactory 对 bean 应用后置处理，从而返回一个经过增强或代理的早期引用。这样，后续其他依赖该 bean 的对象拿到的引用就是经过 AOP 代理增强后的，而不是一个“裸”对象。</p><p><strong>避免重复暴露和确保线程安全</strong></p><p><strong>控制暴露顺序：</strong><br> 如果直接将 bean 放入二级缓存，一旦被依赖注入，后续就无法通过工厂再做一层包装或后置处理。三级缓存让 Spring 在适当时机生成早期引用，然后再把它转移到二级缓存。</p><p><strong>减少竞争条件：</strong><br> 三级缓存在多线程环境下更易于控制对象暴露的状态和顺序，从而能安全地解决循环依赖问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/ZzzjhBlog/2025/03/31/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/ZzzjhBlog/2025/03/31/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>就是一个类中又完整的嵌套了另一个类的结构。被嵌套的类叫做内部类（inner class） 嵌套其他类的类称为外部类（outer class）<br><strong>拓展</strong><br>类的五大成员：<strong>属性、方法、构造器、代码块、内部类</strong><br><strong>内部类最主要的特点就是可以直接访问私有属性</strong></p><p>基本语法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; <span class="comment">//内部类 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123; <span class="comment">//外部其他类 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的五要素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outer</span><span class="params">(<span class="type">int</span> n1)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.n1 = n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123; <span class="comment">//方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="comment">//代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类 在Outer内定义 </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部类的类型（四种）"><a href="#内部类的类型（四种）" class="headerlink" title="内部类的类型（四种）"></a>内部类的类型（四种）</h2><p>定义在外部类的局部位置上（比如方法内）<br>①局部内部类（又类名）<br>②<strong>匿名内部类</strong>（<strong>没有类名</strong>，<strong>重点！！！</strong>）<br>定义在外部类的成员位置上：<br>③成员内部类（没用static 修饰）<br>④静态内部类（使用static 修饰）</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>局部内部类是定义在外部类的局部位置，比如方法中，并且有类名<br>1.可以直接访问外部类的所有成员，包含私有的<br>2.不能添加访问修饰符，因为它的地位就是一个局部变量。局部变,修饰符的。<br>3.作用域：仅仅在定义它的方法或代码块中。<br>4.局部内部类—访问—-&gt;外部类的成员[访问方式：直接访问】<br>5.外部类—访问—-&gt;局部内部类的成员,访问方式：创建对象，再访问（注意：必须在作用域内）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123; <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Outer01 m2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//局部内部类是定义在外部类的局部位置，通常在方法中</span></span><br><span class="line">        <span class="comment">//不能添加访问修饰符，但是可以用final修饰</span></span><br><span class="line">        <span class="comment">//作用域：仅仅在定义它的方法或代码块中 因为这个内部类就像相当于方法或代码块中的一个局部变量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner01</span> &#123; <span class="comment">//局部内部类（本质上是一个类 类的五大成员都可以拥有 ）</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;n1=&quot;</span> + n1); <span class="comment">//可以直接访问外部类的所有成员包括私有的</span></span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//外部类在方法中可以创建Inner01对象，然后调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//n1=100</span></span><br><span class="line"><span class="comment">//Outer01 m2()</span></span><br></pre></td></tr></table></figure><p>记住：<br>（1）局部内部类定义在方法中或代码块中<br>（2）作用域在这个方法中或代码块中<br>（3）这个局部内部类本质就是一个类 包含类的五大成员</p><p><strong>外部</strong>其他类—不能访问—–&gt;局部内部类**（因为局部内部类相当于一个局部变量）</p><p>如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）<br>演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer01 m2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner01</span> &#123;</span><br><span class="line">            <span class="comment">//此时内部类也有个 成员 n1 外部类也有成员n1</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//那么此时访问的就是 内部类的n1 《遵守就近原则》 若想访问外部成员 n1 （外部类名.this.成员）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Inner n1=&quot;</span> + n1); <span class="comment">//访问内部类的n1</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Outer n1=&quot;</span> + Outer.<span class="built_in">this</span>.n1);<span class="comment">//访问外部类的n1</span></span><br><span class="line">                <span class="comment">//Outer.this 这个本质就是外部类的一个对象 就是哪个对象调用 m1()方法就是哪个对象 我们在主方法中创建的 outer 对象调用了m1()方法 那么Outer.this就是outer对象</span></span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="匿名内部类（！！！）"><a href="#匿名内部类（！！！）" class="headerlink" title="匿名内部类（！！！）"></a>匿名内部类（！！！）</h3><p>描述：</p><p>定义在外部类的局部位置 比如方法中 并且没有类名<br>（1）本质还是类<br>（2）内部类<br>（3）该类没有名字<br>（4）同时还是一个对象<br>（5）可以直接访问外部类的所有成员 包括私有的<br>（6）不能添加修饰符 因为它的地位就是一个局部变量<br>（7）作用域：仅仅在定义它的方法中或代码块中<br>（8）匿名内部类访问外部成员方式 【直接访问】<br>（9）外部其他类不能访问匿名内部类（因为匿名内部类地位就是一个局部变量）<br>（10）如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表)&#123;</span><br><span class="line">    类体;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例子:</p><p><strong>基于接口创建匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123; <span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//需求 ： 想使用接口A，并且创建对象</span></span><br><span class="line">        <span class="comment">//传统方式：写一个类 实现该接口 并创建对象   接口名 变量名 = new 实现该接口的类的类名();</span></span><br><span class="line">        <span class="comment">//示例</span></span><br><span class="line">        <span class="comment">/*A tiger = new Tiger();</span></span><br><span class="line"><span class="comment">        tiger.cry();*/</span></span><br><span class="line">        <span class="comment">//如果你创建的类实现了该接口 但是只是用一次 后面不用了 这样定义一个类很麻烦</span></span><br><span class="line">        <span class="comment">//使用匿名内部类方式（简化开发）</span></span><br><span class="line">        <span class="comment">//示例</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>() &#123;  <span class="comment">//一般来说接口是不能直接创建实例的  可是这里 相当于在Tiger类里面重写cry()方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎在叫唤&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tiger.cry();</span><br><span class="line">        System.out.println(<span class="string">&quot;tiger的运行类型等于&quot;</span> + tiger.getClass()); <span class="comment">//输出结果 Outer$1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时tiger 的编译类型是： A接口      运行类型是：匿名内部类 XXX 这个匿名内部类名称XXX是外部类名称 Outer加了一个$1 也就是 Outer$1</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            底层中 会分配一个匿名  Outer$1</span></span><br><span class="line"><span class="comment">            是由 一个类 class Outer$1 implements A&#123;</span></span><br><span class="line"><span class="comment">                    <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">                    public void cry() &#123;</span></span><br><span class="line"><span class="comment">                        System.out.println(&quot;老虎叫唤&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//同时jdk底层在创建匿名内部类后 立即创建了 创建了Outer$1实例，并且把地址返回给 tiger</span></span><br><span class="line">        <span class="comment">//匿名内部类使用一次 就不能在使用了 不是tiger 无法使用 而是 Outer$1这个类没有了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎叫唤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123; <span class="comment">//接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基于类创建匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123; <span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">//分析</span></span><br><span class="line">        <span class="comment">//1. father编译类型 Father</span></span><br><span class="line">        <span class="comment">//2. father运行类型 Outer$1</span></span><br><span class="line">        <span class="comment">//3.底层会创建匿名内部类</span></span><br><span class="line">        <span class="comment">//4.同时也直接返回了匿名内部类Outer$1的一个对象</span></span><br><span class="line">        <span class="comment">//5.注意(&#x27;jack&#x27;)参数列表回传给Father的构造器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * class Outer$1 extends Father&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void test() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;匿名内部类重写test方法&quot;);</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写test方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//Father father1 = new Father(&quot;mack&quot;);</span></span><br><span class="line">        <span class="comment">//如果只是这样的化 那么它就只是单纯的创建一个Father的对象 编译类型和运行类型都是Father</span></span><br><span class="line">        System.out.println(<span class="string">&quot;father的运行类型是：&quot;</span> + father.getClass());</span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.如果你是基于抽象类的匿名内部类就必须要重写这个抽象类的抽象方法</span></span><br><span class="line">        <span class="comment">//示例</span></span><br><span class="line">        <span class="comment">// 编译类型 Animal 运行类型 Outer$2</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;animal 运行类型&quot;</span> + animal.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123; <span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到 name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="/ZzzjhBlog/images/image-20240908001932800.png" alt="image-20240908001932800"></p><h4 id="匿名内部类的注意事项和使用细节"><a href="#匿名内部类的注意事项和使用细节" class="headerlink" title="匿名内部类的注意事项和使用细节"></a>匿名内部类的注意事项和使用细节</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//创建一个基于类的匿名内部类</span></span><br><span class="line">       <span class="comment">//此时 编译类型为 Person  运行类型为 Outer$1</span></span><br><span class="line">       <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;匿名内部类重写了 hi()方法&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//此时调用方法  由于jdk动态绑定机制 看运行型类型方法 所以调用的是Outer$1重写的hi()方法</span></span><br><span class="line">       <span class="comment">//如果没有 匿名内部类Outer$1没有重写hi()方法 那么就会找到Person的hi()方法</span></span><br><span class="line">       person.hi();</span><br><span class="line">       <span class="comment">//也可以直接调用 如下</span></span><br><span class="line">       <span class="comment">//在创建一个匿名内部类</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;匿名内部类重写hi()方法 哈哈哈哈&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span> &#123;</span><br><span class="line">               <span class="built_in">super</span>.ok(str);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.ok(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">       <span class="comment">//这段可以这么理解</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        new Person()&#123;</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void hi() &#123;</span></span><br><span class="line"><span class="comment">               System.out.println(&quot;匿名内部类重写hi()方法 哈哈哈哈&quot;);</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void ok(String str) &#123;</span></span><br><span class="line"><span class="comment">               super.ok(str);</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">       这一段就是一个对象 因为匿名内部类本身也是返回对象 所以可以调用方法 也可以传参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person ok() &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><img src="/ZzzjhBlog/images/image-20240908004314132.png" alt="image-20240908004314132"></p><h3 id="匿名内部类实践"><a href="#匿名内部类实践" class="headerlink" title="匿名内部类实践"></a>匿名内部类实践</h3><p><strong>练习一</strong></p><p><strong>匿名内部类可以当作实参直接传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类当作实参直接传递 简介高效</span></span><br><span class="line">        f1(<span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这是一副名画&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 传统方式需要定义一个类来实现接口 A，并且实现接口方法，</span></span><br><span class="line">        <span class="comment">// 然后创建该类对象并传递给方法。</span></span><br><span class="line">        <span class="comment">// 相比之下，匿名内部类的方式显得更加简洁高效。</span></span><br><span class="line">        <span class="comment">// 另一个优点是，匿名内部类每次创建的实例都是独立的，</span></span><br><span class="line">        <span class="comment">// 修改某个实例的行为不会影响其他地方的实现，</span></span><br><span class="line">        <span class="comment">// 而如果使用的是显式定义的类，修改类的实现可能会影响所有使用该类的地方。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法，形参列表（接口类型）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(A a)</span> &#123;</span><br><span class="line">        a.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习二</strong><br>要求：<br>1.有一个铃声接口Bell，里面有个ring方法<br>2.有一个手机类Cellphone，具有闹钟功能,alarmclock，参数是Bell类型<br>3.,测试手机类的闹钟功能，通过匿名内部类,（对象）作为参数，打印：懒猪起床了<br>4.再传入另一个匿名内部类（对象），打印：小伙伴上课了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CellPhone</span> <span class="variable">cellPhone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellPhone</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1. 传递的是实现了Bell的接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//2. 重写了 ring</span></span><br><span class="line">        <span class="comment">//3. 相当于接收了</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        new Bell() &#123;</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">            public void ring() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;懒猪起床了&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//这样这个参数的编译类型是Bell接口 运行类型是匿名内部类</span></span><br><span class="line">        cellPhone.alarmClock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;懒猪起床了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//这里有创建了一个 匿名内部类和上面的匿名内部类不是一个 类 但是 运行过程和上面相同</span></span><br><span class="line">        cellPhone.alarmClock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小伙伴上课了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CellPhone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span>&#123;</span><br><span class="line">        bell.ring(); <span class="comment">//动态绑定 回到运行类型的ring()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>描述：</p><p>成员内部类定义在外部类的成员位置，并且没有static修饰<br>1.可以访问外部类的所有成员 （包括私有的）<br>2**.可以添加任意访问修饰符**（public、protected、默认、private），因为它的地位是一个成员<br><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer01</span> <span class="variable">outer01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer01</span>();</span><br><span class="line">        outer01.f1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="comment">//注意成员内部类是定义在外部类的成员位置上</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123; <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Outer01 的 n1 &quot;</span> + n1 + <span class="string">&quot; Outer01 的 name&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.作用域：和外部类的其他成员一样 作用域为外部类的整个类体<br>4.成员内部类—访问—-外部成员 比如（属性、方法）【访问方式 直接访问】<br>5.外部类—访问—成员内部类 【访问方式：创建对象 访问】<br>6.外部其他类—访问—-&gt;成员内部类<br>7.如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部其他类 使用成员内部类的三种方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建内部类实例：首先，你需要创建外部类的实例，然后通过这个实例来创建内部类的实例。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        Outer01.<span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> outer01.<span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="comment">//注意成员内部类是定义在外部类的成员位置上</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123; <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Outer01 的 n1 &quot;</span> + n1 + <span class="string">&quot; Outer01 的 name&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner01</span> <span class="variable">inner01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner01</span>();</span><br><span class="line">        inner01.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>介绍</p><p>1.可以直接访问外部类的所有静态成员，包含私有的，但是不能直接访问非静态的成员<br>2**.可以添加任意访问修饰符**（public、protected、默认、private），因为它的地位是一个成员<br>3.作用域：和外部类的其他成员一样 作用域为外部类的整个类体<br>4.静态内部类—-访问——-&gt;外部类（比如：静态属性）【访问方式： 直接访问所有静态成员】<br>5.外部类—–访问——-&gt;静态内部类 访问方式【创建对象 再访问】<br>6.外部其他类——访问——-&gt;静态内部类<br>7.如果外部类和局部内部类的成员重名时候，默认遵守就近原则。如果想访问外部类的成员，则可以使用（<strong>外部类名.this.成员</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.m1();</span><br><span class="line">        <span class="comment">//因为静态内部类，可以通过类名直接访问（前提满足访问权限）</span></span><br><span class="line">        Outer02.<span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>.Inner02();</span><br><span class="line">        inner02.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer02</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1使用static 修饰</span></span><br><span class="line">    <span class="comment">//可以访问外部类的所有静态成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner02</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner02</span>();</span><br><span class="line">        inner02.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="知识点练习"><a href="#知识点练习" class="headerlink" title="知识点练习"></a>知识点练习</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a><strong>练习1</strong></h3><p>1.计算器接口具有work方法 功能是运算 有一个手机类Cellphone<br>定义方法testWork测试计算功能调用接口的work方法<br>2.调用Cellphone对象的testWork方法 使用上 匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cellphone</span> <span class="variable">cellphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cellphone</span>();</span><br><span class="line">        cellphone.testWork(<span class="keyword">new</span> <span class="title class_">Calculate</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">10</span>,<span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Calculate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cellphone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">(Calculate calculate,<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(calculate.work(a,b)); <span class="comment">//根据动态绑定规则 它的 编译类型是Calculate  运行类型是 匿名内部类 所以调用 匿名内部类的testWork()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><p>这段代码就是 在 Cellphone 类中定义了testWork()方法 形参列表是（<strong>Calculate接口，整数 a，整数 b</strong>）然后我们在主方法中 创建CeLLphone 对象实例然后调用testWork()方法 参数是用 <strong>匿名内部类形式（匿名内部类同时也是一个对象） 传了一个 实现了Calculate 的实现类进去</strong> 还有 整数 a 和整数b  然后再testWork()方法中 <strong>局部变量calculate 就是我们传入的 实现了Calculate接口的匿名内部类</strong>  然后<strong>调用这个 实现类重写的 work()方法</strong> 。</p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a><strong>练习2</strong></h3><p>1.编写一个类A 在类中定义局部内部类B ,B中有一个私有常量name，有一个方法show（）打印常量name 进行测试<br>2.进阶：A中 也定义一个私有变量name，在show（）方法中打印测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类A的name&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">            <span class="keyword">private</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类B的name&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String name)</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类name: &quot;</span> + name);</span><br><span class="line">                System.out.println(<span class="string">&quot;外部类name: &quot;</span> + A.<span class="built_in">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.show(b.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a><strong>练习3</strong></h3><p>有一个Car类 有属性temperature（温度） 车内有Air（空调）类，有吹风功能flow  Air会监视车内的温度 如果超过40度吹冷气 低于0度吹暖气 如果在这之间则关掉空调  实例化 具有不同温度的Car对象 调用空调的flow方法 测试空条吹的风是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">41</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">20</span>);</span><br><span class="line">         car1.<span class="keyword">new</span> <span class="title class_">Air</span>().flow();</span><br><span class="line">         car2.<span class="keyword">new</span> <span class="title class_">Air</span>().flow();</span><br><span class="line">         car3.<span class="keyword">new</span> <span class="title class_">Air</span>().flow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="type">double</span> temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Air</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flow</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Car.<span class="built_in">this</span>.temperature &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吹暖气&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Car.<span class="built_in">this</span>.temperature &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吹冷气&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;关闭空调&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">double</span> temperature)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/ZzzjhBlog/2025/03/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/ZzzjhBlog/2025/03/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>类的理解</strong><br>类就是对现实事物的一种描述</p><p><strong>类的组成</strong><br>属性: 指事物的特征，例如：手机事物 (品牌，价格，尺寸)<br>行为: 指事物能执行的操作，例如：手机事物 (打电话，发短信)</p><p>类和对象的关系<br>类是对事物的一种描述，对象则为具体存在的事物</p><p>**类的五大要素：**属性、方法、构造器、代码块、内部类</p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;  </span><br><span class="line">    <span class="comment">// 成员变量  </span></span><br><span class="line">    变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>;  </span><br><span class="line">    变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;  </span><br><span class="line">    ...  </span><br><span class="line">    <span class="comment">// 成员方法  </span></span><br><span class="line">    方法<span class="number">1</span>;  </span><br><span class="line">    方法<span class="number">2</span>; </span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    class 内部类名&#123;</span><br><span class="line">        <span class="comment">//内部类的属性、方法、构造器等等</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        代码；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> 类名()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> 类名(XXX XXX)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><p>创建对象<br>格式: 类名 对象名 &#x3D; new 类名();<br>范例: Phone p &#x3D; new Phone();</p><p>使用对象</p><ol><li>使用成员变量<br>格式: 对象名.变量名</li><li>使用成员方法<br>格式: 对象名.方法名()</li></ol><h3 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h3><p>比如现在有一个类Cat 我创建它的实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOP01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小白&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小黑&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在JVM内存中是这样的<br><img src="/ZzzjhBlog/images/image-20240913010328249.png" alt="image-20240913010328249"></p><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p>成员变量和局部变量的区别</p><ol><li>变量位置不同: 成员变量 (类中方法外) 局部变量 (方法内部或方法声明上)</li><li>存在中位置不同: 成员变量 (堆内存) 局部变量 (栈内存)</li><li>生命周期不同: 成员变量 (随着对象的存在而存在, 随着对象的消失而消失) 局部变量 (随着方法的调用而存在, 随着方法的调用完毕而消失)</li><li>初始化值不同: 成员变量 (有默认初始化值) 局部变量 (没有默认初始化值, 必须先定义, 赋值才能使用)</li></ol><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>如果局部跟全局变量名冲突优先使用局部 &#x3D;&gt; 就近原则<br>调用 this 所在的方法, this 就是 当前对象</p><p>this 修饰的变量用于指代成员变量, 其主要作用是 (区分局部变量和成员变量的重名问题)<br>方法的形参如果与成员变量同名, 不带 this 修饰的变量指的是形参, 而不是成员变量<br>方法的形参如果与成员变量同名, 不带 this 修饰的变量指的是成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小黄人&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;神偷奶爸&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        p1.method(p2.getName(),p2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">nationality</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//this 修饰的变量用于指代成员变量, 其主要作用是 (区分局部变量和成员变量的重名问题)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫 &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;我的年龄是 &quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot; 岁 &quot;</span>+  name +<span class="string">&quot; 的年龄是 &quot;</span> + age + <span class="string">&quot; 岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><ol><li>构造方法是一种特殊的方法</li><li>构造方法没有返回值 连返回值的位置都没有</li><li>构造方法的方法名就是类名</li><li>构造方法可以有参数 也可以没有参数</li><li>构造方法可以重载</li><li>如果没有给自己定义构造方法, 系统会默认提供一个空参数构造方法<br>如果自定义了构造方法, 系统将不提供默认的无参数构造方法<br>(建议: 如果自定义了构造方法, 最好加上无参构造)</li><li>构造方法的作用? 他是在创建对象的时候成员变量进行赋值 &#x3D;&gt; 创建对象的时候 构造只执行一次</li></ol><p><img src="/ZzzjhBlog/images/image-20240914155238011.png" alt="image-20240914155238011"></p><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小黄人&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//被static 修饰的方法或者属性 都是属于类的</span></span><br><span class="line">        <span class="comment">//使用static关键字修饰的属性或者方法 调用方式是 类名.属性名 或者类名.方法名</span></span><br><span class="line">        System.out.println(Person.nationality);</span><br><span class="line">        System.out.println(Person.getNationality());</span><br><span class="line">        <span class="comment">//也可以使用对象的实例来调用(当然 不建议这么调用 static修饰属性或者方法都推荐使用 类名.属性/方法 去调用)</span></span><br><span class="line">        System.out.println(p1.nationality);</span><br><span class="line">        System.out.println(p1.getNationality());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">nationality</span> <span class="operator">=</span> <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getNationality</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nationality;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="什么是类变量"><a href="#什么是类变量" class="headerlink" title="什么是类变量"></a>什么是类变量</h3><p>类变量也叫静态变量&#x2F;静态属性，是该类所有对象共享的变量，任何一个该类对象去访问它的时候，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的时同一个变量。</p><h3 id="如何定义类变量"><a href="#如何定义类变量" class="headerlink" title="如何定义类变量"></a>如何定义类变量</h3><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据类型 变量名 <span class="comment">//推荐这种方法</span></span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据类型 变量名</span><br></pre></td></tr></table></figure><p><strong>如何访问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.变量名 <span class="comment">//推荐</span></span><br><span class="line">对象名.类变量名</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类方法也叫静态方法</p><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据返回类型 方法名()&#123;&#125;推荐</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据返回类型 方法名()&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>如何调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.方法名 <span class="comment">//推荐</span></span><br><span class="line">对象名.方法名</span><br></pre></td></tr></table></figure><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率,比如：工具类中的方法utils,Math类、Arrays类、Collections集合类看下源码：,&gt;小结,在程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用,比如打印一维数组</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1）类方法中无this的参数,普通方法中隐含着this的参数,<br>2）类方法可以通过类名调用，也可以通过对象名调用。<br>3）普通方法和对象有关，需要通过对象名调用，比如对象名.方法名（参数），不能通过类名调用<br>4）<strong>类方法中不允许使用和对象有关的关键字，比如this和super。普通方法（成员方法）可以可以使用和对象有关的关键字</strong><br>5）类方法（静态方法）中只能访问静态变量或静态方法。<br>6）普通成员方法，既可以访问非静态成员，也可以访问静态成员。<br><strong>小结：静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员,（必须遵守访问权限）</strong></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a><strong>为什么需要继承</strong></h3><p>解决重复代码多、难以维护的问题<br><strong>目的</strong><br>代码重用、简化系统、减轻负担<br><strong>手段方法</strong><br>抽取共同的属性和方法 让子类继承</p><p><strong>使用细节：</strong><br>①子类<strong>继承了父类的所有属性和方法</strong>但是<strong>私有属性和方法不能在 子类中直接使用 要使用 公共方法间接的访问</strong> 子类只<strong>能直接使用非私有的属性和方法</strong><br><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(son.getM());<span class="comment">//子类想要获取父类的私有属性 就要使用父类提供的共有方法来间接访问父类的私有属性</span></span><br><span class="line">        son.f2(); <span class="comment">//子类想要使用父类的 私有方法 也需要 父类提供共有方法 间接的去调用父类的私有方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的f1 私有方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span>&#123;</span><br><span class="line">        f1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <strong>子类必须调用父类的构造器 完成父类的初始化</strong></p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">//默认调用父类的无参数构造器 super(); 就算你没写 也默认有</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③当创建子类对象时候 <strong><font color='Rhodamine '>不管使用哪个子类的构造器 子类总是默认调用父类的无参数构造器完成父类的初始化</font></strong> 如果**<font color='Rhodamine '>父类没有提供无参数构造器</font>** 那么在子类的构造器中**<font color='Rhodamine '>必须用super取指定调用父类的构造器取完成父类的初始化</font>** 否则编译不会通过<br><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的有参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//父类中没有 无参数构造器  那么就必须要指定调用父类的哪个构造器</span></span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④如果希望显示的调用父类的构造器那么可以这样：super()&#x2F;&#x2F;参数列表</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的有参数构造器执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="comment">//super() 显示的调用父类的构造器</span></span><br><span class="line">        <span class="built_in">super</span>(name,age); <span class="comment">//显示的调用父类的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤super在使用的时候需要放在构造器第一行</strong><br><strong>⑥super()和this()都只能放在构造器第一行 因此这两个方法不能存在于一个构造方法内</strong>**<br>⑦java所有的类都是 Object 的子类 可以调用Object 的公共方法<br>⑧java 构造器的调用不限于直接父类 会一直追溯到Object类（顶级父类）<br><strong>⑨java中 类只能实现单继承 如果要实现 c 继承 b 继承 a 那么 可以让 c 继承b  让b 继承 a那么c就继承a</strong></p><p><strong>示例</strong><br>这个例子也展示了 注意事项的 第⑧个 和第⑨个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参数构造器被调用&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的无参数构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C的无参数构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出顺序 A的无参数构造器 -&gt; B的无参数构造器 -&gt; C的无参数构造器</span></span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>如果父类的方法不能够满足子类的要求的话 子类可以重写这个方法 来满足自己的需要<br>当然也可以</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>被修饰的 变量不能被修改<br>被修饰的 方法不能被重写<br>被修饰的 类不能被继承</p><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p><strong>好处&#x2F;细节</strong><br>①调用父类构造器的好处是（分工明确，父类属性由父类初始化，子类属性由子类初始化）<br>②当子类中有和父类中的成员（属性或方法）<strong>重名的时候，为了访问父类成员，必须通过super</strong>。如果<strong>没有重名，使用super、this 直接访问</strong>是一样的效果</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="comment">//此时子类中由和父类重名的方法 那么优先调用子类的</span></span><br><span class="line">        <span class="comment">//如果 我把子类的f1 方法注释掉 那么只有父类 有f1方法 就调用父类的</span></span><br><span class="line">        son.f1();</span><br><span class="line">        <span class="comment">//如果父类和子类中都有 f1 方法 那么我想在子类中调用父类的 f1方法 那么就需要使用 super 关键字 【super.方法名】 来调用父类的f1方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的 f1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void f1() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;B类的f1方法&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查找  <strong>f1方法</strong>的顺序是:<br>①先查找本类中有没有 有则调用<br>②没有 则找父类（如果有 并且可以调用 则调用）<br>③<strong>如果父类没有 那么就继续找 父类的父类 一直这样 直到找到 Object类（顶级父类）</strong><br>如果整个过程找到了 不能访问 则报错<br>如果整个过程没找到 则提示方法不存在</p><p>③super的访问<strong>不限于 直接父类 如果 爷爷类和本类中有同名的成员 也可以使用super访问</strong>爷爷类的成员 如果<strong>父类和爷爷类中都有 同名成员 那么遵循就近原则</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        son.f1(); <span class="comment">//父类和爷爷类 都有 遵循就近原则 访问父类的f1方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandFather</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷类的 f1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandFather</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的 f1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void f1() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;B类的f1方法&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/ZzzjhBlog/images/image-20240919222237379.png" alt="image-20240919222237379"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>①一个对象的编译类型和运行类型可以不一致<br>②编译类型在定义对象时，就确定了，不能改变<br>③运行类型是可以变化的<br>④编译类型看定义时  &#x3D; 的左边，运行类型 看 &#x3D; 的右边</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//animal1 的编译类型是Animal  运行类型是 Cat</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal1.cry(); <span class="comment">//运行时，这是执行到该行时 运行类型时 Cat 那么调用cry方法 就会找Cat 的cry()方法</span></span><br><span class="line">        <span class="comment">//animal1 的编译类型是Animal  运行类型是 Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        animal2.cry(); <span class="comment">//这个和上面一样 运行类型时 Dog 那么调用cry方法 就会找Dog 的cry()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 猫在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog cry() 狗在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/ZzzjhBlog/images/image-20240919223423463.png" alt="image-20240919223423463"></p><h3 id="多态的注意事项和细节"><a href="#多态的注意事项和细节" class="headerlink" title="多态的注意事项和细节"></a>多态的注意事项和细节</h3><p>多态的前提是：两个类存在继承关系</p><h4 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h4><p>①本质：父类的引用指向了子类的对象<br>②语法：父类类型  引用名 &#x3D; new 子类类型()；<br>③特点：编译看左边 运行看右边<br>  可以调用父类中的所有成员【要遵守访问权限】<br>  不能调用子类中特有成员<br>  最终运行效果看子类的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.catchMouse(); <span class="comment">//此时会报错 因为这个catchMouse 是子类的特有方法 因为在编译阶段能调用的成员 是由编译类型决定的</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 猫在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h4><p>①语法：子类类型 引用名 &#x3D; （子类类型） 父类引用；<br><strong>②只能强行转换 父类的应用 不能强行转换父类的对象</strong><br><strong>③要求父类的引用必须指向的是当前目标类型的对象</strong><br>④ 强转后 可以调用子类类型中所有的成员</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.catchMouse(); <span class="comment">//此时会报错 因为这个catchMouse 是子类的特有方法 因为在编译阶段能调用的成员 是由编译类型决定的</span></span><br><span class="line">        <span class="comment">//向下转型 如果要调用子类中的特有方法 需要向下转型</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal; <span class="comment">//此时编译类型 和 运行类型 都是Cat</span></span><br><span class="line">        cat.catchMouse(); <span class="comment">//此时就能调用子类中的特有方法</span></span><br><span class="line">        <span class="comment">//但是这样写不行 因为 父类的引用必须指向的是当前目标类型的对象 就是一开始 你的 编译类型是 Animal 运行类型是 Cat  那么这时候 向下转型 需要的是 当初 运行类型的对象 Cat cat = (Cat) animal;</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 猫在叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性没有重写的说法 属性的值看 编译类型<br><strong>instance Of 比较操作符，可以用来判断对象的运行类型是否为（XX类型或者XX类型的子类型）</strong></p><p><strong>练习题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(son.count);</span><br><span class="line">        son.display();</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> son;</span><br><span class="line">        System.out.println(father == son);</span><br><span class="line">        System.out.println(father.count);</span><br><span class="line">        father.display();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//求输出的结果</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>首先创建 Son类型的对象 然后son对象中有父类的count 和子类的count 值分别是 10和20。</p><p> <strong>s.count</strong> 这个是访问属性 <strong>访问属性 看编译类型</strong> 此时编译类型是 Son 那么s.count就是20。</p><p> 然后就是 <strong>s.display()</strong> 此时调用方法 如果是 <strong>调用方法那么就是 看运行类型</strong>  此时运行类型是 Son，那么 s.display()中 输出 this.count 就是当前对象的 count 那么就是 20。</p><p>接下来是  <strong>Father father &#x3D; son;</strong> 此时 发生了**向上转型，向上转型结束后 此时的 编译类型是Father 运行类型是 Son **。 </p><p>接下来 **System.out.println(father &#x3D;&#x3D; son); **它们都指向同一个对象 所以输出trye</p><p>然后  <strong>father.count</strong>  这个是<strong>访问属性 看编译类型</strong> 而<strong>此时编译类型 是Father</strong> 那么 father.count 就是 10。</p><p>最后 <strong>faher.display()</strong> 这里是调用方法 此时的运行类型还是 Son 那就是调用 Son中的 display 方法。 this.count  this就是本身这个对象 所以 this.count 是20</p><p><strong>运行结果</strong><br><img src="/ZzzjhBlog/images/image-20240919232948433.png" alt="image-20240919232948433"></p><p><strong>java 动态绑定机制！！！！</strong></p><p>①<strong>当调用方法对象的时候</strong> 该<strong>方法会和该对象的内存地址&#x2F;运行类型绑定</strong><br>②<strong>当调用对象属性时</strong>，没有动态绑定机制，<strong>哪里声明，哪里使用</strong></p><p><strong>题目</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(father.sum());</span><br><span class="line">        System.out.println(father.sum1());</span><br><span class="line">        <span class="comment">//求输出的结果</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int sum() &#123;</span></span><br><span class="line"><span class="comment">        return i + 20;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>father.sum();</strong>    father <strong>编译类型是 Father</strong>  <strong>运行类型是 Son</strong>  <strong>调用方法 触发动态绑定机制</strong>   <strong>调用方法 看 运行类型</strong> 此时 Son中 sum 方法被注释掉  那么就会 向它的父类 Father 查找有没有 sum方法 结果 有 然后 <strong>执行 return getI() + 10;</strong>  又**发现 要调用 getI()方法 此时又触发动态绑定机制 **调用方法 看运行类型 <strong>那么调用的就是 运行类型 Son 的 getI()方法</strong> 获得 i的值 为 20；最终 输出 30；<br>然后下一个 <strong>father.sum1();</strong>  <strong>触发动态绑定机制  调用方法 看 运行类型</strong>  Son中 有sum1()方法<br>然后 i + 10 此时 i  在 Son 中声明了 那么就用 Son中 i 的值 20 .最后结果为 30；</p><p><strong>运行结果</strong><br><img src="/ZzzjhBlog/images/image-20240919234815441.png" alt="image-20240919234815441"></p><p><strong>改动题目</strong><br>将 子类的 sum1 也注释掉那么输出什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(father.sum1());</span><br><span class="line">        <span class="comment">//求输出的结果</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int sum() &#123;</span></span><br><span class="line"><span class="comment">        return i + 20;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int sum1() &#123;</span></span><br><span class="line"><span class="comment">        return i + 10;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>father.sum()   father <strong>编译类型是 Father</strong>  <strong>运行类型是 Son</strong>  <strong>调用方法 触发动态绑定机制</strong>   <strong>调用方法 看 运行类型</strong>  此时 Son中 sum1 方法被注释掉  那么就会 向它的父类 Father 查找有没有 sum1 方法 结果 有 那就执行Father 的sum1方法   <strong>return i + 10;</strong>  此时 i 在 Father 类中声明了 那么就是用 Father 中 i 的值 那就是 10； 最后返回结果时 20；</p><p><strong>运行结果：</strong><br><img src="/ZzzjhBlog/images/image-20240919235229646.png" alt="image-20240919235229646"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
